<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue3封装echarts（升级版）</title>
      <link href="/posts/9983.html"/>
      <url>/posts/9983.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>项目中经常用到echarts，不做封装直接拿来使用也行，但不可避免要写很多重复的配置代码，封装稍不注意又会过度封装，丢失了扩展性和可读性。始终没有找到一个好的实践，偶然看到一篇文章，给了灵感。找到了一个目前认为用起来很舒服的封装。</p></blockquote><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><ol><li>结合项目需求，针对不同类型的图表，配置基础的默认通用配置，例如x/y，label，图例等的样式</li><li>创建图表组件实例（不要使用<code>id</code>,容易重复，还需要操作<code>dom</code>，直接用<code>ref</code>获取当前组件的<code>el</code>来创建图表），提供<code>type</code>(图表类型)，和<code>options</code>(图表配置)两个必要属性</li><li>根据传入<code>type</code>，加载默认的图表配置</li><li>深度监听传入的<code>options</code>，变化时更新覆盖默认配置，更新图表</li><li><strong>提供事件支持，支持<code>echart</code>事件按需绑定交互</strong></li></ol><blockquote><p>注意要确保所有传入图表组件的options数组都是<a href="https://cn.vuejs.org/api/reactivity-advanced.html#shallowreactive">shallowReactive</a>类型，避免数组量过大，深度响应式导致性能问题</p></blockquote><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">├─v-charts</span><br><span class="line">│  │  index.ts     <span class="comment">// 导出类型定义以及图表组件方便使用</span></span><br><span class="line">│  │  <span class="keyword">type</span>.d.ts    <span class="comment">// 各种图表的类型定义</span></span><br><span class="line">│  │  useCharts.ts <span class="comment">// 图表hooks</span></span><br><span class="line">│  │  v-charts.vue <span class="comment">// echarts图表组件</span></span><br><span class="line">│  │</span><br><span class="line">│  └─options <span class="comment">// 图表配置文件</span></span><br><span class="line">│          bar.ts</span><br><span class="line">│          gauge.ts</span><br><span class="line">│          pie.ts</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/202303301114540.png" alt="目录结构"></p><hr><h1 id="组件代码"><a href="#组件代码" class="headerlink" title="组件代码"></a>组件代码</h1><h2 id="v-charts-vue"><a href="#v-charts-vue" class="headerlink" title="v-charts.vue"></a>v-charts.vue</h2><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;v-charts&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;chartRef&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%; height: 100%&quot;</span> /&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">import &#123; onMounted, PropType, shallowRef, toRefs, watch &#125; from &quot;vue&quot;;</span><br><span class="line">import * as echarts from &quot;echarts/core&quot;;</span><br><span class="line">import &#123; ChartsEvents, ChartType, useCharts &#125; from &quot;./useCharts&quot;;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * echarts事件类型</span><br><span class="line"> * 截至目前，vue3类型声明参数必须是以下内容之一，暂不支持外部引入类型参数</span><br><span class="line"> * 1. 类型字面量</span><br><span class="line"> * 2. 在同一文件中的接口或类型字面量的引用</span><br><span class="line"> * // 文档中有说明：https://cn.vuejs.org/api/sfc-script-setup.html#typescript-only-features</span><br><span class="line"> */</span><br><span class="line">interface EventEmitsType &#123;</span><br><span class="line">  &lt;T extends ChartsEvents.EventType&gt;(</span><br><span class="line">    e: `$&#123;T&#125;`,</span><br><span class="line">    event: ChartsEvents.Events[Uncapitalize&lt;T&gt;]</span><br><span class="line">  ): void;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">defineOptions(&#123;</span><br><span class="line">  name: &quot;VCharts&quot;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 定义props，提供ts支持</span><br><span class="line">const props = defineProps(&#123;</span><br><span class="line">  // 定义Echarts类型</span><br><span class="line">  type: &#123;</span><br><span class="line">    type: String as PropType&lt;ChartType&gt;,</span><br><span class="line">    default: &quot;bar&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 定义Echarts配置项</span><br><span class="line">  options: &#123;</span><br><span class="line">    type: Object as PropType&lt;echarts.EChartsCoreOption&gt;,</span><br><span class="line">    default: () =&gt; (&#123;&#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 定义事件，提供ts支持</span><br><span class="line">defineEmits&lt;EventEmitsType&gt;();</span><br><span class="line"></span><br><span class="line">// https://cn.vuejs.org/api/reactivity-utilities.html#toref</span><br><span class="line">const &#123; type, options &#125; = toRefs(props);</span><br><span class="line">// https://cn.vuejs.org/api/reactivity-advanced.html#shallowref</span><br><span class="line">const chartRef = shallowRef();</span><br><span class="line"></span><br><span class="line">const &#123; charts, setOptions, initChart &#125; = useCharts(&#123; type, el: chartRef &#125;);</span><br><span class="line"></span><br><span class="line">onMounted(async () =&gt; &#123;</span><br><span class="line">  // 初始化图表</span><br><span class="line">  await initChart();</span><br><span class="line">  // 设置图表配置项</span><br><span class="line">  setOptions(options.value);</span><br><span class="line">&#125;);</span><br><span class="line">// 监听options变化，更新图表</span><br><span class="line">watch(</span><br><span class="line">  options,</span><br><span class="line">  () =&gt; &#123;</span><br><span class="line">    setOptions(options.value);</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    deep: true</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">// 可以通过 defineExpose 编译器宏来显式指定在 &lt;script setup&gt; 组件中要暴露出去的属性</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  $charts: charts</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;style lang=&quot;scss&quot; scoped&gt;</span><br><span class="line">.v-charts &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  min-height: 200px;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h2 id="useCharts-ts"><a href="#useCharts-ts" class="headerlink" title="useCharts.ts"></a>useCharts.ts</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 图表hooks</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ChartType</span> &#125; <span class="keyword">from</span> <span class="string">&quot;./type&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&quot;echarts/core&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">ShallowRef</span>,</span><br><span class="line">  <span class="title class_">Ref</span>,</span><br><span class="line">  onBeforeUnmount,</span><br><span class="line">  shallowRef,</span><br><span class="line">  shallowReactive,</span><br><span class="line">  useAttrs</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">TitleComponent</span>,</span><br><span class="line">  <span class="title class_">LegendComponent</span>,</span><br><span class="line">  <span class="title class_">TooltipComponent</span>,</span><br><span class="line">  <span class="title class_">GridComponent</span>,</span><br><span class="line">  <span class="title class_">DatasetComponent</span>,</span><br><span class="line">  <span class="title class_">TransformComponent</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&quot;echarts/components&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入图表类型</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BarChart</span>, <span class="title class_">LineChart</span>, <span class="title class_">PieChart</span>, <span class="title class_">GaugeChart</span> &#125; <span class="keyword">from</span> <span class="string">&quot;echarts/charts&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入图表渲染器</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">LabelLayout</span>, <span class="title class_">UniversalTransition</span> &#125; <span class="keyword">from</span> <span class="string">&quot;echarts/features&quot;</span>;</span><br><span class="line"><span class="comment">// 引入canvas渲染器</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">CanvasRenderer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;echarts/renderers&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> optionsModules = <span class="keyword">import</span>.<span class="property">meta</span>.<span class="property">glob</span>&lt;&#123; <span class="attr">default</span>: echarts.<span class="property">EChartsCoreOption</span> &#125;&gt;(</span><br><span class="line">  <span class="string">&quot;./options/**.ts&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">ChartHookOption</span> &#123;</span><br><span class="line">  type?: <span class="title class_">Ref</span>&lt;<span class="title class_">ChartType</span>&gt;;</span><br><span class="line">  <span class="attr">el</span>: <span class="title class_">ShallowRef</span>&lt;<span class="title class_">HTMLElement</span>&gt;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  视口变化时echart图表自适应调整</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ChartsResize</span> &#123;</span><br><span class="line">  #charts = <span class="keyword">new</span> <span class="title class_">Set</span>&lt;echarts.<span class="property">ECharts</span>&gt;(); <span class="comment">// 缓存已经创建的图表实例</span></span><br><span class="line">  #timeId = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleResize</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>)); <span class="comment">// 视口变化时调整图表</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">getCharts</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> [...<span class="variable language_">this</span>.#charts];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">handleResize</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.#timeId);</span><br><span class="line">    <span class="variable language_">this</span>.#timeId = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.#charts.<span class="title function_">forEach</span>(<span class="function"><span class="params">chart</span> =&gt;</span> &#123;</span><br><span class="line">        chart.<span class="title function_">resize</span>();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;, <span class="number">500</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">add</span>(<span class="params">chart: echarts.ECharts</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#charts.<span class="title function_">add</span>(chart);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">remove</span>(<span class="params">chart: echarts.ECharts</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.#charts.<span class="title function_">delete</span>(chart);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">removeListener</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&quot;resize&quot;</span>, <span class="variable language_">this</span>.<span class="property">handleResize</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> chartsResize = <span class="keyword">new</span> <span class="title class_">ChartsResize</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 图表hooks</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useCharts</span> = (<span class="params">&#123; type, el &#125;: ChartHookOption</span>) =&gt; &#123;</span><br><span class="line">  echarts.<span class="title function_">use</span>([</span><br><span class="line">    <span class="title class_">BarChart</span>,</span><br><span class="line">    <span class="title class_">LineChart</span>,</span><br><span class="line">    <span class="title class_">BarChart</span>,</span><br><span class="line">    <span class="title class_">PieChart</span>,</span><br><span class="line">    <span class="title class_">GaugeChart</span>,</span><br><span class="line">    <span class="title class_">TitleComponent</span>,</span><br><span class="line">    <span class="title class_">LegendComponent</span>,</span><br><span class="line">    <span class="title class_">TooltipComponent</span>,</span><br><span class="line">    <span class="title class_">GridComponent</span>,</span><br><span class="line">    <span class="title class_">DatasetComponent</span>,</span><br><span class="line">    <span class="title class_">TransformComponent</span>,</span><br><span class="line">    <span class="title class_">LabelLayout</span>,</span><br><span class="line">    <span class="title class_">UniversalTransition</span>,</span><br><span class="line">    <span class="title class_">CanvasRenderer</span></span><br><span class="line">  ]);</span><br><span class="line">  <span class="comment">// 初始化完成标识</span></span><br><span class="line">  <span class="keyword">let</span> initComplete = <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">// 图表实例</span></span><br><span class="line">  <span class="keyword">const</span> charts = shallowRef&lt;echarts.<span class="property">ECharts</span>&gt;();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 图表配置</span></span><br><span class="line">  <span class="keyword">let</span> options!: echarts.<span class="property">EChartsCoreOption</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 获取图表配置</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">getOptions</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> moduleKey = <span class="string">`./options/<span class="subst">$&#123;type.value&#125;</span>.ts`</span>;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">default</span>: defaultOption &#125; = <span class="keyword">await</span> optionsModules[moduleKey]();</span><br><span class="line">    <span class="keyword">return</span> defaultOption;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置图表配置</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">setOptions</span> = (<span class="params">opt: echarts.EChartsCoreOption</span>) =&gt; &#123;</span><br><span class="line">    initComplete &amp;&amp; charts.<span class="property">value</span>.<span class="title function_">setOption</span>(opt);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 初始化图表</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">initChart</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    charts.<span class="property">value</span> = echarts.<span class="title function_">init</span>(el.<span class="property">value</span>);</span><br><span class="line">    options = <span class="keyword">await</span> <span class="title function_">getOptions</span>();</span><br><span class="line">    charts.<span class="property">value</span>.<span class="title function_">setOption</span>(options);</span><br><span class="line">    chartsResize.<span class="title function_">add</span>(charts.<span class="property">value</span>); <span class="comment">// 将图表实例添加到缓存中</span></span><br><span class="line">    <span class="title function_">initEvent</span>(); <span class="comment">// 添加事件支持</span></span><br><span class="line">    initComplete = <span class="literal">true</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 初始化事件</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="keyword">const</span> attrs = <span class="title function_">useAttrs</span>();</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">initEvent</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">keys</span>(attrs).<span class="title function_">forEach</span>(<span class="function"><span class="params">attrKey</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="regexp">/^on/</span>.<span class="title function_">test</span>(attrKey)) &#123;</span><br><span class="line">        <span class="keyword">const</span> cb = attrs[attrKey];</span><br><span class="line">        attrKey = attrKey.<span class="title function_">replace</span>(<span class="regexp">/^on(Chart)?/</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        attrKey = <span class="string">`<span class="subst">$&#123;attrKey[<span class="number">0</span>]&#125;</span><span class="subst">$&#123;attrKey.substring(<span class="number">1</span>)&#125;</span>`</span>;</span><br><span class="line">        <span class="keyword">typeof</span> cb === <span class="string">&quot;function&quot;</span> &amp;&amp; charts.<span class="property">value</span>?.<span class="title function_">on</span>(attrKey, cb <span class="keyword">as</span> () =&gt; <span class="keyword">void</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">onBeforeUnmount</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    chartsResize.<span class="title function_">remove</span>(charts.<span class="property">value</span>); <span class="comment">// 移除缓存</span></span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    charts,</span><br><span class="line">    setOptions,</span><br><span class="line">    initChart,</span><br><span class="line">    initEvent</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> chartsOptions = &lt;T <span class="keyword">extends</span> echarts.<span class="property">EChartsCoreOption</span>&gt;<span class="function">(<span class="params">option: T</span>) =&gt;</span></span><br><span class="line">  shallowReactive&lt;T&gt;(option);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> * <span class="keyword">from</span> <span class="string">&quot;./type.d&quot;</span>;</span><br></pre></td></tr></table></figure><h2 id="type-d-ts"><a href="#type-d-ts" class="headerlink" title="type.d.ts"></a>type.d.ts</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * @Description:</span></span><br><span class="line"><span class="comment"> * @Version: 2.0</span></span><br><span class="line"><span class="comment"> * @Autor: GC</span></span><br><span class="line"><span class="comment"> * @Date: 2022-03-02 10:21:33</span></span><br><span class="line"><span class="comment"> * @LastEditors: GC</span></span><br><span class="line"><span class="comment"> * @LastEditTime: 2022-06-02 17:45:48</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// import * as echarts from &#x27;echarts/core&#x27;;</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> echarts <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">XAXisComponentOption</span>, <span class="title class_">YAXisComponentOption</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">ECElementEvent</span>, <span class="title class_">SelectChangedPayload</span>, <span class="title class_">HighlightPayload</span>,  &#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/types/src/util/types&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">TitleComponentOption</span>,</span><br><span class="line">  <span class="title class_">TooltipComponentOption</span>,</span><br><span class="line">  <span class="title class_">GridComponentOption</span>,</span><br><span class="line">  <span class="title class_">DatasetComponentOption</span>,</span><br><span class="line">  <span class="title class_">AriaComponentOption</span>,</span><br><span class="line">  <span class="title class_">AxisPointerComponentOption</span>,</span><br><span class="line">  <span class="title class_">LegendComponentOption</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/components&#x27;</span>;<span class="comment">// 组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="comment">// 系列类型的定义后缀都为 SeriesOption</span></span><br><span class="line">  <span class="title class_">BarSeriesOption</span>,</span><br><span class="line">  <span class="title class_">LineSeriesOption</span>,</span><br><span class="line">  <span class="title class_">PieSeriesOption</span>,</span><br><span class="line">  <span class="title class_">FunnelSeriesOption</span>,</span><br><span class="line">  <span class="title class_">GaugeSeriesOption</span></span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;echarts/charts&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Options</span> = <span class="title class_">LineECOption</span> | <span class="title class_">BarECOption</span> | <span class="title class_">PieECOption</span> | <span class="title class_">FunnelOption</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">BaseOptionType</span> = <span class="title class_">XAXisComponentOption</span> | <span class="title class_">YAXisComponentOption</span> | <span class="title class_">TitleComponentOption</span> | <span class="title class_">TooltipComponentOption</span> | <span class="title class_">LegendComponentOption</span> | <span class="title class_">GridComponentOption</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">BaseOption</span> = echarts.<span class="property">ComposeOption</span>&lt;<span class="title class_">BaseOptionType</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">LineECOption</span> = echarts.<span class="property">ComposeOption</span>&lt;<span class="title class_">LineSeriesOption</span> | <span class="title class_">BaseOptionType</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">BarECOption</span> = echarts.<span class="property">ComposeOption</span>&lt;<span class="title class_">BarSeriesOption</span> | <span class="title class_">BaseOptionType</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PieECOption</span> = echarts.<span class="property">ComposeOption</span>&lt;<span class="title class_">PieSeriesOption</span> | <span class="title class_">BaseOptionType</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">FunnelOption</span> = echarts.<span class="property">ComposeOption</span>&lt;<span class="title class_">FunnelSeriesOption</span> | <span class="title class_">BaseOptionType</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">GaugeECOption</span> = echarts.<span class="property">ComposeOption</span>&lt;<span class="title class_">GaugeSeriesOption</span> | <span class="title class_">GridComponentOption</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">EChartsOption</span> = echarts.<span class="property">EChartsOption</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">ChartType</span> = <span class="string">&#x27;bar&#x27;</span> | <span class="string">&#x27;line&#x27;</span> | <span class="string">&#x27;pie&#x27;</span> | <span class="string">&#x27;gauge&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// echarts事件</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">ChartsEvents</span> &#123;</span><br><span class="line">  <span class="comment">// 鼠标事件类型</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">MouseEventType</span> = <span class="string">&#x27;click&#x27;</span> | <span class="string">&#x27;dblclick&#x27;</span> | <span class="string">&#x27;mousedown&#x27;</span> | <span class="string">&#x27;mousemove&#x27;</span> | <span class="string">&#x27;mouseup&#x27;</span> | <span class="string">&#x27;mouseover&#x27;</span> | <span class="string">&#x27;mouseout&#x27;</span> | <span class="string">&#x27;globalout&#x27;</span> | <span class="string">&#x27;contextmenu&#x27;</span> <span class="comment">// 鼠标事件类型</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">MouseEvents</span> = &#123;</span><br><span class="line">    [key <span class="keyword">in</span> <span class="title class_">Exclude</span>&lt;<span class="title class_">MouseEventType</span>,<span class="string">&#x27;globalout&#x27;</span>|<span class="string">&#x27;contextmenu&#x27;</span>&gt; <span class="keyword">as</span> <span class="string">`chart<span class="subst">$&#123;Capitalize&lt;key&gt;&#125;</span>`</span>] :<span class="title class_">ECElementEvent</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 其他的事件类型极参数</span></span><br><span class="line">  <span class="keyword">interface</span> <span class="title class_">Events</span> <span class="keyword">extends</span> <span class="title class_">MouseEvents</span> &#123;</span><br><span class="line">    <span class="attr">globalout</span>:<span class="title class_">ECElementEvent</span>,</span><br><span class="line">    <span class="attr">contextmenu</span>:<span class="title class_">ECElementEvent</span>,</span><br><span class="line">    <span class="attr">selectchanged</span>: <span class="title class_">SelectChangedPayload</span>;</span><br><span class="line">    <span class="attr">highlight</span>: <span class="title class_">HighlightPayload</span>;</span><br><span class="line">    <span class="attr">legendselected</span>: &#123; <span class="comment">// 图例选中后的事件</span></span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;legendselected&#x27;</span>,</span><br><span class="line">      <span class="comment">// 选中的图例名称</span></span><br><span class="line">      <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">      <span class="comment">// 所有图例的选中状态表</span></span><br><span class="line">      <span class="attr">selected</span>: &#123;</span><br><span class="line">        [<span class="attr">name</span>: <span class="built_in">string</span>]: <span class="built_in">boolean</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// ... 其他类型的事件在这里定义</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// echarts所有的事件类型</span></span><br><span class="line">  <span class="keyword">type</span> <span class="title class_">EventType</span> = keyof <span class="title class_">Events</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  <span class="title class_">BaseOption</span>,</span><br><span class="line">  <span class="title class_">ChartType</span>,</span><br><span class="line">  <span class="title class_">LineECOption</span>,</span><br><span class="line">  <span class="title class_">BarECOption</span>,</span><br><span class="line">  <span class="title class_">Options</span>,</span><br><span class="line">  <span class="title class_">PieECOption</span>,</span><br><span class="line">  <span class="title class_">FunnelOption</span>,</span><br><span class="line">  <span class="title class_">GaugeECOption</span>,</span><br><span class="line">  <span class="title class_">EChartsOption</span>,</span><br><span class="line">  <span class="title class_">ChartsEvents</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="options-bar-ts"><a href="#options-bar-ts" class="headerlink" title="options/bar.ts"></a>options/bar.ts</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">BarECOption</span> &#125; <span class="keyword">from</span> <span class="string">&quot;../type&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">options</span>: <span class="title class_">BarECOption</span> = &#123;</span><br><span class="line">  <span class="attr">legend</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;category&quot;</span>,</span><br><span class="line">    <span class="attr">axisLine</span>: &#123;</span><br><span class="line">      <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">        <span class="comment">// type: &quot;dashed&quot;,</span></span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#C8D0D7&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">axisTick</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">axisLabel</span>: &#123;</span><br><span class="line">      <span class="attr">color</span>: <span class="string">&quot;#7D8292&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">yAxis</span>: &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&quot;value&quot;</span>,</span><br><span class="line">    <span class="attr">alignTicks</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">splitLine</span>: &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#C8D0D7&quot;</span>,</span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;dashed&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">axisLine</span>: &#123;</span><br><span class="line">      <span class="attr">lineStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: <span class="string">&quot;#7D8292&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">grid</span>: &#123;</span><br><span class="line">    <span class="attr">left</span>: <span class="number">60</span>,</span><br><span class="line">    <span class="attr">bottom</span>: <span class="string">&quot;8%&quot;</span>,</span><br><span class="line">    <span class="attr">top</span>: <span class="string">&quot;20%&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>,</span><br><span class="line">      <span class="attr">barWidth</span>: <span class="number">20</span>,</span><br><span class="line">      <span class="attr">itemStyle</span>: &#123;</span><br><span class="line">        <span class="attr">color</span>: &#123;</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;linear&quot;</span>,</span><br><span class="line">          <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">x2</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">y</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">y2</span>: <span class="number">1</span>,</span><br><span class="line">          <span class="attr">colorStops</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">offset</span>: <span class="number">0</span>,</span><br><span class="line">              <span class="attr">color</span>: <span class="string">&quot;#62A5FF&quot;</span> <span class="comment">// 0% 处的颜色</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">              <span class="attr">offset</span>: <span class="number">1</span>,</span><br><span class="line">              <span class="attr">color</span>: <span class="string">&quot;#3365FF&quot;</span> <span class="comment">// 100% 处的颜色</span></span><br><span class="line">            &#125;</span><br><span class="line">          ]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// label: &#123;</span></span><br><span class="line">      <span class="comment">//   show: true,</span></span><br><span class="line">      <span class="comment">//   position: &quot;top&quot;</span></span><br><span class="line">      <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> options;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="项目中使用"><a href="#项目中使用" class="headerlink" title="项目中使用"></a>项目中使用</h1><h2 id="index-vue"><a href="#index-vue" class="headerlink" title="index.vue"></a>index.vue</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;device-statistics chart-box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>累计设备接入统计<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-charts</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;bar&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:options</span>=<span class="string">&quot;statisDeviceByUserObjectOpts&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">selectchanged</span>=<span class="string">&quot;selectchanged&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">chart-click</span>=<span class="string">&quot;handleChartClick&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;coordinate-statistics chart-box&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>坐标数据接入统计<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">v-charts</span> <span class="attr">type</span>=<span class="string">&quot;bar&quot;</span> <span class="attr">:options</span>=<span class="string">&quot;statisCoordAccess&quot;</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123;</span></span><br><span class="line"><span class="language-javascript">  useStatisDeviceByUserObject,</span></span><br><span class="line"><span class="language-javascript">&#125; <span class="keyword">from</span> <span class="string">&quot;./hooks&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="comment">// 设备分类统计</span></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> &#123; <span class="attr">options</span>: statisDeviceByUserObjectOpts,selectchanged,handleChartClick &#125; = <span class="title function_">useStatisDeviceByUserObject</span>();</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="hooks-useStatisDeviceByUserObject-ts"><a href="#hooks-useStatisDeviceByUserObject-ts" class="headerlink" title="/hooks/useStatisDeviceByUserObject.ts"></a>/hooks/useStatisDeviceByUserObject.ts</h2><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">useStatisDeviceByUserObject</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 使用chartsOptions确保所有传入v-charts组件的options数据都是## shallowReactive浅层作用形式，避免大量数据导致性能问题</span></span><br><span class="line">  <span class="keyword">const</span> options = chartsOptions&lt;<span class="title class_">BarECOption</span>&gt;(&#123;</span><br><span class="line">    <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">xAxis</span>: &#123;&#125;,</span><br><span class="line">    <span class="attr">series</span>: []</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">init</span> = <span class="keyword">async</span> (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> xData = [];</span><br><span class="line">    <span class="keyword">const</span> sData = [];</span><br><span class="line">    <span class="keyword">const</span> dicts = useHashMapDics&lt;[<span class="string">&quot;dev_user_object&quot;</span>]&gt;([<span class="string">&quot;dev_user_object&quot;</span>]);</span><br><span class="line">    <span class="keyword">const</span> data = <span class="keyword">await</span> <span class="title function_">statisDeviceByUserObject</span>();</span><br><span class="line">    dicts.<span class="property">dictionaryMap</span>.<span class="property">dev_user_object</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">&#123; label, value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (value === <span class="string">&quot;6&quot;</span>) <span class="keyword">return</span>; <span class="comment">// 排除其他</span></span><br><span class="line">      xData.<span class="title function_">push</span>(label);</span><br><span class="line">      <span class="keyword">const</span> temp = data.<span class="title function_">find</span>(<span class="function">(<span class="params">&#123; name &#125;</span>) =&gt;</span> name === value);</span><br><span class="line">      sData.<span class="title function_">push</span>(temp?.<span class="property">qty</span> || <span class="number">0</span>);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// 给options赋值时要注意options是浅层响应式</span></span><br><span class="line">      options.<span class="property">xAxis</span> = &#123; <span class="attr">data</span>: xData &#125;; </span><br><span class="line">      options.<span class="property">series</span> = [&#123; ...options.<span class="property">series</span>[<span class="number">0</span>], <span class="attr">data</span>: sData &#125;];</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// --------- 事件 S ----------</span></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">selectchanged</span> = (<span class="params">params: ChartsEvents.Events[<span class="string">&quot;selectchanged&quot;</span>]</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params, <span class="string">&quot;选中图例了&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> <span class="title function_">handleChartClick</span> = (<span class="params">params: ChartsEvents.Events[<span class="string">&quot;chartClick&quot;</span>]</span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params, <span class="string">&quot;点击了图表&quot;</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// --------- 事件 E ----------</span></span><br><span class="line">  <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">init</span>();</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    options，</span><br><span class="line">    selectchanged,</span><br><span class="line">    handleChartClick</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>使用时输入@可以看到组件支持的所有事件：</p></blockquote><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230330112948554.png" alt="image-20230330112948554"></p><ul><li>[完整demo](</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> echarts </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue2项目开发技巧</title>
      <link href="/posts/37642.html"/>
      <url>/posts/37642.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-路由参数解耦"><a href="#1-路由参数解耦" class="headerlink" title="1.路由参数解耦"></a><strong>1.路由参数解耦</strong></h3><p>通常在组件中使用路由参数，大多数人会做以下事情。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">getParamsId</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在组件中使用 $route 会导致与其相应路由的高度耦合，通过将其限制为某些 URL 来限制组件的灵活性。正确的做法是通过 props 来解耦。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">        <span class="attr">path</span>:  <span class="regexp">/user/</span>:id ,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">        <span class="attr">props</span>: <span class="literal">true</span></span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>将路由的 props 属性设置为 true 后，组件内部可以通过 props 接收 params 参数。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">props</span>: [ id ],</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">getParamsId</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">id</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>您还可以通过功能模式返回props</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(&#123;</span><br><span class="line">    <span class="attr">routes</span>: [&#123;</span><br><span class="line">        <span class="attr">path</span>:  <span class="regexp">/user/</span>:id ,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">User</span>,</span><br><span class="line">        <span class="attr">props</span>: <span class="function">(<span class="params">route</span>) =&gt;</span> (&#123;</span><br><span class="line">            <span class="attr">id</span>: route.<span class="property">query</span>.<span class="property">id</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-功能组件"><a href="#2-功能组件" class="headerlink" title="2.功能组件"></a><strong>2.功能组件</strong></h3><p>功能组件是无状态的，它不能被实例化，也没有任何生命周期或方法。创建功能组件也很简单，只需在模板中添加功能声明即可。它一般适用于只依赖于外部数据变化的组件，并且由于其轻量级而提高了渲染性能。组件需要的一切都通过上下文参数传递。它是一个上下文对象，具体属性见文档。这里的 props 是一个包含所有绑定属性的对象。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">    &lt;div class=&quot;list&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;item&quot; v-for=&quot;item in props.list&quot; :key=&quot;item.id&quot; @click=&quot;props.itemClick(item)&quot;&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;item.title&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;item.content&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>父组件使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;List :list=&quot;list&quot; :itemClick=&quot;item =&gt; (currentItem = item)&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">import List from  @/components/List.vue</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        List</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            list: [&#123;</span><br><span class="line">                title:  title ,</span><br><span class="line">                content:  content</span><br><span class="line">            &#125;],</span><br><span class="line">            currentItem:</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-样式范围"><a href="#3-样式范围" class="headerlink" title="3.样式范围"></a><strong>3.样式范围</strong></h3><p>开发中修改第三方组件样式很常见，但是由于scoped属性的样式隔离，可能需要去掉scoped或者另起一个样式。这些做法有副作用（组件样式污染，缺乏优雅），在css预处理器中使用样式渗透来生效。我们可以使用 &gt;&gt;&gt; 或者 /deep/ 来解决这个问题：</p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">Outer layer &gt;&gt;&gt; <span class="selector-class">.el-checkbox</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.el-checkbox__label</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/deep/ <span class="selector-class">.el-checkbox</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">26px</span>;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.el-checkbox__label</span> &#123;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><h3 id="4-watch的高级使用"><a href="#4-watch的高级使用" class="headerlink" title="4.watch的高级使用"></a><strong>4.watch的高级使用</strong></h3><p>watch 在监听器属性发生变化时触发，有时我们希望 watch 在组件创建后立即执行。可能想到的方式是在创建生命周期中调用它一次，但这不是一种优雅的编写方式，所以也许我们可以使用这样的东西。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:  <span class="title class_">Joe</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: &#123;</span><br><span class="line">            <span class="attr">handler</span>:  sayName ,</span><br><span class="line">            <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Deep Listening</strong>监听一个对象时，当对象内部的属性发生变化时，watch是不会被触发的，所以我们可以为它设置深度监听。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">studen</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>:  <span class="title class_">Joe</span> ,</span><br><span class="line">            <span class="attr">skill</span>: &#123;</span><br><span class="line">                <span class="attr">run</span>: &#123;</span><br><span class="line">                    <span class="attr">speed</span>:  fast</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="attr">studen</span>: &#123;</span><br><span class="line">            <span class="attr">handler</span>:  sayName ,</span><br><span class="line">            <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">studen</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>触发监听器执行多个方法</strong>使用数组，您可以设置多个形式，包括字符串、函数、对象。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>:  <span class="title class_">Joe</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: [</span><br><span class="line">             sayName1 ,</span><br><span class="line">            <span class="keyword">function</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="title function_">sayName2</span>()</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">handler</span>:  sayName3 ,</span><br><span class="line">                <span class="attr">immaediate</span>: <span class="literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">sayName1</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( sayName1==&gt; , <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">sayName2</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( sayName2==&gt; , <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">sayName3</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>( sayName3==&gt; , <span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="5-watch监听多个变量"><a href="#5-watch监听多个变量" class="headerlink" title="5.watch监听多个变量"></a><strong>5.watch监听多个变量</strong></h3><p>watch 本身不能监听多个变量。但是，我们可以通过返回具有计算属性的对象然后监听该对象来“监听多个变量”。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">msg1</span>:  apple ,</span><br><span class="line">            <span class="attr">msg2</span>:  banana</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">compouted</span>: &#123;</span><br><span class="line">        <span class="title function_">msgObj</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">const</span> &#123; msg1, msg2 &#125; = <span class="variable language_">this</span></span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                msg1,</span><br><span class="line">                msg2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">watch</span>: &#123;</span><br><span class="line">        <span class="attr">msgObj</span>: &#123;</span><br><span class="line">            <span class="title function_">handler</span>(<span class="params">newVal, oldVal</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (newVal.<span class="property">msg1</span> != oldVal.<span class="property">msg1</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>( msg1 is change )</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (newVal.<span class="property">msg2</span> != oldVal.<span class="property">msg2</span>) &#123;</span><br><span class="line">                    <span class="variable language_">console</span>.<span class="title function_">log</span>( msg2 is change )</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-事件参数-event"><a href="#6-事件参数-event" class="headerlink" title="6.事件参数$event"></a><strong>6.事件参数$event</strong></h3><p>$event 是事件对象的一个特殊变量，它在某些场景下为我们提供了更多的可用参数来实现复杂的功能。本机事件：与本机事件中的默认事件对象行为相同。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; @input=&quot;inputHandler( hello , $event)&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        inputHandler(msg, e) &#123;</span><br><span class="line">            console.log(e.target.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>自定义事件：在自定义事件中表示为捕获从子组件抛出的值。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">customEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.$emit( custom-event ,  some value )</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">my-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in list&quot;</span> @<span class="attr">custom-event</span>=<span class="string">&quot;customEvent(index, $event)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">my-list</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>: &#123;</span><br><span class="line">        <span class="title function_">customEvent</span>(<span class="params">index, e</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(e) <span class="comment">//  some value</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="7-程序化事件监听器"><a href="#7-程序化事件监听器" class="headerlink" title="7.程序化事件监听器"></a><strong>7.程序化事件监听器</strong></h3><p>例如，在页面挂载时定义一个定时器，需要在页面销毁时清除定时器。这似乎不是问题。但仔细观察，this.timer 的唯一目的是能够在 beforeDestroy 中获取计时器编号，否则是无用的。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Date</span>.<span class="title function_">now</span>())</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果可能，最好只访问生命周期挂钩。这不是一个严重的问题，但可以认为是混乱。我们可以通过使用 或once 监听页面生命周期销毁来解决这个问题：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">creatInterval</span>( hello )</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">creatInterval</span>( world )</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">creatInterval</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        <span class="variable language_">this</span>.$once( <span class="attr">hook</span>:beforeDestroy , <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="built_in">clearInterval</span>(timer)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用这种方法，即使我们同时创建多个定时器，也不影响效果。这是因为它们将在页面被销毁后以编程方式自动清除。</p><h3 id="8-监听组件生命周期"><a href="#8-监听组件生命周期" class="headerlink" title="8.监听组件生命周期"></a><strong>8.监听组件生命周期</strong></h3><p>通常我们使用 $emit 监听组件生命周期，父组件接收事件进行通知。<strong>子组件</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.$emit( listenMounted )</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>父组件</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;List @listenMounted=&quot;listenMounted&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p>其实有一种简单的方法就是使用@hook 来监听组件的生命周期，而不需要在组件内部做任何改动。同样，创建、更新等也可以使用这个方法。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;List @hook:mounted=&quot;listenMounted&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure><p><strong>总结</strong>以上就是我今天跟你分享的8个关于Vue的开发技巧，希望这些小技巧对你有用。</p><blockquote><p><em>英文原文：</em></p><p><em><a href="https://levelup.gitconnected.com/8-awesome-vue-development-tips-661b7631aa47">https://levelup.gitconnected.com/8-awesome-vue-development-tips-661b7631aa47</a></em></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue2 </tag>
            
            <tag> 技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pinia持久化插件</title>
      <link href="/posts/50437.html"/>
      <url>/posts/50437.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Pinia持久化"><a href="#Pinia持久化" class="headerlink" title="Pinia持久化"></a>Pinia持久化</h2><blockquote><p><code>pinia-plugin-persist</code>插件实现<code>Pinia</code>的数据持久化</p></blockquote><h4 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a><strong>安装</strong></h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npm</span></span><br><span class="line">npm install pinia-plugin-persist</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">yarn</span></span><br><span class="line">yarn add pinia-plugin-persist</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">pnpm</span></span><br><span class="line">pnpm add pinia-plugin-persist</span><br></pre></td></tr></table></figure><p><strong><code>store/index.ts</code>配置</strong></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createPinia &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"><span class="keyword">import</span> piniaPersist <span class="keyword">from</span> <span class="string">&#x27;pinia-plugin-persist&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> pinia = <span class="title function_">createPinia</span>()</span><br><span class="line">pinia.<span class="title function_">use</span>(piniaPersist)</span><br></pre></td></tr></table></figure><p><strong><code>tsconfig.ts</code>添加配置</strong></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.ts</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;pinia-plugin-persist&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a><strong>Usage</strong></h5><p>源码即文档</p><figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">PersistStrategy</span> &#123;</span><br><span class="line">    key?: <span class="built_in">string</span>;</span><br><span class="line">    storage?: <span class="title class_">Storage</span>;</span><br><span class="line">    paths?: <span class="built_in">string</span>[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">PersistOptions</span> &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>;</span><br><span class="line">    strategies?: <span class="title class_">PersistStrategy</span>[];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">declare</span> <span class="keyword">type</span> <span class="title class_">Store</span> = <span class="title class_">PiniaPluginContext</span>[<span class="string">&#x27;store&#x27;</span>];</span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&#x27;pinia&#x27;</span> &#123;</span><br><span class="line">    <span class="keyword">interface</span> <span class="title class_">DefineStoreOptionsBase</span>&lt;S, <span class="title class_">Store</span>&gt; &#123;</span><br><span class="line">        persist?: <span class="title class_">PersistOptions</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>1. 基本使用</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&quot;StoreId&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">        <span class="attr">foo</span>: <span class="string">&quot;foo&quot;</span>,</span><br><span class="line">        <span class="attr">bar</span>: <span class="string">&quot;bar&quot;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// 开启数据缓存</span></span><br><span class="line">    <span class="attr">persist</span>: &#123;</span><br><span class="line">      <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">strategies</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">key</span>: <span class="string">&#x27;user&#x27;</span>,  <span class="comment">//自定义 Key值</span></span><br><span class="line">                <span class="attr">storage</span>: <span class="variable language_">localStorage</span>,  <span class="comment">// 选择存储方式</span></span><br><span class="line">                <span class="attr">path</span>: [<span class="string">&#x27;foo&#x27;</span>], <span class="comment">// 默认所有 state 都会进行缓存，通过 paths 指定要持久化的字段，其余的则不会进行持久化</span></span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>开启 <code>enabled</code> 之后，默认会对整个 <code>Store</code> 的 <code>state</code> 内容进行 <code>sessionStorage</code> 储存。</p><p><strong>2. 进阶用法</strong></p><p><code>strategies</code> 字段说明：</p><div class="table-container"><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>key</td><td>自定义存储的 key，默认是 store.$id</td></tr><tr><td>storage</td><td>可以指定任何 extends Storage 的实例，默认是 sessionStorage</td></tr><tr><td>paths</td><td>state 中的字段名，按组打包储存(默认所有 state 都会进行缓存，通过 paths 指定要持久化的字段，其余的则不会进行持久化)</td></tr></tbody></table></div><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&quot;YourStore&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> foo = <span class="title function_">ref</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> bar = <span class="title function_">ref</span>(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; foo, bar &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">strategies</span>: [&#123;</span><br><span class="line">        <span class="comment">// 自定义存储的 key，默认是 store.$id</span></span><br><span class="line">        <span class="attr">key</span>: <span class="string">&quot;custom storageKey&quot;</span>,</span><br><span class="line">        <span class="comment">// 可以指定任何 extends Storage 的实例，默认是 sessionStorage</span></span><br><span class="line">        <span class="attr">storage</span>: <span class="variable language_">localStorage</span>,</span><br><span class="line">        <span class="comment">// state 中的字段名，按组打包储存</span></span><br><span class="line">        <span class="attr">paths</span>: [<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><code>storage</code> 属性可以使用任何继承自 <code>Storage</code> 协议的对象，自定义存储对象也可以，如下 <code>cookiesStorage</code> 为例</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">cookiesStorage</span>: <span class="title class_">Storage</span> = &#123;</span><br><span class="line">  setItem (key, state) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;accessToken&#x27;</span>, state.<span class="property">accessToken</span>, &#123; <span class="attr">expires</span>: <span class="number">3</span> &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  getItem (key) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      <span class="attr">accessToken</span>: <span class="title class_">Cookies</span>.<span class="title function_">getJSON</span>(<span class="string">&#x27;accessToken&#x27;</span>),</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> useStore = <span class="title function_">defineStore</span>(<span class="string">&quot;YourStore&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> foo = <span class="title function_">ref</span>(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> bar = <span class="title function_">ref</span>(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> accessToken = <span class="title function_">ref</span>(<span class="string">&quot;xxx&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123; foo, bar, accessToken &#125;</span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">enabled</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">strategies</span>: [&#123;</span><br><span class="line">        <span class="attr">key</span>: <span class="string">&quot;token&quot;</span>,</span><br><span class="line">        <span class="attr">storage</span>: cookiesStorage,</span><br><span class="line">        <span class="attr">paths</span>: [<span class="string">&quot;accessToken&quot;</span>]</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="源码解读"><a href="#源码解读" class="headerlink" title="源码解读"></a>源码解读</h4><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> <span class="title class_">Store</span> = <span class="title class_">PiniaPluginContext</span>[<span class="string">&#x27;store&#x27;</span>];</span><br><span class="line"><span class="keyword">type</span> <span class="title class_">PartialState</span> = <span class="title class_">Partial</span>&lt;<span class="title class_">Store</span>[<span class="string">&#x27;$state&#x27;</span>]&gt;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">updateStorage</span> = (<span class="params">strategy: PersistStrategy, store: Store</span>) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 默认使用 sessionStorage</span></span><br><span class="line">  <span class="keyword">const</span> storage = strategy.<span class="property">storage</span> || sessionStorage</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 默认存储 key 为 store.$id</span></span><br><span class="line">  <span class="keyword">const</span> storeKey = strategy.<span class="property">key</span> || store.<span class="property">$id</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (strategy.<span class="property">paths</span>) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 遍历 paths 将对应的属性收集到 finalObj 中</span></span><br><span class="line">    <span class="keyword">const</span> partialState = strategy.<span class="property">paths</span>.<span class="title function_">reduce</span>(<span class="function">(<span class="params">finalObj, key</span>) =&gt;</span> &#123;</span><br><span class="line">      finalObj[key] = store.<span class="property">$state</span>[key]</span><br><span class="line">      <span class="keyword">return</span> finalObj</span><br><span class="line">    &#125;, &#123;&#125; <span class="keyword">as</span> <span class="title class_">PartialState</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 执行存储</span></span><br><span class="line">    storage.<span class="title function_">setItem</span>(storeKey, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(partialState))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 如果没有 paths，则按整个 store.$state 存储</span></span><br><span class="line">    storage.<span class="title function_">setItem</span>(storeKey, <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(store.<span class="property">$state</span>))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (&#123; options, store &#125;: <span class="title class_">PiniaPluginContext</span>): <span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 判断插件功能是否开启</span></span><br><span class="line">  <span class="keyword">if</span> (options.<span class="property">persist</span>?.<span class="property">enabled</span>) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 默认策略实例</span></span><br><span class="line">    <span class="keyword">const</span> <span class="attr">defaultStrat</span>: <span class="title class_">PersistStrategy</span>[] = [&#123;</span><br><span class="line">      <span class="attr">key</span>: store.<span class="property">$id</span>,</span><br><span class="line">      <span class="attr">storage</span>: sessionStorage,</span><br><span class="line">    &#125;]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> strategies = options.<span class="property">persist</span>?.<span class="property">strategies</span>?.<span class="property">length</span> ? options.<span class="property">persist</span>?.<span class="property">strategies</span> : defaultStrat</span><br><span class="line"></span><br><span class="line">    strategies.<span class="title function_">forEach</span>(<span class="function">(<span class="params">strategy</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> storage = strategy.<span class="property">storage</span> || sessionStorage</span><br><span class="line">      <span class="keyword">const</span> storeKey = strategy.<span class="property">key</span> || store.<span class="property">$id</span></span><br><span class="line">      <span class="keyword">const</span> storageResult = storage.<span class="title function_">getItem</span>(storeKey)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span> (storageResult) &#123;</span><br><span class="line">      </span><br><span class="line">        <span class="comment">// 如果 storage 中存在同步数据</span></span><br><span class="line">        store.$patch(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(storageResult))</span><br><span class="line">        <span class="title function_">updateStorage</span>(strategy, store)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    store.$subscribe(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">      <span class="comment">// 监听 state 变化，同步更新 storage</span></span><br><span class="line">      strategies.<span class="title function_">forEach</span>(<span class="function">(<span class="params">strategy</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">updateStorage</span>(strategy, store)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> pinia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3项目常用插件</title>
      <link href="/posts/21141.html"/>
      <url>/posts/21141.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Vue3项目插件"><a href="#Vue3项目插件" class="headerlink" title="Vue3项目插件"></a>Vue3项目插件</h3><blockquote><p>列举了一些 Vue项目中比较好用的插件</p></blockquote><h4 id="1、unplugin-auto-import"><a href="#1、unplugin-auto-import" class="headerlink" title="1、unplugin-auto-import"></a>1、unplugin-auto-import</h4><blockquote><p>支持<code>vue</code>, <code>vue-router</code>, <code>vue-i18n</code>, <code>@vueuse/head</code>, <code>@vueuse/core</code>等自动引入</p><p><a href="https://github.com/antfu/unplugin-auto-import">https://github.com/antfu/unplugin-auto-import</a></p><p><a href="https://juejin.cn/post/7162052830054842399">https://juejin.cn/post/7162052830054842399</a></p></blockquote><h6 id="一、效果"><a href="#一、效果" class="headerlink" title="一、效果"></a>一、效果</h6><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 引入前</span></span><br><span class="line"><span class="keyword">import</span> &#123; ref, computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> doubled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入后</span></span><br><span class="line"><span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">const</span> doubled = <span class="title function_">computed</span>(<span class="function">() =&gt;</span> count.<span class="property">value</span> * <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入前</span></span><br><span class="line"><span class="keyword">import</span> &#123; useState &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; count &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入后</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">Counter</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> [count, setCount] = <span class="title function_">useState</span>(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123; count &#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i -D unplugin-auto-import</span><br></pre></td></tr></table></figure><h6 id="三、vite-config-ts配置"><a href="#三、vite-config-ts配置" class="headerlink" title="三、vite.config.ts配置"></a>三、vite.config.ts配置</h6><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">AutoImport</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-auto-import/vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">AutoImport</span>(&#123;</span><br><span class="line">      <span class="attr">imports</span>: [<span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;vue-router&#x27;</span>, <span class="string">&#x27;vue-i18n&#x27;</span>, <span class="string">&#x27;@vueuse/head&#x27;</span>, <span class="string">&#x27;@vueuse/core&#x27;</span>],</span><br><span class="line">      <span class="comment">// auto-import.d.ts生成的位置(默认是在根目录) 会在</span></span><br><span class="line">      <span class="attr">dts</span>: <span class="string">&#x27;src/type/auto-import.d.ts&#x27;</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="2、unplugin-vue-components"><a href="#2、unplugin-vue-components" class="headerlink" title="2、unplugin-vue-components"></a>2、unplugin-vue-components</h4><blockquote><p><a href="https://github.com/antfu/unplugin-vue-components">https://github.com/antfu/unplugin-vue-components</a></p></blockquote><h6 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i unplugin-vue-components -D</span><br></pre></td></tr></table></figure><h6 id="二、vite-config-ts配置"><a href="#二、vite-config-ts配置" class="headerlink" title="二、vite.config.ts配置"></a>二、vite.config.ts配置</h6><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="title class_">Components</span>(&#123; </span><br><span class="line">      <span class="comment">/* options */</span> </span><br><span class="line">      <span class="comment">// 自动引入文件的位置</span></span><br><span class="line">      <span class="attr">dts</span>: <span class="string">&#x27;src/type/components.d.ts&#x27;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h6 id="三、效果"><a href="#三、效果" class="headerlink" title="三、效果"></a>三、效果</h6><p>It will automatically turn this</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Hello Vue 3.0 + Vite&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>into this</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;HelloWorld msg=&quot;Hello Vue 3.0 + Vite&quot; /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloWorld from &#x27;./src/components/HelloWorld.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#x27;App&#x27;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloWorld</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h6 id="四、TS"><a href="#四、TS" class="headerlink" title="四、TS"></a>四、TS</h6><p>为了获得对自动导入组件的TypeScript支持，Vue 3有一个PR扩展了全局组件的接口。目前，Volar已经支持这种用法。如果您使用的是Volar，您可以如下更改配置以获得支持。</p><figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Components</span>(&#123;</span><br><span class="line">  <span class="attr">dts</span>: <span class="literal">true</span>, <span class="comment">// enabled by default if `typescript` is installed</span></span><br><span class="line">  <span class="comment">// dts: &#x27;src/type/components.d.ts&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在<code>include</code>下将<code>components.d.ts</code>添加到<code>tsconfig.json</code>中</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;include&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;src/**/*.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.d.ts&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.tsx&quot;</span><span class="punctuation">,</span> <span class="string">&quot;src/**/*.vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="五、支持从UI库导入"><a href="#五、支持从UI库导入" class="headerlink" title="五、支持从UI库导入"></a>五、支持从UI库导入</h6><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/img/image-20230217150510906.png" alt="image-20230217150510906"  /></p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Components</span> <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  <span class="title class_">AntDesignVueResolver</span>,</span><br><span class="line">  <span class="title class_">ElementPlusResolver</span>,</span><br><span class="line">  <span class="title class_">VantResolver</span>,</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-components/resolvers&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// your plugin installation</span></span><br><span class="line"><span class="title class_">Components</span>(&#123;</span><br><span class="line">  <span class="attr">resolvers</span>: [</span><br><span class="line">    <span class="title class_">AntDesignVueResolver</span>(),</span><br><span class="line">    <span class="title class_">ElementPlusResolver</span>(),</span><br><span class="line">    <span class="title class_">VantResolver</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>可以去antfu大佬的插件链接查看更多的配置</p></blockquote><h4 id="3、unplugin-vue-define-options"><a href="#3、unplugin-vue-define-options" class="headerlink" title="3、unplugin-vue-define-options"></a>3、unplugin-vue-define-options</h4><blockquote><p>Vue3 中写调试代码需要name</p><p><a href="https://vue-macros.sxzz.moe/macros/define-options.html">https://vue-macros.sxzz.moe/macros/define-options.html</a></p></blockquote><h6 id="一、安装-1"><a href="#一、安装-1" class="headerlink" title="一、安装"></a>一、安装</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install unplugin-vue-define-options -D</span><br></pre></td></tr></table></figure><h6 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h6><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="comment">//vite.config.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">&#x27;@vitejs/plugin-vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> defineOptions <span class="keyword">from</span> <span class="string">&#x27;unplugin-vue-define-options/dist/vite&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">defineOptions</span>()],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="三、TypeScript支持"><a href="#三、TypeScript支持" class="headerlink" title="三、TypeScript支持"></a>三、TypeScript支持</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// tsconfig.json</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;compilerOptions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    <span class="attr">&quot;types&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;unplugin-vue-define-options/macros-global&quot;</span> <span class="comment">/* ... */</span><span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h6 id="四、使用"><a href="#四、使用" class="headerlink" title="四、使用"></a>四、使用</h6><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup&gt;</span><br><span class="line">  defineOptions(&#123;</span><br><span class="line">    name: &#x27;YourName&#x27;,</span><br><span class="line">  &#125;);</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="4、vite-plugin-vue-setup-extend"><a href="#4、vite-plugin-vue-setup-extend" class="headerlink" title="4、vite-plugin-vue-setup-extend"></a>4、vite-plugin-vue-setup-extend</h4><blockquote><p>vue3 中另外一种name定义方式，直接写在script标签上</p></blockquote><p><a href="https://github.com/vbenjs/vite-plugin-vue-setup-extend">https://github.com/vbenjs/vite-plugin-vue-setup-extend</a></p><p>一、安装</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm i vite-plugin-vue-setup-extend -D</span><br></pre></td></tr></table></figure><p>二、配置 vite.config.ts中</p><figure class="highlight ts"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> vueSetupExtend <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-vue-setup-extend&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">vue</span>(), <span class="title function_">vueSetupExtend</span>()],</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>三、使用</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script lang=&quot;ts&quot; setup name=&quot;App&quot;&gt;</span><br><span class="line">  // script 里面必须有东西 哪怕是一个注释都行</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h4 id="5、pinia-plugin-persist"><a href="#5、pinia-plugin-persist" class="headerlink" title="5、pinia-plugin-persist"></a>5、pinia-plugin-persist</h4><blockquote><p>Pinia持久化插件</p><p>详情看: [<a href="https://github.com/pan52yu/MyNote/blob/main/article/Vue3%E5%AD%A6%E4%B9%A0/Pinia.md](">https://github.com/pan52yu/MyNote/blob/main/article/Vue3%E5%AD%A6%E4%B9%A0/Pinia.md](</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mac下载和破解WebStorm</title>
      <link href="/posts/6134.html"/>
      <url>/posts/6134.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="如何下载和破解-WebStorm"><a href="#如何下载和破解-WebStorm" class="headerlink" title="如何下载和破解 WebStorm"></a>如何下载和破解 WebStorm</h1><p>WebStorm 是一款非常优秀的前端开发工具，但它是收费软件。在本文中，我们将介绍如何下载 WebStorm 并破解它，以便您可以免费使用它。</p><h2 id="下载-WebStorm"><a href="#下载-WebStorm" class="headerlink" title="下载 WebStorm"></a>下载 WebStorm</h2><p>首先，您需要从 JetBrains 官网上下载 WebStorm。请访问以下链接以获取下载页面：<a href="https://www.jetbrains.com/zh-cn/webstorm/">https://www.jetbrains.com/zh-cn/webstorm/</a></p><p>下载完毕后，您可以安装 WebStorm。在安装完成后，您可以忽略它，因为我们需要下载补丁并执行破解。</p><h2 id="下载补丁并破解-WebStorm"><a href="#下载补丁并破解-WebStorm" class="headerlink" title="下载补丁并破解 WebStorm"></a>下载补丁并破解 WebStorm</h2><p>我们可以通过以下步骤来下载补丁并破解 WebStorm：</p><ol><li>下载补丁：请访问以下链接以下载补丁：<a href="https://www.123pan.com/s/EHHDVv-mImMv">https://www.123pan.com/s/EHHDVv-mImMv</a></li><li>解压补丁：下载完毕后，您需要解压补丁文件。</li><li>执行破解脚本：接下来，您需要打开终端并进入 <code>/jetbra/scripts</code> 文件夹。在该文件夹中，您需要执行 <code>install.sh</code> 脚本。您可以使用以下命令执行脚本：</li></ol><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo bash install.sh</span><br></pre></td></tr></table></figure><p>执行脚本时，可能会出现一个错误，错误信息可能如下所示：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sed: RE error: illegal byte sequence</span><br></pre></td></tr></table></figure><p>如果出现此错误，请在执行上面的命令之前执行以下命令：</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">export LC_COLLATE=&#x27;C&#x27;</span><br><span class="line">export LC_CTYPE=&#x27;C&#x27;</span><br></pre></td></tr></table></figure><p>执行成功后，您将看到 “done” 提示。此时，您需要重新启动您的计算机。</p><ol><li>激活 WebStorm：当您的计算机重新启动后，打开 WebStorm。接下来，您需要从以下链接中获取激活码：<a href="https://ipfs.io/ipfs/bafybeiatyghkzrrtodzt3stm652rkrjxndg4hq2ublfdmifk7plg5k5brq/">https://ipfs.io/ipfs/bafybeiatyghkzrrtodzt3stm652rkrjxndg4hq2ublfdmifk7plg5k5brq/</a></li></ol><p>在该页面上，找到 WebStorm 并点击它。这将自动复制激活码。接下来，您需要将激活码粘贴到 WebStorm 中的 “Activation code” 栏中。最后，点击 “Activate” 按钮以激活 WebStorm。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>请注意，您破解后的 WebStorm 是不受支持的软件版本。如果您有任何问题，JetBrains 不会为您提供支持。此外，如果您的 WebStorm 重复启动以获取激活状态，它可能会停止工作。如果您遇到此问题，请卸载并重新安装 WebStorm。</p><p>此外，如果您删除了解压后的补丁包，您的 WebStorm 破解将无效。因此，请不要删除补丁文件夹！！！</p>]]></content>
      
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>for...in 和 for...of有什么区别</title>
      <link href="/posts/22447.html"/>
      <url>/posts/22447.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="for…in-和-for…of有什么区别"><a href="#for…in-和-for…of有什么区别" class="headerlink" title="for…in 和 for…of有什么区别"></a>for…in 和 for…of有什么区别</h1><h2 id="最明显的区别："><a href="#最明显的区别：" class="headerlink" title="最明显的区别："></a>最明显的区别：</h2><ul><li>for…in 遍历得到 key</li><li>for…of 遍历得到 value</li></ul><blockquote><p>代码演示：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">in</span> arr) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for...in&#x27;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;====我是分隔符====&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arr) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for...of&#x27;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>演示结果：</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4e9eb288960643709a740f331d543cc0~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image.png"></p><h2 id="二者适用于不同的数据类型"><a href="#二者适用于不同的数据类型" class="headerlink" title="二者适用于不同的数据类型"></a>二者适用于不同的数据类型</h2><ul><li>遍历对象：for…in可以，for…of 不可以</li><li>遍历Map Set: for..of 可以，for..in 不可以</li><li>遍历 generator：for…of 可以，for…in 不可以</li></ul><p>真的是这样吗？我们就来亲身测试一下！</p><p>顺便带着思考一下这个问题：什么时候用 for…of 什么时候用 for…in呢？</p><h3 id="遍历对象时："><a href="#遍历对象时：" class="headerlink" title="遍历对象时："></a>遍历对象时：</h3><blockquote><p>演示：</p></blockquote><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历对象</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">city</span>: <span class="string">&#x27;beijing&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">in</span> obj) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for...in&#x27;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> obj) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for...of&#x27;</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>演示结果：</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/3b99a3b79bbd4186b5e66077f707014d~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image.png"></p><p>我们可以看见for..in 正常进行了遍历。</p><p>但是 for…of 出现了报错，提示我们 obj 不是一个可以遍历的数据</p><h3 id="遍历-set-时"><a href="#遍历-set-时" class="headerlink" title="遍历 set 时"></a>遍历 set 时</h3><blockquote><p>演示：</p></blockquote><figure class="highlight vbnet"><table><tr><td class="code"><pre><span class="line">// 遍历 <span class="keyword">Set</span> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">set</span> = <span class="built_in">new</span> <span class="keyword">Set</span>([<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>])</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> n <span class="keyword">in</span> <span class="keyword">set</span>) &#123;</span><br><span class="line">  console.log(<span class="comment">&#x27;for...in&#x27;, n)</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> n <span class="keyword">of</span> <span class="keyword">set</span>) &#123;</span><br><span class="line">  console.log(<span class="comment">&#x27;for...of&#x27;, n)</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><blockquote><p>演示结果：</p></blockquote><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/b4a0764752db416c89fc998fcb26b012~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image.png"></p><p>我们可以看见for..in 值是 undefined。</p><p>但是 for…of 正常进行了遍历。</p><h3 id="遍历-map-时"><a href="#遍历-map-时" class="headerlink" title="遍历 map 时"></a>遍历 map 时</h3><blockquote><p>演示：</p></blockquote><figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历 Map </span></span><br><span class="line"><span class="type">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;x&#x27;</span>, <span class="number">10</span>],</span><br><span class="line">  [<span class="string">&#x27;x1&#x27;</span>, <span class="number">110</span>],</span><br><span class="line">  [<span class="string">&#x27;x2&#x27;</span>, <span class="number">210</span>],</span><br><span class="line">])</span><br><span class="line"><span class="keyword">for</span>(let m in map) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;for...in&#x27;</span>, m)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(let m of map) &#123;</span><br><span class="line">  console.<span class="built_in">log</span>(<span class="string">&#x27;for...of&#x27;</span>, m)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>演示结果：</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/727e0bcf548c4576bfc113d59dc99cdd~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image.png"></p><p>我们可以看见for..in 值是 undefined。</p><p>但是 for…of 正常进行了遍历。</p><h3 id="遍历-generator"><a href="#遍历-generator" class="headerlink" title="遍历 generator"></a>遍历 generator</h3><h1 id="gt-代码演示："><a href="#gt-代码演示：" class="headerlink" title="&gt; 代码演示："></a>&gt; 代码演示：</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 遍历 generator</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">yield</span> <span class="number">10</span></span><br><span class="line"><span class="keyword">yield</span> <span class="number">20</span></span><br><span class="line"><span class="keyword">yield</span> <span class="number">30</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> g <span class="keyword">in</span> foo) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for...in&#x27;</span>, g)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> g <span class="keyword">of</span> foo) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;for...of&#x27;</span>, g)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>演示结果：</p></blockquote><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/aa203c1577c94e2085ab73631ea7bc84~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image.png"></p><p>我们可以看见for..in 值是 undefined。</p><p>但是 for…of 正常进行了遍历。</p><h3 id="二者在什么情况下可以使用呢？"><a href="#二者在什么情况下可以使用呢？" class="headerlink" title="二者在什么情况下可以使用呢？"></a>二者在什么情况下可以使用呢？</h3><p>到底那些数据可以用 for…in 那些可以用 for…of ?</p><p>在提出这个问题的时候，我们需要先知道：<strong>for…in</strong> 和 <strong>for…of</strong> 可以用在哪？</p><h4 id="for…in"><a href="#for…in" class="headerlink" title="for…in"></a><strong>for…in</strong></h4><p>可以用在<strong>可枚举</strong>的数据，如：</p><ul><li>对象</li><li>数组</li><li>字符串</li></ul><h5 id="什么是可枚举数据呢？"><a href="#什么是可枚举数据呢？" class="headerlink" title="什么是可枚举数据呢？"></a>什么是可枚举数据呢？</h5><p>举个例子来说</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">const <span class="attr">obj</span> = &#123; x: <span class="number">100</span> &#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>我们使用 <code>Object.getOwnPropertyDescriptors</code> 方法获取指定对象所有的自有属性的属性描述符。</p><p><img src="https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/bab94bd2e4484f90b4eddc1047ab8aa5~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image.png"></p><p>这时候发现他的每一个属性中 enumerable 都是 true，这时候他就是可枚举的。</p><blockquote><p>如果一个属性的<strong>enumerable为false</strong>，下面三个操作不会取到该属性。</p><p>for..in循环</p><p>Object.keys方法</p><p>JSON.stringify方法</p></blockquote><p>所以一般情况下 对象、数组、字符串都是可枚举的</p><h4 id="for…of"><a href="#for…of" class="headerlink" title="for…of"></a><strong>for…of</strong></h4><p><strong>for…of</strong>用于<strong>可迭代</strong>的数据，如：</p><ul><li>数组</li><li>字符串</li><li>Map</li><li>Set</li></ul><h5 id="什么是可迭代数据呢？"><a href="#什么是可迭代数据呢？" class="headerlink" title="什么是可迭代数据呢？"></a>什么是<strong>可迭代</strong>数据呢？</h5><p>举个例子来说</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">const <span class="attr">arr</span> = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>]</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p>数组中有个 <code>Symbol.iterator</code>的属性：</p><ul><li>1.只要一个数据已经实现了Iterator接口, 那么这个数据就有一个叫做<code>[Symbol.iterator]</code>的属性</li><li>2.<code>[Symbol.iterator]</code>的属性会返回一个函数</li><li>3.<code>[Symbol.iterator]</code>返回的函数执行之后会返回一个对象</li><li>4.<code>[Symbol.iterator]</code>函数返回的对象中又一个名称叫做next的方法</li><li>5.next方法每次执行都会返回一个对象<code>&#123;value: 10, done: false&#125;</code></li><li>6.这个对象中存储了当前取出的数据和是否取完了的标记</li></ul><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/68120cc13a194f3bb18219322e56d7bb~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="image.png"></p><p>就类似设计模式中的迭代器模式：</p><p>不断有next、next去调用：</p><ul><li>A next() =&gt; B</li><li>B next() =&gt; C</li><li>如此 如此</li></ul><p>了解了上面的情况之后，我们也可以理解什么时候用 for…of 什么时候用 for…in？</p><ul><li><strong>for…in</strong>可以用在<strong>可枚举</strong>的数据</li><li><strong>for…of</strong>用于<strong>可迭代</strong>的数据</li></ul><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://juejin.cn/post/7104444342684614664">for...in 和 for...of有什么区别</a></div>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode插件推荐</title>
      <link href="/posts/12458.html"/>
      <url>/posts/12458.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="一、基础的"><a href="#一、基础的" class="headerlink" title="一、基础的"></a>一、基础的</h2><h3 id="1、Auto-Rename-Tag⭐"><a href="#1、Auto-Rename-Tag⭐" class="headerlink" title="1、Auto Rename Tag⭐"></a>1、Auto Rename Tag⭐</h3><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230104135509199.png?x-oss-process=style/huyu" alt="image-20230104135509199"></p><blockquote><p><code>修改标签会同步修改</code></p></blockquote><h3 id="2、Auto-Import-ES6-TS-JSX-TSX"><a href="#2、Auto-Import-ES6-TS-JSX-TSX" class="headerlink" title="2、Auto Import - ES6, TS, JSX, TSX"></a>2、Auto Import - ES6, TS, JSX, TSX</h3><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230104135612575.png?x-oss-process=style/huyu" alt="image-20230104135612575"></p><blockquote><p>自动查找、解析并为所有可用导入提供代码操作和代码完成。适用于 JavaScript (ES6) 和 TypeScript (TS)</p></blockquote><h3 id="3、Code-Runner⭐"><a href="#3、Code-Runner⭐" class="headerlink" title="3、Code Runner⭐"></a>3、Code Runner⭐</h3><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/20230224171602.png?x-oss-process=style/huyu" alt="image-20230104135642398"></p><blockquote><p>快速运行 <code>调试js</code></p></blockquote><h3 id="4、CSS-Peek"><a href="#4、CSS-Peek" class="headerlink" title="4、CSS Peek"></a>4、CSS Peek</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/working.gif" alt="working"></p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/working.gif" alt=""></p><blockquote><p>跳转对应 <code>css</code></p></blockquote><h3 id="5、DotENV"><a href="#5、DotENV" class="headerlink" title="5、DotENV"></a>5、DotENV</h3><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230104135834335.png?x-oss-process=style/huyu" alt="image-20230104135834335"></p><blockquote><p><code>高亮ENV文件</code></p></blockquote><h3 id="6、Error-Lens"><a href="#6、Error-Lens" class="headerlink" title="6、Error Lens"></a>6、Error Lens</h3><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/20230224171643.png?x-oss-process=style/huyu" alt="image-20230104135908882"></p><blockquote><p><code>显示错误</code></p></blockquote><h3 id="7、ESLint"><a href="#7、ESLint" class="headerlink" title="7、ESLint"></a>7、ESLint</h3><h3 id="8、GitLens-—-Git-supercharged⭐"><a href="#8、GitLens-—-Git-supercharged⭐" class="headerlink" title="8、GitLens — Git supercharged⭐"></a>8、GitLens — Git supercharged⭐</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104135949372.png" alt="image-20230104135949372"></p><blockquote><p>在每行代码查看代码是谁修改的</p></blockquote><h3 id="9、JavaScript-ES6-code-snippets"><a href="#9、JavaScript-ES6-code-snippets" class="headerlink" title="9、JavaScript (ES6) code snippets"></a>9、JavaScript (ES6) code snippets</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140007707.png" alt="image-20230104140007707"></p><blockquote><p><code>ES6代码块</code></p></blockquote><h3 id="10、jsdoc"><a href="#10、jsdoc" class="headerlink" title="10、jsdoc"></a>10、jsdoc</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140038243.png" alt="image-20230104140038243"></p><blockquote><p><code>快速生成函数注释</code></p></blockquote><h3 id="11、npm-Intellisense"><a href="#11、npm-Intellisense" class="headerlink" title="11、npm Intellisense"></a>11、npm Intellisense</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140135028.png" alt="image-20230104140135028"></p><blockquote><p>智能npm引入 &gt;&gt;&gt; 没啥用</p></blockquote><h3 id="12、open-in-browser"><a href="#12、open-in-browser" class="headerlink" title="12、open in browser"></a>12、open in browser</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140224748.png" alt="image-20230104140224748"></p><blockquote><p>CTRL + B 在<code>浏览器打开</code></p></blockquote><h3 id="13、Path-Intellisense⭐"><a href="#13、Path-Intellisense⭐" class="headerlink" title="13、Path Intellisense⭐"></a>13、Path Intellisense⭐</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140257877.png" alt="image-20230104140257877"></p><blockquote><p>智能<code>路径</code>引入</p></blockquote><h3 id="14、Prettier-Code-formatter"><a href="#14、Prettier-Code-formatter" class="headerlink" title="14、Prettier - Code formatter"></a>14、Prettier - Code formatter</h3><h3 id="15、Smart-Click"><a href="#15、Smart-Click" class="headerlink" title="15、Smart Click"></a>15、Smart Click</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140336602.png" alt="image-20230104140336602"></p><blockquote><p><code>双击标签，选中标签包裹的内容</code></p></blockquote><h3 id="16、Tabnine-AI⭐⭐"><a href="#16、Tabnine-AI⭐⭐" class="headerlink" title="16、Tabnine AI⭐⭐"></a>16、Tabnine AI⭐⭐</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140439218.png" alt="image-20230104140439218"></p><blockquote><p><code>代码提示</code></p></blockquote><h3 id="17、Turbo-Console-Log"><a href="#17、Turbo-Console-Log" class="headerlink" title="17、Turbo Console Log"></a>17、Turbo Console Log</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140506060.png" alt="image-20230104140506060"></p><blockquote><p>快速高效的<code>Console Log</code></p></blockquote><h3 id="18、vscode-extension-for-ECharts"><a href="#18、vscode-extension-for-ECharts" class="headerlink" title="18、vscode extension for ECharts"></a>18、vscode extension for ECharts</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140608693.png" alt="image-20230104140608693"></p><blockquote><p>智能提示 <code>echarts</code>的 options</p></blockquote><h3 id="19、vscode-element-helper"><a href="#19、vscode-element-helper" class="headerlink" title="19、vscode-element-helper"></a>19、vscode-element-helper</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140635575.png" alt="image-20230104140635575"></p><blockquote><p>智能提示<code>element-ui</code></p></blockquote><h3 id="20、path-alias"><a href="#20、path-alias" class="headerlink" title="20、path-alias"></a>20、path-alias</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140717079.png" alt="image-20230104140717079"></p><blockquote><p>一个可以解决路径别名提示，跳转的vscode插件 &gt;&gt;&gt; 我测试的时候没啥用</p></blockquote><h3 id="21、i18n-Ally⭐"><a href="#21、i18n-Ally⭐" class="headerlink" title="21、i18n Ally⭐"></a>21、i18n Ally⭐</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230105102945850.png" alt="image-20230105102945850"></p><blockquote><p>i18n插件，实时预览，非常的好用,</p><p>记得在settings.json中配置下面的代码</p></blockquote><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;i18n-ally.localesPaths&quot;</span><span class="punctuation">:</span> <span class="string">&quot;locales&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;i18n-ally.keystyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nested&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;i18n-ally.sortKeys&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;i18n-ally.namespace&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;i18n-ally.enabledParsers&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;yaml&quot;</span><span class="punctuation">,</span> <span class="string">&quot;js&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;i18n-ally.sourceLanguage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;en&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;i18n-ally.displayLanguage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;zh-CN&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;i18n-ally.enabledFrameworks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;vue&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="22、Tailwind-CSS-IntelliSense"><a href="#22、Tailwind-CSS-IntelliSense" class="headerlink" title="22、Tailwind CSS IntelliSense"></a>22、Tailwind CSS IntelliSense</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230105145048207.png" alt="下载Tailwind CSS"></p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230105145216511.png" alt="Tailwind CSS效果"></p><blockquote><p>智能提示 <code>Tailwind CSS</code>语法</p></blockquote><h3 id="23、vue-helper"><a href="#23、vue-helper" class="headerlink" title="23、vue-helper"></a>23、vue-helper</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230107085841024.png" alt="image-20230107085841024"></p><blockquote><p>Vue2 组件跳转源码 包括 Element-UI 和 vux 和 iView，也可以比如输入el-table，可以生成一个骨架</p></blockquote><h3 id="24、JSON-to-TS"><a href="#24、JSON-to-TS" class="headerlink" title="24、JSON to TS"></a>24、JSON to TS</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230107144600771.png" alt="image-20230107144600771"></p><blockquote><p>Json数据一键转Ts</p></blockquote><h2 id="二、Vue相关的"><a href="#二、Vue相关的" class="headerlink" title="二、Vue相关的"></a>二、Vue相关的</h2><h3 id="1、Vue-3-Snippets"><a href="#1、Vue-3-Snippets" class="headerlink" title="1、Vue 3 Snippets"></a>1、Vue 3 Snippets</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140836503.png" alt="image-20230104140836503"></p><blockquote><p>这个插件基于最新的 Vue 2 及 Vue 3 的 API 添加了 Code Snippets（代码片段）。</p></blockquote><h3 id="2、Vue-VSCode-Snippets"><a href="#2、Vue-VSCode-Snippets" class="headerlink" title="2、Vue VSCode Snippets"></a>2、Vue VSCode Snippets</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140944234.png" alt="image-20230104140944234"></p><blockquote><p>也是一个vue的代码片段</p></blockquote><h3 id="3、vue-component"><a href="#3、vue-component" class="headerlink" title="3、vue-component"></a>3、vue-component</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104141005999.png" alt="image-20230104141005999"></p><blockquote><p>智能引入自己写的组件 + 跳转组件 &gt;&gt;&gt; 详情去看官方说明</p></blockquote><h3 id="4、Vuter⭐⭐⭐"><a href="#4、Vuter⭐⭐⭐" class="headerlink" title="4、Vuter⭐⭐⭐"></a>4、Vuter⭐⭐⭐</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104141142220.png" alt="image-20230104141142220"></p><blockquote><p><strong>vue2项目必开插件</strong></p><p><strong>注意！！！写 Vue2 项目使用<code>Vuter</code>, 写 Vue3 项目 用 <code>Volar</code>, 两个插件不可以共同使用，否则会冲突报错！！！</strong></p></blockquote><h3 id="5、Vue-Language-Features-Volar-⭐⭐⭐"><a href="#5、Vue-Language-Features-Volar-⭐⭐⭐" class="headerlink" title="5、Vue Language Features (Volar)⭐⭐⭐"></a>5、Vue Language Features (Volar)⭐⭐⭐</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104141249104.png" alt="image-20230104141249104"></p><blockquote><p><strong>vue3项目必开插件</strong></p></blockquote><h3 id="6、TypeScript-Vue-Plugin-Volar"><a href="#6、TypeScript-Vue-Plugin-Volar" class="headerlink" title="6、TypeScript Vue Plugin (Volar)"></a>6、TypeScript Vue Plugin (Volar)</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104141445500.png" alt="image-20230104141445500"></p><blockquote><p>也是Vue3项目使用的插件，具体啥功能我也没去看</p></blockquote><h2 id="三、美化"><a href="#三、美化" class="headerlink" title="三、美化"></a>三、美化</h2><h3 id="1、Material-Icon-Theme⭐"><a href="#1、Material-Icon-Theme⭐" class="headerlink" title="1、Material Icon Theme⭐"></a>1、Material Icon Theme⭐</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140115548.png" alt="image-20230104140115548"></p><blockquote><p>图标</p></blockquote><h3 id="2、Vitesse-Theme⭐⭐⭐"><a href="#2、Vitesse-Theme⭐⭐⭐" class="headerlink" title="2、Vitesse Theme⭐⭐⭐"></a>2、Vitesse Theme⭐⭐⭐</h3><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20230104140554217.png" alt="image-20230104140554217"></p><blockquote><p>主题 &gt;&gt;&gt; 推荐使用 <code>Vitesse Dark Soft</code></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>外挂标签</title>
      <link href="/posts/34759.html"/>
      <url>/posts/34759.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://niaobulashi.com/2021/05/17/2021-05-17-butterfly-tag-plugins-plus/#%E4%B8%8A%E6%A0%87%E6%A0%87%E7%AD%BE-tip">基于 Butterfly 的外挂标签引入</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.cnblogs.com/niaobulashi/p/16085666.html">基于 Butterfly 的外挂标签引入源码版</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://akilar.top/posts/615e2dec/#%E5%BC%95%E7%94%A8-note">Tag Plugins Plus | Akilarの糖果屋</a></div><h2 id="行内文本样式-text"><a href="#行内文本样式-text" class="headerlink" title="行内文本样式 text"></a>行内文本样式 text</h2><ol><li>带 <u>下划线</u> 的文本</li><li>带 <emp>着重号</emp> 的文本</li><li>带 <wavy>波浪线</wavy> 的文本</li><li>带 <del>删除线</del> 的文本</li><li>键盘样式的文本 <kbd>command</kbd> + <kbd>D</kbd></li><li>密码样式的文本：<psw>这里没有验证码</psw></li></ol><h2 id="行内文本-span"><a href="#行内文本-span" class="headerlink" title="行内文本 span"></a>行内文本 span</h2><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<span class='p red'>红色</span><span class='p yellow'>黄色</span><span class='p green'>绿色</span><span class='p cyan'>青色</span><span class='p blue'>蓝色</span><span class='p gray'>灰色</span></li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<span class='p center logo large'>Volantis</span><span class='p center small'>A Wonderful Theme for Hexo</span></li></ul><h2 id="段落文本-p"><a href="#段落文本-p" class="headerlink" title="段落文本 p"></a>段落文本 p</h2><ul><li>彩色文字<br>在一段话中方便插入各种颜色的标签，包括：<p class='p red'>红色</p><p class='p yellow'>黄色</p><p class='p green'>绿色</p><p class='p cyan'>青色</p><p class='p blue'>蓝色</p><p class='p gray'>灰色</p></li><li>超大号文字<br>文档「开始」页面中的标题部分就是超大号文字。<p class='p center logo large'>Volantis</p><p class='p center small'>A Wonderful Theme for Hexo</p></li></ul><h2 id="上标标签-tip"><a href="#上标标签-tip" class="headerlink" title="上标标签 tip"></a>上标标签 tip</h2><div class="tip "><p>默认情况</p></div><div class="tip success"><p>success</p></div><div class="tip error"><p>error</p></div><div class="tip warning"><p>warning</p></div><div class="tip bolt"><p>bolt</p></div><div class="tip ban"><p>ban</p></div><div class="tip home"><p>home</p></div><div class="tip sync"><p>sync</p></div><div class="tip cogs"><p>cogs</p></div><div class="tip key"><p>key</p></div><div class="tip bell"><p>bell</p></div><div class="tip fa-atom"><p>自定义font awesome图标</p></div><h2 id="单张图片-image"><a href="#单张图片-image" class="headerlink" title="单张图片 image"></a>单张图片 image</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% image 链接, width=宽度（可选）, height=高度（可选）, alt=描述（可选）, bg=占位颜色（可选） %&#125;</span><br></pre></td></tr></table></figure><div class="img-wrap"><div class="img-bg"><img class="img" src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/1292433.webp?x-oss-process=style/huyu"/></div></div><h2 id="分栏-tab"><a href="#分栏-tab" class="headerlink" title="分栏 tab"></a>分栏 tab</h2><div class="tabs" id="test1"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test1-1">test1 1</button></li><li class="tab"><button type="button" data-href="#test1-2">test1 2</button></li><li class="tab"><button type="button" data-href="#test1-3">test1 3</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test1-1"><p><strong>This is Tab 1.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-2"><p><strong>This is Tab 2.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test1-3"><p><strong>This is Tab 3.</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><div class="tabs" id="test4"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test4-1">第一个Tab</button></li><li class="tab"><button type="button" data-href="#test4-2"><i class="fab fa-apple-pay" style="text-align: center;"></i></button></li><li class="tab"><button type="button" data-href="#test4-3"><i class="fas fa-bomb"></i>炸弹</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test4-1"><p><strong>tab名字为第一个Tab</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-2"><p><strong>只有图标 没有Tab名字</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test4-3"><p><strong>名字+icon</strong></p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><h2 id="动态标签-animation"><a href="#动态标签-animation" class="headerlink" title="动态标签 animation"></a>动态标签 animation</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">On DOM load（当页面加载时显示动画）</span><br><span class="line">&#123;% tip warning faa-horizontal animated %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">调整动画速度</span><br><span class="line">&#123;% tip warning faa-horizontal animated faa-fast %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated faa-slow %&#125;ban&#123;% endtip %&#125;</span><br><span class="line">On hover（当鼠标悬停时显示动画）</span><br><span class="line">&#123;% tip warning faa-horizontal animated-hover %&#125;warning&#123;% endtip %&#125;</span><br><span class="line">&#123;% tip ban faa-flash animated-hover %&#125;ban&#123;% endtip %&#125;</span><br></pre></td></tr></table></figure><h2 id="链接卡片-link"><a href="#链接卡片-link" class="headerlink" title="链接卡片 link"></a>链接卡片 link</h2><div class="tag link"><a class="link-card" title="鸟不拉诗" href="https://niaobulashi.com/"><div class="left"><img src="https://niaobulashi.com/favicon.ico"/></div><div class="right"><p class="text">鸟不拉诗</p><p class="url">https://niaobulashi.com/</p></div></a></div><h2 id="引用文献"><a href="#引用文献" class="headerlink" title="引用文献"></a>引用文献</h2><p>Akilarの糖果屋(akilar.top)是一个私人性质的博客<span class="hidden-anchor" id="referto_[1]"></span><sup class="reference"><a href="#referfrom_[1]">[1]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Akilarの糖果屋群聊简介</span><span class="reference-title">参考资料</span></span></span>，从各类教程至生活点滴，无话不谈。建群的目的是提供一个闲聊的场所。博客采用Hexo框架<span class="hidden-anchor" id="referto_[2]"></span><sup class="reference"><a href="#referfrom_[2]">[2]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Hexo中文文档</span><span class="reference-title">参考资料</span></span></span>，Butterfly主题<span class="hidden-anchor" id="referto_[3]"></span><sup class="reference"><a href="#referfrom_[3]">[3]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档(一) 快速开始</span><span class="reference-title">参考资料</span></span></span></p><p>本项目参考了Volantis<span class="hidden-anchor" id="referto_[4]"></span><sup class="reference"><a href="#referfrom_[4]">[4]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">hexo-theme-volantis 标签插件</span><span class="reference-title">参考资料</span></span></span>的标签样式。引入<code>[tag].js</code>，并针对<code>butterfly</code>主题修改了相应的<code>[tag].styl</code>。在此鸣谢<code>Volantis</code>主题众开发者。<br>主要参考内容包括各个volantis的内置标签插件文档<span class="hidden-anchor" id="referto_[5]"></span><sup class="reference"><a href="#referfrom_[5]">[5]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Volantis文档:内置标签插件</span><span class="reference-title">参考资料</span></span></span><br>Butterfly主题的各个衍生魔改<span class="hidden-anchor" id="referto_[6]"></span><sup class="reference"><a href="#referfrom_[6]">[6]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">Butterfly 安装文档:标签外挂（Tag Plugins</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[7]"></span><sup class="reference"><a href="#referfrom_[7]">[7]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小弋の生活馆全样式预览</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[8]"></span><sup class="reference"><a href="#referfrom_[8]">[8]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">l-lin-font-awesome-animation</span><span class="reference-title">参考资料</span></span></span><span class="hidden-anchor" id="referto_[9]"></span><sup class="reference"><a href="#referfrom_[9]">[9]</a></sup><span class="reference-bubble"><span class="reference-item"><span class="reference-literature">小康的butterfly主题使用文档</span><span class="reference-title">参考资料</span></span></span></p><div class="reference-source"><span class="hidden-anchor" id="referfrom_[1]"></span><a class="reference-anchor" href="#referto_[1]">[1]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://jq.qq.com/?_wv=1027&k=pGLB2C0N">Akilarの糖果屋群聊简介</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[2]"></span><a class="reference-anchor" href="#referto_[2]">[2]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://hexo.io/zh-cn/docs/">Hexo中文文档</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[3]"></span><a class="reference-anchor" href="#referto_[3]">[3]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/21cfbf15/">Butterfly 安装文档(一) 快速开始</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[4]"></span><a class="reference-anchor" href="#referto_[4]">[4]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/v5/tag-plugins/">hexo-theme-volantis 标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[5]"></span><a class="reference-anchor" href="#referto_[5]">[5]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://volantis.js.org/tag-plugins/">Volantis文档:内置标签插件</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[6]"></span><a class="reference-anchor" href="#referto_[6]">[6]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://butterfly.js.org/posts/4aa8abbe/#%E6%A8%99%E7%B1%A4%E5%A4%96%E6%8E%9B%EF%BC%88Tag-Plugins%EF%BC%89">Butterfly 安装文档:标签外挂（Tag Plugins</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[7]"></span><a class="reference-anchor" href="#referto_[7]">[7]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://lovelijunyi.gitee.io/posts/c898.html">小弋の生活馆全样式预览</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[8]"></span><a class="reference-anchor" href="#referto_[8]">[8]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://github.com/l-lin/font-awesome-animation">l-lin-font-awesome-animation</a></div><div class="reference-source"><span class="hidden-anchor" id="referfrom_[9]"></span><a class="reference-anchor" href="#referto_[9]">[9]<div class="reference-anchor-up fa-solid fa-angles-up"></div></a><a class="reference-link" href="https://www.antmoe.com/posts/3b43914f/">小康的butterfly主题使用文档</a></div><h2 id="进度条"><a href="#进度条" class="headerlink" title="进度条"></a>进度条</h2><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-red"  style="width: 10%" aria-valuenow="10" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-yellow"  style="width: 30%" aria-valuenow="30" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-green"  style="width: 50%" aria-valuenow="50" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-cyan"  style="width: 70%" aria-valuenow="70" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-blue"  style="width: 90%" aria-valuenow="90" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><div class="progress"><div class="progress-bar-animated progress-bar progress-bar-striped bg-gray"  style="width: 100%" aria-valuenow="100" aria-valuemin="0" aria-valuemax="100"><p>进度条样式预览</p></div></div><h2 id="折叠框"><a href="#折叠框" class="headerlink" title="折叠框"></a>折叠框</h2><details class="folding-tag" ><summary> 查看图片测试 </summary>              <div class='content'>              <p><img src="https://cdn.jsdelivr.net/gh/volantis-x/cdn-wallpaper/abstract/41F215B9-261F-48B4-80B5-4E86E165259E.jpeg" alt=""></p>              </div>            </details><details class="folding-tag" cyan open><summary> 查看默认打开的折叠框 </summary>              <div class='content'>              <p>这是一个默认打开的折叠框。</p>              </div>            </details><details class="folding-tag" green><summary> 查看代码测试 </summary>              <div class='content'>              <p>假装这里有代码块（代码块没法嵌套代码块）</p>              </div>            </details><details class="folding-tag" yellow><summary> 查看列表测试 </summary>              <div class='content'>              <ul><li>haha</li><li>hehe</li></ul>              </div>            </details><details class="folding-tag" red><summary> 查看嵌套测试 </summary>              <div class='content'>              <details class="folding-tag" blue><summary> 查看嵌套测试2 </summary>              <div class='content'>              <details class="folding-tag" ><summary> 查看嵌套测试3 </summary>              <div class='content'>              <p>hahaha <span><img src='https://cdn.jsdelivr.net/gh/volantis-x/cdn-emoji/tieba/%E6%BB%91%E7%A8%BD.png' style='height:24px'></span></p>              </div>            </details>              </div>            </details>              </div>            </details>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ChatGPT保姆级注册教程</title>
      <link href="/posts/64859.html"/>
      <url>/posts/64859.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><div class="tip warning"><p>注册需要科学上网，并且对节点的要求比较高，不会科学上网的可以自行Google，或者看我之前的教程<br>链接在此：<a href="https://www.aliyundrive.com/s/DcsNu5Lz8Lu">https://www.aliyundrive.com/s/DcsNu5Lz8Lu</a>  &gt;&gt;&gt; 此链接为阿里云盘的链接</p></div><div class="tip warning"><p>机场推荐： <a href="https://www.huyu001.top/tools/vpn/">https://www.huyu001.top/tools/vpn/</a></p></div><div class="tip "><p>以下操作需要新建一个无痕的浏览器窗口进行操作</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224094339443.png?x-oss-process=style/huyu"/></div></div></div><h2 id="注册步骤"><a href="#注册步骤" class="headerlink" title="注册步骤"></a>注册步骤</h2><h3 id="接码平台注册"><a href="#接码平台注册" class="headerlink" title="接码平台注册"></a>接码平台注册</h3><blockquote><p>注册手机号需要国外的手机号，所以我们需要找一下能够接收验证码的国外手机号，可以使用 <a href="https://sms-activate.org/">https://sms-activate.org/</a> 这个网站进行注册</p></blockquote><p>1、进入  <a href="https://sms-activate.org/">https://sms-activate.org/</a> 注册一个账号</p><p>2、账户余额充值</p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224094715010.png?x-oss-process=style/huyu" alt="image-20230224094715010"></p><blockquote><p>选择支付宝，充值1美元</p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224094739032.png?x-oss-process=style/huyu" alt="image-20230224094739032"></p></blockquote><h3 id="注册ChatGPT"><a href="#注册ChatGPT" class="headerlink" title="注册ChatGPT"></a>注册ChatGPT</h3><ul><li>先把节点开到全局 global</li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224094942413.png?x-oss-process=style/huyu" alt="image-20230224094942413" style="zoom:67%;" /></p><ul><li>打开 <a href="https://beta.openai.com/signup">https://beta.openai.com/signup</a> 进行ChatGPT注册流程</li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224095030089.png?x-oss-process=style/huyu" alt="image-20230224095030089" style="zoom:67%;" /></p><div class="tip warning"><p>推荐使用Google账号进行注册<br>没有Google账号，滑到下方有教程</p></div><ul><li>注册成功会跳转到填写手机号的页面</li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224095416641.png?x-oss-process=style/huyu" alt="image-20230224095416641"></p><ul><li>准备接码</li></ul><blockquote><p>国家选择自己要接码手机号的国家</p><ul><li><a href="https://sms-activate.org/">https://sms-activate.org/</a> 网站左侧搜索<code>OpenAI</code></li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224094504016.png?x-oss-process=style/huyu" alt="image-20230224094504016" style="zoom: 67%;" /></p><ul><li>选择任意国家 点击右侧的购物车</li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224095625989.png?x-oss-process=style/huyu" alt="image-20230224095625989"></p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224095840266.png?x-oss-process=style/huyu" alt="image-20230224095840266"></p><ul><li><p>复制手机号到ChatGPT填写的手机号，</p><ul><li><p>注意：国家一定要切换到你选择的国家，点左侧的国旗可以选择</p></li><li><p>没收到码，可以在有效期内免费退一次</p></li></ul></li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224100742803.png?x-oss-process=style/huyu" alt="image-20230224100742803"></p></blockquote><h3 id="开始使用ChatGPT"><a href="#开始使用ChatGPT" class="headerlink" title="开始使用ChatGPT"></a>开始使用ChatGPT</h3><ul><li>去登录 <a href="https://chat.openai.com/auth/login">https://chat.openai.com/auth/login</a></li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224100857099.png?x-oss-process=style/huyu" alt="image-20230224100857099"></p><ul><li>用你刚才注册的账号登录就行</li></ul><div class="tip warning"><p>注意：可能会出现<code>429</code>的情况 &gt;&gt;&gt; 是节点使用太多的问题<br>可以换节点，或者再用无痕页面打开，多试几次就行</p><div class="img-wrap"><div class="img-bg"><img class="img" src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224100942159.png?x-oss-process=style/huyu"/></div></div></div><ul><li>登录成功后，后面可以直接访问 <a href="https://chat.openai.com/chat">https://chat.openai.com/chat</a> ，也不用担心429的问题</li></ul><h2 id="Google账号注册"><a href="#Google账号注册" class="headerlink" title="Google账号注册"></a>Google账号注册</h2><p><a href="https://accounts.google.com/signup/v2/webcreateaccount?continue=https%3A%2F%2Faccounts.google.com%2Fsignin%2Fchrome%2Fsync%2Ffinish%3Fcontinue%3Dhttps%253A%252F%252Fwww.google.com%252F%26est%3DAIUG7QCSh1lg9m14Q45ms-v4eFVHCfDL5k9x5FgcrBhYVrcpUcrYA26jARh16z3_1Qfyh62CfuHHJT0FEl4rzXU&amp;dsh=S-49490967%3A1677204746549500&amp;biz=false&amp;flowName=GlifWebSignIn&amp;flowEntry=SignUp">注册页面</a></p><ul><li><p>填写信息</p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224101502165.png?x-oss-process=style/huyu" alt=""></p></li><li><p>验证手机号 选中国 填自己的手机号 填验证码</p></li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224101616028.png?x-oss-process=style/huyu" alt="image-20230224101616028"></p><ul><li>填写基本信息</li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20230224101703322.png?x-oss-process=style/huyu" alt="image-20230224101703322"></p>]]></content>
      
      
      
        <tags>
            
            <tag> ChatGPT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用的vue插件和文档</title>
      <link href="/posts/38825.html"/>
      <url>/posts/38825.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue3-官方文档"><a href="#Vue3-官方文档" class="headerlink" title="Vue3 官方文档"></a>Vue3 官方文档</h2><iframe src="https://cn.vuejs.org/" width="100%" height="300px" frameborder="0" loading="lazy" allowfullscreen></iframe><h2 id="vue2-官方文档"><a href="#vue2-官方文档" class="headerlink" title="vue2 官方文档"></a>vue2 官方文档</h2><iframe src="https://v2.cn.vuejs.org/" width="100%" height="300px" frameborder="0" loading="lazy" allowfullscreen></iframe>]]></content>
      
      
      
        <tags>
            
            <tag> 网站 </tag>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>template报错undefined</title>
      <link href="/posts/15503.html"/>
      <url>/posts/15503.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Vue项目-template报错undefined"><a href="#Vue项目-template报错undefined" class="headerlink" title="Vue项目 template报错undefined"></a>Vue项目 template报错undefined</h2><blockquote><p>解决vue项目中页面调用数据 在数据加载完毕之前出现undefined问题</p></blockquote><p>在Vue项目中，当我们调用后台数据时，如果我们尝试在数据加载之前使用数据，就会遇到undefined的问题。</p><p>例如：一进入页面直接回显数据</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; data[0].name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = []</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>此时因为 <code>data</code>是空数组，所以会报错</p><font color='red'>TypeError: Cannot read property 'name' of  undefined</font><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>1、可以通过给个默认值的方式</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123; data[0].name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = [&#123;<span class="attr">name</span>:<span class="string">&#x27;我是name&#x27;</span>&#125;]</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，即使我们没有从后台加载数据，<code>data</code>数组也有一个默认值。这将确保我们在使用数据之前，数据已经有了一个值，避免了undefined的问题。</p></blockquote><p>2、通过<code>v-if</code>判断一下</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-if</span>=<span class="string">&#x27;data &amp;&amp; data.length&#x27;</span>&gt;</span></span><br><span class="line">    &#123;&#123; data[0].name &#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">const</span> data = []</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在这个例子中，我们使用了<code>v-if</code>指令来检查<code>data</code>数组是否存在并且是否有一个长度。这将确保我们在使用数据之前，数据已经存在，并且避免了undefined的问题。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue页面刷新</title>
      <link href="/posts/49666.html"/>
      <url>/posts/49666.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="路由页面刷新"><a href="#路由页面刷新" class="headerlink" title="路由页面刷新"></a>路由页面刷新</h1><blockquote><p>当我们在一个页面上，页面上有不同的分类，点击不同的分类需要传不同的参数来请求接口，当接口返回数据后，需要将页面的数据重新渲染，而不是之前的数据。</p></blockquote><p>比如：<br>一个地址：<a href="http://xxx/#/music/orderMusic/editMusic?id=xxx">http://xxx/#/music/orderMusic/editMusic?id=xxx</a><br>path 是：’/music/orderMusic/editMusic’<br>fullPath 是：’/music/orderMusic/editMusic?id=xxx’</p><p>我们每次只改变==url==后面的==id==，同时将页面重新渲染</p><p><strong>解决方法</strong></p><p>我们可以通过 <strong>router-view中的key=‘$route.fullPath’</strong> 来解决这个问题。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;router-view :key=&#x27;$route.fullPath&#x27;&gt;</span><br></pre></td></tr></table></figure><blockquote><p><strong>通过绑定一个<code>fullPath</code>，可以识别当前页面路由的完整地址，当地址发生改变(包括参数改变)则重新渲染页面(例如动态路由参数的变化)</strong></p></blockquote><p>当然也可以通过这两种办法：</p><ul><li><p>1.<code>this.$router.go(0)</code></p></li><li><p>2.<code>location.reload()</code></p></li></ul><p>这两种都可以刷新当前页面的，缺点就是相当于按<code>ctrl + F5</code> 强制刷新那种，整个页面重新加载，会出现一个瞬间的空白页面，用户体验不好，所以不推荐使用。</p><h1 id="局部刷新"><a href="#局部刷新" class="headerlink" title="局部刷新"></a>局部刷新</h1><blockquote><p>比如：当我们在渲染表格请求是，可能会出现表格没变化的情况</p></blockquote><p>==可以通过v-if去强制判断==</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;Table :data=&#x27;tableData&#x27; v-if=&#x27;loading&#x27;&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;/Table&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script lang=&#x27;ts&#x27; setup&gt;</span><br><span class="line">import &#123; ref &#125; form &#x27;vue&#x27;</span><br><span class="line">  </span><br><span class="line">  const loading = ref(true)</span><br><span class="line">  </span><br><span class="line">  const getTableData = async () =&gt; &#123;</span><br><span class="line">    const res = awiat ...</span><br><span class="line">    // ...逻辑代码</span><br><span class="line">    // 请求成功</span><br><span class="line">    if(res.code === 200) &#123;</span><br><span class="line">      loading.value = false</span><br><span class="line">      setTimeout(() =&gt; &#123;</span><br><span class="line">        loading.value = true</span><br><span class="line">      &#125;,0)</span><br><span class="line">      // 这样table就会进行一个强制刷新</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>加密文章</title>
      <link href="/posts/57058.html"/>
      <url>/posts/57058.html</url>
      
        <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">  <script id="hbeData" type="hbeData" data-hmacdigest="a3f8fb23a65f24d05d1c6a41c246221b1ae72f5770acdf6c13e367e3c94f472e">22064b17c03cb0c0e58c99349b6889d0c7e9d327de57f2d214b057f3875d6b37b9b20ab3b449f9d3b0ba6ffe12bb71d82eff8171349bc71e3a2c9718b358eacc07c1e2d0dcdcc94bb927d4bdef70eb3993770cfdac6f952c0447d2bf630cf31fbf54ae1e01d0502eb9c885c2bb862caf025717a37044569fa7b58de602993a5345ee2d96f43c4f765189e061db15b39fc43aea018790d5a2d584a071f8bb273651fc037ffa6979fcc736d271d55a7b036045820a8509b0514d8b5a19cbffdce3cc38372d1982df50b8922f6613aa3754579ddda193850e17c53d4b7f3cb5a21ea68af69ef133e8fd02b2f98ac1c5660830424f17c7525a0175be23ecb8803b79c325c70b46b59466f9c71475aef47761e9068f4ab8e934347642a4446fff1132103eaea84bea0f602155996b671a620d83d8310055b43b25ea68220eb10fa095</script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-shrink">      <input class="hbe hbe-input-field hbe-input-field-shrink" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-shrink" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-shrink">您好, 这里需要密码.</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      
      
      
        <tags>
            
            <tag> 加密 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用img标签实现icon的时候对不齐文字</title>
      <link href="/posts/48966.html"/>
      <url>/posts/48966.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="到底为什么用img标签实现icon的时候经常对不齐文字"><a href="#到底为什么用img标签实现icon的时候经常对不齐文字" class="headerlink" title="到底为什么用img标签实现icon的时候经常对不齐文字"></a>到底为什么用img标签实现icon的时候经常对不齐文字</h1><ul><li>用img标签直接插入图片会出现对不齐的情况</li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221227153953411.png?x-oss-process=style/huyu" alt="baseline"></p><blockquote><p>因为图片的<code>vertical-align</code>默认是<code>baseline</code>的</p></blockquote><ul><li>如果设为middle，会偏下</li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221227154246039.png?x-oss-process=style/huyu" alt="middle" style="zoom:50%;" /></p><blockquote><p>但是对于英文字母看着是居中的，对于汉字会偏下</p></blockquote><ul><li>怎么解决呢</li></ul><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">1em</span>,</span><br><span class="line">    vertical-align: -<span class="number">0.15em</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221227154445688.png?x-oss-process=style/huyu" alt="解决"></p><blockquote><p>这样就对齐了，而且字体大小改变，图片也会居中显示</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue 项目路径</title>
      <link href="/posts/45836.html"/>
      <url>/posts/45836.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="assets和static文件夹的区别"><a href="#assets和static文件夹的区别" class="headerlink" title="assets和static文件夹的区别"></a>assets和static文件夹的区别</h2><p>两个都是放置静态资源的地方，分别是<code>src/assets</code>文件夹和<code>static</code>文件夹</p><p><strong>assets目录中的文件会被webpack处理解析为模块依赖</strong>，只支持相对路径形式。</p><p><strong>static/ 目录下的文件并不会被Webpack处理：它们会直接被复制到最终的打包目录（默认是dist/static）下。</strong>必须使用绝对路径引用这些文件，这是通过在 config.js 文件中的 build.assetsPublicPath 和 build.assetsSubDirectory 连接来确定的。</p><p>任何放在 static/ 中文件需要以绝对路径的形式引用：/static/[filename]。</p><p>在我们实际的开发中，总的来说：<strong>static放不会变动的文件 assets放可能会变动的文件。</strong></p><blockquote><p>1、assets与static 引入不同</p><ol><li>assets文件是src下的，所以最后会被打包，</li><li>static文件与src 同级，不会被打包</li><li>assets中的文件在vue下用../这种相对路径的形式进行引用，在script下必须用@import的方式引入</li><li>static下的文件在.vue中的任何地方都只要使用../这种相对路径的方式引入，</li></ol><p>2、文件夹的区别</p><p>（1）assets用来放置样式、静态图片，只要src下面的组件中用到的资源就放在assets中。</p><p>（2）static用来放没有npm包的第三方插件，字体文件。</p><p>（3）assets与components同级 components下的.vue引用静态文件时，相对路径为 ../assets/xxxx</p><p>3、vue如何引入其它静态文件：</p><p>（1）src目录下的资源只能import或require。</p><p>（2）想静态引入的话，建立一个与src同级的目录static，然后把静态资源放入该文件夹下，html的引入路径如下：./static/…（注：试过一定要放在static文件夹下，否则报错）</p></blockquote><h3 id="在js数据中如何引用图片"><a href="#在js数据中如何引用图片" class="headerlink" title="在js数据中如何引用图片"></a>在js数据中如何引用图片</h3><p>因为webpack会将图片当做模块来引用，所以在js中需要使用require将图片引用进来，不能直接以字符串的形式。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// js部分</span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">imgUrl: &#x27;图片地址&#x27;, // 错误写法</span><br><span class="line">imgUrl: &#x27;require(&#x27;图片地址&#x27;)&#x27; // 正确的写法</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// template部分</span><br><span class="line">img标签形式：</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">:src:</span>&quot;<span class="attr">img</span>&quot; /&gt;</span></span><br><span class="line">// 或者div背景图形式</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; backgroud: &#x27;url(&#x27; + img + &#x27;)&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="Vue中如何配置自定义路径别名"><a href="#Vue中如何配置自定义路径别名" class="headerlink" title="Vue中如何配置自定义路径别名"></a>Vue中如何配置自定义路径别名</h2><p>在我们日常开发中，常常会导入一些模块或者组件，如果采用相对路径的方式：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">import uEditor from <span class="string">&quot;../../../../../components/tools&quot;</span>;</span><br></pre></td></tr></table></figure><p>会很臃肿</p><h4 id="创建vue-config-js-写入配置代码"><a href="#创建vue-config-js-写入配置代码" class="headerlink" title="创建vue.config.js,写入配置代码"></a>创建vue.config.js,写入配置代码</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">        <span class="attr">resolve</span>: &#123;</span><br><span class="line">            <span class="attr">alias</span>: &#123; <span class="comment">//配置别名,修改后需要重新编译才能生效</span></span><br><span class="line">                <span class="string">&#x27;assets&#x27;</span>: <span class="string">&#x27;@/assets&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;common&#x27;</span>: <span class="string">&#x27;@/common&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;components&#x27;</span>: <span class="string">&#x27;@/components&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;network&#x27;</span>: <span class="string">&#x27;@/network&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;views&#x27;</span>: <span class="string">&#x27;@/views&#x27;</span>,</span><br><span class="line">                <span class="string">&#x27;static&#x27;</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../static&#x27;</span>), <span class="comment">// 也可以使用这种方法</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：如果在HTML路径中使用别名，需要在引用前面加上“~”前缀</p><p><code>&lt;img src=&quot;~assets/img/...&quot; /&gt;</code></p><p>其他文件中使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="keyword">@import</span> <span class="string">&quot;assets/css/...&quot;</span></span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>虚拟列表</title>
      <link href="/posts/6256.html"/>
      <url>/posts/6256.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p class="note note-primary">todo:待整理</p><blockquote><p>详情请看：<a href="https://www.huyu001.top/posts/21040.html">https://www.huyu001.top/posts/21040.html</a></p></blockquote><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 虚拟列表：https://juejin.cn/post/7168645862296879117#heading-16 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;virtualList&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;phantom&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; height: listHeight + &#x27;px&#x27; &#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;&#123; transform: `translate3d(0, $&#123;currentOffset&#125;px, 0)` &#125;&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in visibleData&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">:id</span>=<span class="string">&quot;item.id&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;items&quot;</span> <span class="attr">class</span>=<span class="string">&quot;list-item&quot;</span>&gt;</span></span><br><span class="line">          &#123;&#123; item.value &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">import</span> lodash <span class="keyword">from</span> <span class="string">&#x27;lodash&#x27;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">let</span> binarySearch = <span class="keyword">function</span> (<span class="params">list, target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> len = list.<span class="property">length</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> left = <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        right = len - <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tempIndex = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span> (left &lt;= right) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> midIndex = (left + right) &gt;&gt; <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> midVal = list[midIndex].<span class="property">bottom</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (midVal === target) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> midIndex</span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (midVal &lt; target) &#123;</span></span><br><span class="line"><span class="language-javascript">        left = midIndex + <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// list不一定存在与target相等的项，不断收缩右区间，寻找最匹配的项</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (tempIndex === <span class="literal">null</span> || tempIndex &gt; midIndex) &#123;</span></span><br><span class="line"><span class="language-javascript">          tempIndex = midIndex</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        right--</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 如果没有搜索到完全匹配的项 就返回最匹配的项</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">return</span> tempIndex</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;newTest&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">listData</span>: [], <span class="comment">// 列表数据</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">positions</span>: [], <span class="comment">// 记录索引 偏移...</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">preItemSize</span>: <span class="number">50</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">screenHeight</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">currentOffset</span>: <span class="number">0</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">start</span>: <span class="number">0</span>, <span class="comment">// 开始</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">end</span>: <span class="number">0</span>, <span class="comment">// 结束</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// count: 0,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">bufferPercent</span>: <span class="number">0.5</span>, <span class="comment">// 即每个缓冲区只缓冲 0.5 * 最大可见列表项数 个元素</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">listData</span>.<span class="title function_">push</span>(&#123;<span class="attr">id</span>: i, <span class="attr">value</span>: i + <span class="string">&#x27;字符内容&#x27;</span>.<span class="title function_">repeat</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">20</span>)&#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="title function_">initPositions</span>(<span class="variable language_">this</span>.<span class="property">listData</span>, <span class="variable language_">this</span>.<span class="property">preItemSize</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">screenHeight</span> = <span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">clientHeight</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">start</span> = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.<span class="property">end</span> = <span class="variable language_">this</span>.<span class="property">start</span> + <span class="variable language_">this</span>.<span class="property">visibleCount</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 绑定滚动事件</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> target = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">virtualList</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> <span class="title function_">scrollFn</span> = event =&gt; <span class="variable language_">this</span>.<span class="title function_">scrollEvent</span>(event.<span class="property">target</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> debounce_scroll = lodash.<span class="title function_">debounce</span>(scrollFn, <span class="number">160</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">let</span> throttle_scroll = lodash.<span class="title function_">throttle</span>(scrollFn, <span class="number">80</span>)</span></span><br><span class="line"><span class="language-javascript">      target.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, debounce_scroll)</span></span><br><span class="line"><span class="language-javascript">      target.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, throttle_scroll)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// target.addEventListener(&quot;scroll&quot;,  scrollFn);</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">positions</span>, <span class="variable language_">this</span>.<span class="property">visibleData</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">updated</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">items</span> || !<span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">items</span>.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 根据真实元素大小，修改对应的缓存列表</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="title function_">updatePositions</span>()</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 更新完缓存列表后，重新赋值偏移量</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">currentOffset</span> = <span class="variable language_">this</span>.<span class="title function_">getCurrentOffset</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">computed</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">listHeight</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">positions</span>[<span class="variable language_">this</span>.<span class="property">positions</span>.<span class="property">length</span> - <span class="number">1</span>].<span class="property">bottom</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">visibleCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="variable language_">this</span>.<span class="property">screenHeight</span> / <span class="variable language_">this</span>.<span class="property">preItemSize</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">visibleData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">listData</span>.<span class="title function_">slice</span>(<span class="variable language_">this</span>.<span class="property">start</span> - <span class="variable language_">this</span>.<span class="property">aboveCount</span>, <span class="variable language_">this</span>.<span class="property">end</span> + <span class="variable language_">this</span>.<span class="property">belowCount</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">bufferCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> (<span class="variable language_">this</span>.<span class="property">visibleCount</span> * <span class="variable language_">this</span>.<span class="property">bufferPercent</span>) &gt;&gt; <span class="number">0</span> <span class="comment">// 向下取整</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 使用索引和缓冲数量的最小值 避免缓冲不存在或者过多的数据</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">aboveCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">start</span>, <span class="variable language_">this</span>.<span class="property">bufferCount</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">belowCount</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="variable language_">this</span>.<span class="property">listData</span>.<span class="property">length</span> - <span class="variable language_">this</span>.<span class="property">end</span>, <span class="variable language_">this</span>.<span class="property">bufferCount</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 滚动回调</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">scrollEvent</span>(<span class="params">target</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> &#123;scrollTop&#125; = target</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">start</span> = <span class="variable language_">this</span>.<span class="title function_">getStartIndex</span>(scrollTop)</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">end</span> = <span class="variable language_">this</span>.<span class="property">start</span> + <span class="variable language_">this</span>.<span class="property">visibleCount</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">currentOffset</span> = <span class="variable language_">this</span>.<span class="title function_">getCurrentOffset</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 初始化列表</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">initPositions</span>(<span class="params">listData, itemSize</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">this</span>.<span class="property">positions</span> = listData.<span class="title function_">map</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            index,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">top</span>: index * itemSize,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">bottom</span>: (index + <span class="number">1</span>) * itemSize,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">height</span>: itemSize,</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 渲染后更新positions</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">updatePositions</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">let</span> nodes = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">items</span></span></span><br><span class="line"><span class="language-javascript">        nodes.<span class="title function_">forEach</span>(<span class="function"><span class="params">node</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 获取 真实DOM高度</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> &#123;height&#125; = node.<span class="title function_">getBoundingClientRect</span>()</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 根据 元素索引 获取 缓存列表对应的列表项</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">const</span> index = node.<span class="property">id</span> - <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> oldHeight = <span class="variable language_">this</span>.<span class="property">positions</span>[index].<span class="property">height</span></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// dValue：真实高度与预估高度的差值 决定该列表项是否要更新</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> dValue = oldHeight - height</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 如果有高度差 !!dValue === true</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">if</span> (dValue) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 更新对应列表项的 bottom 和 height</span></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">positions</span>[index].<span class="property">bottom</span> = <span class="variable language_">this</span>.<span class="property">positions</span>[index].<span class="property">bottom</span> - dValue</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">this</span>.<span class="property">positions</span>[index].<span class="property">height</span> = height</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// 依次更新positions中后续元素的 top bottom</span></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">for</span> (<span class="keyword">let</span> k = index + <span class="number">1</span>; k &lt; <span class="variable language_">this</span>.<span class="property">positions</span>.<span class="property">length</span>; k++) &#123;</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">positions</span>[k].<span class="property">top</span> = <span class="variable language_">this</span>.<span class="property">positions</span>[k - <span class="number">1</span>].<span class="property">bottom</span></span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">positions</span>[k].<span class="property">bottom</span> = <span class="variable language_">this</span>.<span class="property">positions</span>[k].<span class="property">bottom</span> - dValue</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">getStartIndex</span>(<span class="params">scrollTop = <span class="number">0</span></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> <span class="title function_">binarySearch</span>(<span class="variable language_">this</span>.<span class="property">positions</span>, scrollTop)</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">getCurrentOffset</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">start</span> &gt;= <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 计算偏移量时包括上缓冲区的列表项</span></span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">let</span> size =</span></span><br><span class="line"><span class="language-javascript">              <span class="variable language_">this</span>.<span class="property">positions</span>[<span class="variable language_">this</span>.<span class="property">start</span>].<span class="property">top</span> -</span></span><br><span class="line"><span class="language-javascript">              (<span class="variable language_">this</span>.<span class="property">positions</span>[<span class="variable language_">this</span>.<span class="property">start</span> - <span class="variable language_">this</span>.<span class="property">aboveCount</span>]</span></span><br><span class="line"><span class="language-javascript">                  ? <span class="variable language_">this</span>.<span class="property">positions</span>[<span class="variable language_">this</span>.<span class="property">start</span> - <span class="variable language_">this</span>.<span class="property">aboveCount</span>].<span class="property">top</span></span></span><br><span class="line"><span class="language-javascript">                  : <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">positions</span>[<span class="variable language_">this</span>.<span class="property">start</span> - <span class="number">1</span>].<span class="property">bottom</span> - size</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">width</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">50vh</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">overflow</span>: auto;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.phantom</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">height</span>: <span class="number">800px</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  <span class="selector-class">.list-item</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">  &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>优雅的Commit信息</title>
      <link href="/posts/50652.html"/>
      <url>/posts/50652.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="优雅的Commit信息"><a href="#优雅的Commit信息" class="headerlink" title="优雅的Commit信息"></a>优雅的Commit信息</h1><blockquote><p>使用<a href="https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-angular">Angular</a>团队提交规范</p></blockquote><p>主要有以下组成<br>标题行: 必填, 描述主要修改类型和内容<br>主题内容: 描述为什么修改, 做了什么样的修改, 以及开发的思路等等<br>页脚注释: 放 Breaking Changes 或 Closed Issues<br>常用的修改项<br>type: commit 的类型</p><blockquote><p>feat: 新特性<br>fix: 修改问题<br>refactor: 代码重构<br>docs: 文档修改<br>style: 代码格式修改, 注意不是 css 修改<br>test: 测试用例修改<br>chore: 其他修改, 比如构建流程, 依赖管理.</p></blockquote><p>scope: commit 影响的范围, 比如: route, component, utils, build…<br>subject: commit 的概述<br>body: commit 具体修改内容, 可以分为多行<br>footer: 一些备注, 通常是 BREAKING CHANGE 或修复的 bug 的链接.</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue.config.js配置（vue2）</title>
      <link href="/posts/58727.html"/>
      <url>/posts/58727.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="vue-config-js文件"><a href="#vue-config-js文件" class="headerlink" title="vue.config.js文件"></a>vue.config.js文件</h1><p>这个文件导出了一个包含了选项的对象：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 选项...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，详细介绍一些选项及配置：</p><h3 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&#x27;assets&#x27;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8090</span>,</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 其他配置</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>productionSourceMap</code>：生产环境是否要生成 <code>sourceMap</code></p><p><code>publicPath</code>：部署应用包时的基本 URL,用法和 <code>webpack</code> 本身的 <code>output.publicPath</code> 一致</p><p>可以通过三元运算去配置<code>dev</code>和<code>prod</code>环境,</p><blockquote><p><code>publicPath: process.env.NODE_ENV === &#39;production&#39; ? &#39;/prod/&#39; : &#39;./&#39;</code></p></blockquote><p><code>outputDir</code>: <code>build</code> 时输出的文件目录</p><p><code>assetsDir</code>: 放置静态文件夹目录</p><p><code>devServer</code>: dev环境下，<code>webpack-dev-server</code> 相关配置</p><ul><li>port: 开发运行时的端口</li><li>host: 开发运行时域名，设置成<code>&#39;0.0.0.0&#39;</code>,在同一个局域网下，如果你的项目在运行，同时可以通过你的<a href="http://ip:port/...访问你的项目">http://ip:port/...访问你的项目</a></li><li>https: 是否启用 <code>https</code></li><li>open: <code>npm run serve</code> 时是否直接打开浏览器</li></ul><h3 id="插件及规则的配置"><a href="#插件及规则的配置" class="headerlink" title="插件及规则的配置"></a>插件及规则的配置</h3><p>在<code>vue.config.js</code>如果要新增/修改 <code>webpack</code> 的 <code>plugins</code> 或者 <code>rules</code> , 有2种方式。</p><p><code>configureWebpack</code> 方式</p><p><code>configureWebpack</code> 是相对比较简单的一种方式</p><ul><li>它可以是一个对象：和 <code>webpack</code> 本身配置方式是一致，该对象将会被 <code>webpack-merge</code> 合并入最终的 <code>webpack</code> 配置</li><li>它也可以是一个函数：直接在函数内部进行修改配置</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">configureWebpack</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>:[],</span><br><span class="line">    <span class="attr">plugins</span>: []</span><br><span class="line">&#125;</span><br><span class="line"><span class="attr">configureWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 例如，通过判断运行环境，设置mode</span></span><br><span class="line">    config.<span class="property">mode</span> = <span class="string">&#x27;production&#x27;</span></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><code>chainWebpack</code> 方式</p><p><code>chainWebpack</code> 链式操作 (高级)，接下来所有的配置我都会在该选项中进行配置</p><h3 id="规则rules的配置"><a href="#规则rules的配置" class="headerlink" title="规则rules的配置"></a>规则rules的配置</h3><p>关于<code>rules</code> 的配置，我会分别从新增/修改进行介绍。</p><h4 id="rules的新增"><a href="#rules的新增" class="headerlink" title="rules的新增"></a>rules的新增</h4><p>在<code>webpack</code>中 <code>rules</code> 是 <code>module</code> 的配置项，而所有的配置的都是挂载到 <code>config</code> 下的，所以新增一个rule方式：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.<span class="property">module</span></span><br><span class="line">  .<span class="title function_">rule</span>(name)</span><br><span class="line">    .<span class="title function_">use</span>(name)</span><br><span class="line">      .<span class="title function_">loader</span>(loader)</span><br><span class="line">      .<span class="title function_">options</span>(options)</span><br></pre></td></tr></table></figure><p>案例：<code>style-resources-loader</code> 来添加<code>less</code>全局变量</p><p>案例：<code>svg-sprite-loader</code> 将svg图片以雪碧图的方式在项目中加载</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 通过 style-resources-loader 来添加less全局变量</span></span><br><span class="line">        <span class="keyword">const</span> types = [<span class="string">&#x27;vue-modules&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;normal-modules&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>];</span><br><span class="line">        types.<span class="title function_">forEach</span>(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> rule = config.<span class="property">module</span>.<span class="title function_">rule</span>(<span class="string">&#x27;less&#x27;</span>).<span class="title function_">oneOf</span>(type)</span><br><span class="line">            rule.<span class="title function_">use</span>(<span class="string">&#x27;style-resource&#x27;</span>)</span><br><span class="line">                .<span class="title function_">loader</span>(<span class="string">&#x27;style-resources-loader&#x27;</span>)</span><br><span class="line">                .<span class="title function_">options</span>(&#123;</span><br><span class="line">                    <span class="attr">patterns</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./lessVariates.less&#x27;</span>)]</span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// `svg-sprite-loader`: 将svg图片以雪碧图的方式在项目中加载</span></span><br><span class="line">        config.<span class="property">module</span></span><br><span class="line">            .<span class="title function_">rule</span>(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">            .<span class="title function_">test</span>(<span class="regexp">/.svg$/</span>) <span class="comment">// 匹配svg文件</span></span><br><span class="line">            .<span class="property">include</span>.<span class="title function_">add</span>(<span class="title function_">resolve</span>(<span class="string">&#x27;src/svg&#x27;</span>)) <span class="comment">// 主要匹配src/svg</span></span><br><span class="line">            .<span class="title function_">end</span>() </span><br><span class="line">            .<span class="title function_">use</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">            .<span class="title function_">loader</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>) <span class="comment">// 使用的loader，主要要npm该插件</span></span><br><span class="line">            .<span class="title function_">options</span>(&#123;<span class="attr">symbolId</span>: <span class="string">&#x27;svg-[name]&#x27;</span>&#125;) <span class="comment">// 参数配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rules的修改"><a href="#rules的修改" class="headerlink" title="rules的修改"></a>rules的修改</h4><p>针对已经存在的 <code>rule</code> , 如果需要修改它的参数, 可以使用 <code>tap</code> 方法：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.<span class="property">module</span></span><br><span class="line">  .<span class="title function_">rule</span>(name)</span><br><span class="line">    .<span class="title function_">use</span>(name)</span><br><span class="line">      .<span class="title function_">tap</span>(<span class="function"><span class="params">options</span> =&gt;</span> newOptions)</span><br></pre></td></tr></table></figure><p>案例：修改<code>url-loader</code>的参数</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// `url-loader`是webpack默认已经配置的，现在我们来修改它的参数</span></span><br><span class="line">        config.<span class="property">module</span>.<span class="title function_">rule</span>(<span class="string">&#x27;images&#x27;</span>)</span><br><span class="line">            .<span class="title function_">use</span>(<span class="string">&#x27;url-loader&#x27;</span>)</span><br><span class="line">            .<span class="title function_">tap</span>(<span class="function"><span class="params">options</span> =&gt;</span> (&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;./assets/images/[name].[ext]&#x27;</span>,</span><br><span class="line">                <span class="attr">quality</span>: <span class="number">85</span>,</span><br><span class="line">                <span class="attr">limit</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件plugins-的配置"><a href="#插件plugins-的配置" class="headerlink" title="插件plugins 的配置"></a>插件plugins 的配置</h3><p>关于 <code>plugins</code> 的配置，我会分别从<code>新增/修改/删除</code>进行介绍。</p><h4 id="plugins的新增"><a href="#plugins的新增" class="headerlink" title="plugins的新增"></a>plugins的新增</h4><ul><li>注意：这里WebpackPlugin不需要通过<code>new WebpackPlugin()</code>使用。</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config</span><br><span class="line">  .<span class="title function_">plugin</span>(name)</span><br><span class="line">  .<span class="title function_">use</span>(<span class="title class_">WebpackPlugin</span>, args)</span><br></pre></td></tr></table></figure><p>案例：新增<code>hot-hash-webpack-plugin</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HotHashWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;hot-hash-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 新增一个`hot-hash-webpack-plugin`</span></span><br><span class="line">        <span class="comment">// 注意：这里use的时候不需要使用`new HotHashWebpackPlugin()`</span></span><br><span class="line">        config.<span class="title function_">plugin</span>(<span class="string">&#x27;hotHash&#x27;</span>)</span><br><span class="line">              .<span class="title function_">use</span>(<span class="title class_">HotHashWebpackPlugin</span>, [&#123; <span class="attr">version</span>: <span class="string">&#x27;1.0.0&#x27;</span> &#125;]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="plugins的修改"><a href="#plugins的修改" class="headerlink" title="plugins的修改"></a>plugins的修改</h4><p>同理, <code>plugin</code> 参数的修改也是通过 <code>tap</code> 去修改。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config</span><br><span class="line">    .<span class="title function_">plugin</span>(name)</span><br><span class="line">    .<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> newArgs)</span><br></pre></td></tr></table></figure><p>案例：修改打包后<code>css</code>抽离后的<code>filename</code>及抽离所属目录</p><p>案例：删除<code>console</code>和<code>debugger</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HotHashWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;hot-hash-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 修改打包时css抽离后的filename及抽离所属目录</span></span><br><span class="line">        config.<span class="title function_">plugin</span>(<span class="string">&#x27;extract-css&#x27;</span>)</span><br><span class="line">                .<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> [&#123;</span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;css/[name].[contenthash:8].css&#x27;</span>,</span><br><span class="line">                    <span class="attr">chunkFilename</span>: <span class="string">&#x27;css/[name].[contenthash:8].css&#x27;</span></span><br><span class="line">                &#125;]);</span><br><span class="line">        <span class="comment">// 正式环境下，删除console和debugger</span></span><br><span class="line">        config.<span class="property">optimization</span></span><br><span class="line">                .<span class="title function_">minimize</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_">minimizer</span>(<span class="string">&#x27;terser&#x27;</span>)</span><br><span class="line">                .<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> &#123; terserOptions &#125; = args[<span class="number">0</span>];</span><br><span class="line">                    terserOptions.<span class="property">compress</span>.<span class="property">drop_console</span> = <span class="literal">true</span>;</span><br><span class="line">                    terserOptions.<span class="property">compress</span>.<span class="property">drop_debugger</span> = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">return</span> args</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="plugins的删除"><a href="#plugins的删除" class="headerlink" title="plugins的删除"></a>plugins的删除</h4><p>对于一些<code>webpack</code>默认的 <code>plugin</code> ，如果不需要可以进行删除</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.<span class="property">plugins</span>.<span class="title function_">delete</span>(name)</span><br></pre></td></tr></table></figure><p>案例：删除 <code>vue-cli3.X</code> 模块的自动分割抽离</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// vue-cli3.X 会自动进行模块分割抽离，如果不需要进行分割,可以手动删除</span></span><br><span class="line">        config.<span class="property">optimization</span>.<span class="title function_">delete</span>(<span class="string">&#x27;splitChunks&#x27;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="一些常见的配置"><a href="#一些常见的配置" class="headerlink" title="一些常见的配置"></a>一些常见的配置</h3><h4 id="修改enter文件"><a href="#修改enter文件" class="headerlink" title="修改enter文件"></a>修改enter文件</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.<span class="property">entryPoints</span>.<span class="title function_">clear</span>(); <span class="comment">// 清空默认入口</span></span><br><span class="line">config.<span class="title function_">entry</span>(<span class="string">&#x27;test&#x27;</span>).<span class="title function_">add</span>(<span class="title function_">getPath</span>(<span class="string">&#x27;./test/main.ts&#x27;</span>)); <span class="comment">// 重新设置</span></span><br></pre></td></tr></table></figure><h4 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h4><p>定义全局全局变量，<code>DefinePlugin</code> 是 <code>webpack</code> 已经默认配置的，我们可以对参数进行修改</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.<span class="title function_">plugin</span>(<span class="string">&#x27;define&#x27;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> [&#123; </span><br><span class="line">    ...args, </span><br><span class="line">    <span class="string">&quot;window.isDefine&quot;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="literal">true</span>),</span><br><span class="line">    &#125;]);</span><br></pre></td></tr></table></figure><h4 id="自定义filename-及-chunkFilename"><a href="#自定义filename-及-chunkFilename" class="headerlink" title="自定义filename 及 chunkFilename"></a>自定义filename 及 chunkFilename</h4><p>自定义打包后js文件的路径及文件名字</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.<span class="property">output</span>.<span class="title function_">filename</span>(<span class="string">&#x27;./js/[name].[chunkhash:8].js&#x27;</span>);</span><br><span class="line">config.<span class="property">output</span>.<span class="title function_">chunkFilename</span>(<span class="string">&#x27;./js/[name].[chunkhash:8].js&#x27;</span>);</span><br></pre></td></tr></table></figure><h4 id="修改html-webpack-plugin参数"><a href="#修改html-webpack-plugin参数" class="headerlink" title="修改html-webpack-plugin参数"></a>修改html-webpack-plugin参数</h4><p><code>html-webpack-plugin</code> 是 <code>webpack</code> 已经默认配置的，默认的源模版文件是 <code>public/index.html</code> ;我们可以对其参数进行修改</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.<span class="title function_">plugin</span>(<span class="string">&#x27;html&#x27;</span>)</span><br><span class="line">       .<span class="title function_">tap</span>(<span class="function"><span class="params">options</span> =&gt;</span> [&#123;</span><br><span class="line">           <span class="attr">template</span>: <span class="string">&#x27;../../index.html&#x27;</span> <span class="comment">// 修改源模版文件</span></span><br><span class="line">           <span class="attr">title</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">       &#125;]);</span><br></pre></td></tr></table></figure><h4 id="设置别名alias"><a href="#设置别名alias" class="headerlink" title="设置别名alias"></a>设置别名alias</h4><p><code>webpack</code>默认是将<code>src</code>的别名设置为<code>@</code>, 此外，我们可以进行添加</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">config.<span class="property">resolve</span>.<span class="property">alias</span></span><br><span class="line">        .<span class="title function_">set</span>(<span class="string">&#x27;@&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>)) </span><br><span class="line">        .<span class="title function_">set</span>(<span class="string">&#x27;api&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src/apis&#x27;</span>))</span><br><span class="line">        .<span class="title function_">set</span>(<span class="string">&#x27;common&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src/common&#x27;</span>))</span><br></pre></td></tr></table></figure><h3 id="附上一份-vue-config-js-配置"><a href="#附上一份-vue-config-js-配置" class="headerlink" title="附上一份 vue.config.js 配置"></a>附上一份 vue.config.js 配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HotHashWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;hot-hash-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">WebpackBar</span> = <span class="built_in">require</span>(<span class="string">&#x27;webpackbar&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">resolve</span> = dir =&gt; path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;.&#x27;</span>, dir)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>,</span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>,</span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&#x27;assets&#x27;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">9999</span>,</span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>,</span><br><span class="line">        <span class="attr">https</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> types = [<span class="string">&#x27;vue-modules&#x27;</span>, <span class="string">&#x27;vue&#x27;</span>, <span class="string">&#x27;normal-modules&#x27;</span>, <span class="string">&#x27;normal&#x27;</span>]</span><br><span class="line">        types.<span class="title function_">forEach</span>(<span class="function"><span class="params">type</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> rule = config.<span class="property">module</span>.<span class="title function_">rule</span>(<span class="string">&#x27;less&#x27;</span>).<span class="title function_">oneOf</span>(type)</span><br><span class="line">            rule.<span class="title function_">use</span>(<span class="string">&#x27;style-resource&#x27;</span>)</span><br><span class="line">                .<span class="title function_">loader</span>(<span class="string">&#x27;style-resources-loader&#x27;</span>)</span><br><span class="line">                .<span class="title function_">options</span>(&#123;</span><br><span class="line">                    <span class="attr">patterns</span>: [path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;./lessVariates.less&#x27;</span>)],</span><br><span class="line">                &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        config.<span class="property">resolve</span>.<span class="property">alias</span></span><br><span class="line">            .<span class="title function_">set</span>(<span class="string">&#x27;@&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src&#x27;</span>))</span><br><span class="line">            .<span class="title function_">set</span>(<span class="string">&#x27;api&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src/apis&#x27;</span>))</span><br><span class="line">            .<span class="title function_">set</span>(<span class="string">&#x27;common&#x27;</span>, <span class="title function_">resolve</span>(<span class="string">&#x27;src/common&#x27;</span>))</span><br><span class="line">        config.<span class="property">module</span></span><br><span class="line">            .<span class="title function_">rule</span>(<span class="string">&#x27;images&#x27;</span>)</span><br><span class="line">            .<span class="title function_">use</span>(<span class="string">&#x27;url-loader&#x27;</span>)</span><br><span class="line">            .<span class="title function_">tap</span>(<span class="function"><span class="params">options</span> =&gt;</span> (&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;./assets/images/[name].[ext]&#x27;</span>,</span><br><span class="line">                <span class="attr">quality</span>: <span class="number">85</span>,</span><br><span class="line">                <span class="attr">limit</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">esModule</span>: <span class="literal">false</span>,</span><br><span class="line">            &#125;))</span><br><span class="line">        config.<span class="property">module</span></span><br><span class="line">            .<span class="title function_">rule</span>(<span class="string">&#x27;svg&#x27;</span>)</span><br><span class="line">            .<span class="title function_">test</span>(<span class="regexp">/.svg$/</span>)</span><br><span class="line">            .<span class="property">include</span>.<span class="title function_">add</span>(<span class="title function_">resolve</span>(<span class="string">&#x27;src/svg&#x27;</span>))</span><br><span class="line">            .<span class="title function_">end</span>()</span><br><span class="line">            .<span class="title function_">use</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">            .<span class="title function_">loader</span>(<span class="string">&#x27;svg-sprite-loader&#x27;</span>)</span><br><span class="line">        config.<span class="title function_">plugin</span>(<span class="string">&#x27;define&#x27;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> [</span><br><span class="line">            &#123;</span><br><span class="line">                ...args,</span><br><span class="line">                <span class="string">&#x27;window.isDefine&#x27;</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="literal">true</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">        ])</span><br><span class="line">        <span class="comment">// 生产环境配置</span></span><br><span class="line">        <span class="keyword">if</span> (process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&#x27;production&#x27;</span>) &#123;</span><br><span class="line">            config.<span class="property">output</span>.<span class="title function_">filename</span>(<span class="string">&#x27;./js/[name].[chunkhash:8].js&#x27;</span>)</span><br><span class="line">            config.<span class="property">output</span>.<span class="title function_">chunkFilename</span>(<span class="string">&#x27;./js/[name].[chunkhash:8].js&#x27;</span>)</span><br><span class="line">            config.<span class="title function_">plugin</span>(<span class="string">&#x27;extract-css&#x27;</span>).<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> [</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="attr">filename</span>: <span class="string">&#x27;css/[name].[contenthash:8].css&#x27;</span>,</span><br><span class="line">                    <span class="attr">chunkFilename</span>: <span class="string">&#x27;css/[name].[contenthash:8].css&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            ])</span><br><span class="line">            config.<span class="title function_">plugin</span>(<span class="string">&#x27;hotHash&#x27;</span>).<span class="title function_">use</span>(<span class="title class_">HotHashWebpackPlugin</span>, [&#123; <span class="attr">version</span>: <span class="string">&#x27;1.0.0&#x27;</span> &#125;])</span><br><span class="line">            config.<span class="title function_">plugin</span>(<span class="string">&#x27;webpackBar&#x27;</span>).<span class="title function_">use</span>(<span class="title class_">WebpackBar</span>)</span><br><span class="line">            config.<span class="property">optimization</span></span><br><span class="line">                .<span class="title function_">minimize</span>(<span class="literal">true</span>)</span><br><span class="line">                .<span class="title function_">minimizer</span>(<span class="string">&#x27;terser&#x27;</span>)</span><br><span class="line">                .<span class="title function_">tap</span>(<span class="function"><span class="params">args</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">let</span> &#123; terserOptions &#125; = args[<span class="number">0</span>]</span><br><span class="line">                    terserOptions.<span class="property">compress</span>.<span class="property">drop_console</span> = <span class="literal">true</span></span><br><span class="line">                    terserOptions.<span class="property">compress</span>.<span class="property">drop_debugger</span> = <span class="literal">true</span></span><br><span class="line">                    <span class="keyword">return</span> args</span><br><span class="line">                &#125;)</span><br><span class="line">            config.<span class="property">optimization</span>.<span class="title function_">splitChunks</span>(&#123;</span><br><span class="line">                <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">                    <span class="attr">common</span>: &#123;</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;common&#x27;</span>,</span><br><span class="line">                        <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">                        <span class="attr">minSize</span>: <span class="number">1</span>,</span><br><span class="line">                        <span class="attr">minChunks</span>: <span class="number">2</span>,</span><br><span class="line">                        <span class="attr">priority</span>: <span class="number">1</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                    <span class="attr">vendor</span>: &#123;</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;chunk-libs&#x27;</span>,</span><br><span class="line">                        <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">                        <span class="attr">test</span>: <span class="regexp">/[\/]node_modules[\/]/</span>,</span><br><span class="line">                        <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">                    &#125;,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="详细的配置"><a href="#详细的配置" class="headerlink" title="详细的配置"></a>详细的配置</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    根据Vue Cli配置的一些常用配置项, 具体参考(https://cli.vuejs.org/zh/config/#pages)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">productionSourceMap</span>: <span class="literal">false</span>, <span class="comment">// 生成环境是否开启SourceMap(source map的作用就是定位。source map定位的时浏览器控制台输出语句在项目文件的位置。)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">filenameHashing</span>: <span class="literal">false</span>, <span class="comment">// build之后生成的静态资源默认情况下加了hash值以控制静态资源的缓存，默认是true</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">publicPath</span>: <span class="string">&#x27;./&#x27;</span>, <span class="comment">// 部署应用包时的基本 URL(可以通过三元运算去配置dev和prod环境, publicPath: process.env.NODE_ENV === &#x27;production&#x27; ? &#x27;/prod/&#x27; : &#x27;./&#x27;)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">indexPath</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="comment">// 指定生成的 index.html 的输出路径 (相对于 outputDir)。也可以是一个绝对路径。</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">outputDir</span>: <span class="string">&#x27;dist&#x27;</span>, <span class="comment">// 打包输出文件目录</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">assetsDir</span>: <span class="string">&#x27;assets&#x27;</span>, <span class="comment">// 放置静态文件夹目录</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">lintOnSave</span>: <span class="literal">true</span>, <span class="comment">// 是否在开发环境下通过 eslint-loader 在每次保存时 lint 代码。这个值会在 @vue/cli-plugin-eslint 被安装之后生效。</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">runtimeCompiler</span>: <span class="literal">true</span>, <span class="comment">// 是否使用包含运行时编译器的 Vue 构建版本</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">transpileDependencies</span>: [], <span class="comment">// Babel 显式转译列表</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">crossorigin</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 设置生成的 HTML 中 &lt;link rel=&quot;stylesheet&quot;&gt; 和 &lt;script&gt; 标签的 crossorigin 属性（注：仅影响构建时注入的标签）</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">integrity</span>: <span class="literal">false</span>, <span class="comment">// 在生成的 HTML 中的 &lt;link rel=&quot;stylesheet&quot;&gt; 和 &lt;script&gt; 标签上启用 Subresource Integrity (SRI)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        如果这个值是一个对象，则会通过 webpack-merge 合并到最终的配置中 </span></span><br><span class="line"><span class="comment">        如果你需要基于环境有条件地配置行为，或者想要直接修改配置，那就换成一个函数 (该函数会在环境变量被设置之后懒执行)。该方法的第一个参数会收到已经解析好的配置。在函数内，你可以直接修改配置，或者返回一个将会被合并的对象</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">configureWebpack</span>: &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">chainWebpack</span>: <span class="function">() =&gt;</span> &#123;&#125;, <span class="comment">// 对内部的 webpack 配置（比如修改、增加Loader选项）(链式操作)</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">pages</span>: &#123;</span><br><span class="line">        <span class="comment">// 构建多页面应用，页面的配置</span></span><br><span class="line">        <span class="attr">index</span>: &#123;</span><br><span class="line">            <span class="attr">entry</span>: <span class="string">&#x27;src/index/main.js&#x27;</span>, <span class="comment">// page 的入口</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;public/index.html&#x27;</span>, <span class="comment">// 模板来源</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span>, <span class="comment">// 在 dist/index.html 的输出</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Index Page&#x27;</span>, <span class="comment">// 当使用 title 选项时， template 中的 title 标签需要是 &lt;title&gt;&lt;%= htmlWebpackPlugin.options.title %&gt;&lt;/title&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="attr">chunks</span>: [<span class="string">&#x27;chunk-vendors&#x27;</span>, <span class="string">&#x27;chunk-common&#x27;</span>, <span class="string">&#x27;index&#x27;</span>], <span class="comment">// 在这个页面中包含的块，默认情况下会包含 提取出来的通用 chunk 和 vendor chunk。</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            当使用只有入口的字符串格式时，</span></span><br><span class="line"><span class="comment">            模板会被推导为 `public/subpage.html`</span></span><br><span class="line"><span class="comment">            并且如果找不到的话，就回退到 `public/index.html`。</span></span><br><span class="line"><span class="comment">            输出文件名会被推导为 `subpage.html`。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="attr">subpage</span>: <span class="string">&#x27;src/subpage/main.js&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="comment">// dev环境  NodeJs架设临时的服务器用于项目的运行与调试</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否运行好直接在默认浏览器打开</span></span><br><span class="line">        <span class="attr">inline</span>: <span class="literal">true</span>, <span class="comment">// 用于设置代码保存时是否自动刷新页面。</span></span><br><span class="line">        <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 用于设置代码保存时是否进行热更新（局部刷新，不刷新整个页面）。</span></span><br><span class="line">        <span class="attr">openPage</span>: <span class="string">&#x27;default/index&#x27;</span>, <span class="comment">//指定deserver 编译完成后自动打开的页面 (注意：需要配合 open来使用。如果Vue router 为 hash mode。应在url前面补上/#。如：openPage: &#x27;/#/about&#x27;)</span></span><br><span class="line">        <span class="attr">https</span>: <span class="literal">false</span>, <span class="comment">// 用于设置是否启用https</span></span><br><span class="line">        <span class="attr">port</span>: <span class="number">8024</span>, <span class="comment">// 指定要监听请求的端口号</span></span><br><span class="line">        <span class="attr">host</span>: <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="comment">// 用于指定devDerve使用的host</span></span><br><span class="line">        <span class="attr">compress</span>: <span class="literal">true</span>, <span class="comment">// 对devServer 所有服务启用 gzip 压缩</span></span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="comment">// 在所有响应中添加首部内容</span></span><br><span class="line">            <span class="string">&#x27;X-Custom-Foo&#x27;</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">/* 当出现编译器错误或警告时，在浏览器中显示全屏覆盖层。默认禁用。两种写法*/</span></span><br><span class="line">        <span class="comment">// overlay: true, // 第一种</span></span><br><span class="line">        <span class="attr">overlay</span>: &#123;</span><br><span class="line">            <span class="comment">// 第二种</span></span><br><span class="line">            <span class="attr">warnings</span>: <span class="literal">true</span>, <span class="comment">// 警告</span></span><br><span class="line">            <span class="attr">errors</span>: <span class="literal">true</span>, <span class="comment">// 错误</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">proxy</span>: &#123;</span><br><span class="line">            <span class="comment">// proxy:&#123;&#x27;/api&#x27;:&#123;&#125;&#125;,代理器中设置/api,项目中请求路径为/api的替换为target</span></span><br><span class="line">            <span class="string">&#x27;/api&#x27;</span>: &#123;</span><br><span class="line">                <span class="attr">target</span>: <span class="string">&#x27;http://127.0.0.10:3000&#x27;</span>, <span class="comment">// 代理的服务器，也就是api要访问的服务器</span></span><br><span class="line">                <span class="attr">ws</span>: <span class="literal">true</span>, <span class="comment">// 是否代理websocket,</span></span><br><span class="line">                <span class="attr">secure</span>: <span class="literal">false</span>, <span class="comment">// 是否使用HTTPS协议, 默认false</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>, <span class="comment">// 将主机头的来源更改为目标URL，也就是是否允许跨域</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;, <span class="comment">// 重写url的path部分</span></span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                    pathRewrite详解</span></span><br><span class="line"><span class="comment">                    现在这样两个 api:</span></span><br><span class="line"><span class="comment">                    (1): http://localhost:80/api/login</span></span><br><span class="line"><span class="comment">                    (2): /api/login</span></span><br><span class="line"><span class="comment">                    devServe.proxy 会匹配第二个，因为第二个以/api开头，而第一个以http开头。</span></span><br><span class="line"><span class="comment">                    再例如有这样的 api：/getUserInfo，其所在的服务器为http://192.168.0.169。那这个 api 的url 就应该是http://192.168.0.169/getUserInfo。</span></span><br><span class="line"><span class="comment">                    然后在 axios 配置的 route 是 /api/getUserinfo。</span></span><br><span class="line"><span class="comment">                    这样配置之后，devServer.proxy 就能把 url 改写成http://192.168.0.169/getUserInfo</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">css</span>: &#123;</span><br><span class="line">        <span class="attr">extract</span>: <span class="literal">false</span>, <span class="comment">// 是否使用css分离插件 ExtractTextPlugin  开启extract后，组件样式以内部样式表的形式加载的, 打包的结果会多出一个 css 文件夹以及css 文件。</span></span><br><span class="line">        <span class="attr">sourceMap</span>: <span class="literal">true</span>, <span class="comment">// 开启 CSS source maps?</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 因为配置了loaderOptions.css, 尽管requireModuleExtension的值为默认值，我们也需要指出</span></span><br><span class="line">        <span class="attr">requireModuleExtension</span>: <span class="literal">true</span>, <span class="comment">// 用于设定，是否只有 *.module.[ext] 结尾的文件才会被视作CSS Modules 模块。 默认情况下，只有文件名中含有.modules的CSS相关文件还能使用CSS Modules。</span></span><br><span class="line">        <span class="attr">loaderOptions</span>: &#123;</span><br><span class="line">            <span class="comment">//用于向 CSS 相关的 loader 传递选项（设置）。</span></span><br><span class="line">            <span class="comment">/* </span></span><br><span class="line"><span class="comment">               注意：以下配置在 Vue CLI v4 与 v3 之间存在差异。</span></span><br><span class="line"><span class="comment">               Vue CLI v3 用户可参考 css-loader v1 文档</span></span><br><span class="line"><span class="comment">               https://github.com/webpack-contrib/css-loader/tree/v1.0.1 </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="attr">css</span>: &#123;</span><br><span class="line">                <span class="comment">// 配置 CSS Modules 的class命名规则</span></span><br><span class="line">                <span class="attr">modules</span>: &#123;</span><br><span class="line">                    <span class="attr">localIdentName</span>: <span class="string">&#x27;[local]_[hash:base64:8]&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">postcss</span>: &#123;</span><br><span class="line">                <span class="comment">// 这里的选项会传递给 postcss-loader</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">sass</span>: &#123;</span><br><span class="line">                <span class="comment">// @/ 是 src/ 的别名 所以这里假设你有 `src/variables.sass` 这个文件 (注意：在 sass-loader v7 中，这个选项名是 &quot;data&quot;)</span></span><br><span class="line">                <span class="attr">prependData</span>: <span class="string">`@import &quot;~@/variables.sass&quot;`</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">                默认情况下 `sass` 选项会同时对 `sass` 和 `scss` 语法同时生效, 因为 `scss` 语法在内部也是由 sass-loader 处理的;</span></span><br><span class="line"><span class="comment">                但是在配置 `data` 选项的时候, `scss` 语法会要求语句结尾必须有分号，`sass` 则要求必须没有分号 在这种情况下，我们可以使用 `scss` 选项，对 `scss` 语法进行单独配置</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="attr">scss</span>: &#123;</span><br><span class="line">                <span class="attr">prependData</span>: <span class="string">`@import &quot;~@/variables.scss&quot;;`</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">less</span>: &#123;</span><br><span class="line">                <span class="comment">// 给 less-loader 传递 Less.js 相关选项</span></span><br><span class="line">                <span class="comment">// http://lesscss.org/usage/#less-options-strict-units `Global Variables`</span></span><br><span class="line">                <span class="comment">// `primary` is global variables fields name</span></span><br><span class="line">                <span class="attr">globalVars</span>: &#123;</span><br><span class="line">                    <span class="attr">primary</span>: <span class="string">&#x27;#fff&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">parallel</span>: <span class="built_in">require</span>(<span class="string">&#x27;os&#x27;</span>).<span class="title function_">cpus</span>().<span class="property">length</span> &gt; <span class="number">1</span>, <span class="comment">// 是否为 Babel 或 TypeScript 使用 thread-loader</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">pwa</span>: &#123;&#125;, <span class="comment">// 向 PWA 插件传递选项</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">pluginOptions</span>: &#123;&#125;, <span class="comment">// 可以用来传递任何第三方插件选项</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>富文本编辑器</title>
      <link href="/posts/1791.html"/>
      <url>/posts/1791.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="富文本编辑器TinyMce"><a href="#富文本编辑器TinyMce" class="headerlink" title="富文本编辑器TinyMce"></a>富文本编辑器TinyMce</h1><blockquote><p><a href="https://gitee.com/xiaodao/tinymce_powerpaste">引用</a></p><p>之前项目中有个需求，需要从word中粘贴内容到富文本编辑器里，但是图片并不能正常的显示</p><p>踩过很多坑之后，总结出<code>tinymce</code> + <code>powerpaste</code> 可以完美解决 但是官方的<code>powerpaste</code>需要收费，那我就找来了免费的资源</p></blockquote><ul><li><p>注意：npm下载的tinymce不可以，必须从官网下载tinymce</p><ul><li><p>下载地址：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.tiny.cloud%2Fget-tiny%2Fself-hosted%2F">https://www.tiny.cloud/get-tiny/self-hosted/</a></p></li><li><p>语言包下载：<a href="https://gitee.com/link?target=https%3A%2F%2Fwww.tiny.cloud%2Fget-tiny%2Flanguage-packages%2F">https://www.tiny.cloud/get-tiny/language-packages/</a></p></li></ul></li></ul><blockquote><p>tinymce 大版本4，对应powerpaste-3.3.3-308,</p><p>大版本5对应4.0.1-317 &gt;&gt;&gt; powerpaste-4.0.1-317（兼容tinymce5.2.0) 版本再高还没测试过</p><p>附带下载地址：<a href="https://www.aliyundrive.com/s/KPmUsuWYk9P">https://www.aliyundrive.com/s/KPmUsuWYk9P</a></p></blockquote><h5 id="案例为Vue3"><a href="#案例为Vue3" class="headerlink" title="案例为Vue3"></a>案例为Vue3</h5><ul><li>将powerpaste放入tinymce模块的public文件夹下。放进去后的tinymce文件夹长这样</li></ul><p><a href="https://imgse.com/i/zn5xJS"><img src="https://s1.ax1x.com/2022/11/18/zn5xJS.png" alt="文件目录"></a></p><ul><li>然后再<code>index.html</code>中引入<code>tinymce.min.js</code></li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/tinymce/js/tinymce/tinymce.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>将powerpaste文件夹复制到<code>tinymce/js/tinymce/plugins</code>中</li></ul><p><a href="https://imgse.com/i/zn7BwR"><img src="https://s1.ax1x.com/2022/11/18/zn7BwR.png" alt="zn7BwR.png"></a></p><h4 id="附带自己封装的组件（Vue3版本）"><a href="#附带自己封装的组件（Vue3版本）" class="headerlink" title="附带自己封装的组件（Vue3版本）"></a>附带自己封装的组件（Vue3版本）</h4><ul><li>父组件</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tiny-mce</span> <span class="attr">:age</span>=<span class="string">&quot;contents&quot;</span> @<span class="attr">updContent</span>=<span class="string">&quot;updContent&quot;</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">tiny-mce</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">setup</span> <span class="attr">lang</span>=<span class="string">&quot;ts&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">import</span> <span class="title class_">TinyMce</span> <span class="keyword">from</span> <span class="string">&quot;/@/components/TinyMce/index.vue&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> contents = <span class="title function_">ref</span>(<span class="string">&quot;&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> <span class="title function_">updContent</span> = (<span class="params">e:any</span>) =&gt;&#123;</span></span><br><span class="line"><span class="language-javascript">    contents.<span class="property">value</span> = e.<span class="property">content</span>;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>TinyMce/index.vue</li></ul><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tinymce-boxz&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Editor</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:init</span>=<span class="string">&quot;init&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--   可以绑定APIKey 可以在官网注册 当然 是免费的   --&gt;</span></span><br><span class="line">        &lt;- <span class="tag">&lt;<span class="name">Editor</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span> <span class="attr">:api-key</span>=<span class="string">&quot;apiKey&quot;</span> <span class="attr">:init</span>=<span class="string">&quot;init&quot;</span> /&gt;</span> -&gt;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">Editor</span> <span class="keyword">from</span> <span class="string">&#x27;@tinymce/tinymce-vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> &#123; reactive, ref, toRefs, watch &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;tinyMce&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title class_">Editor</span>,</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: [<span class="string">&quot;age&quot;</span>],</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">setup</span>(<span class="params">props, &#123;emit&#125;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> content = <span class="title function_">ref</span>(props.<span class="property">age</span>);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> tiny = <span class="title function_">reactive</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// apiKey: &quot;qagffr3pkuv17a8on1afax661irst1hbr4e6tbv888sz91jc&quot;, //https://github.com/tinymce/tinymce-vue/blob/main/src/demo/views/Iframe.vue</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">init</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">language</span>: <span class="string">&#x27;zh_CN&#x27;</span>, <span class="comment">//语言类型</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">placeholder</span>: <span class="string">&#x27;请输入......&#x27;</span>, <span class="comment">//textarea中的提示信息</span></span></span><br><span class="line"><span class="language-javascript">                auto_focus : <span class="literal">true</span>, <span class="comment">// 自动获取焦点</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">min_height</span>: <span class="number">220</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// height: 500, //注：引入autoresize插件时，此属性失效</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">resize</span>: <span class="string">&#x27;true&#x27;</span>, <span class="comment">//编辑器宽高是否可变，false-否,true-高可变，&#x27;both&#x27;-宽高均可，注意引号</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">branding</span>: <span class="literal">false</span>, <span class="comment">//tiny技术支持信息是否显示</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// statusbar: false,  //最下方的元素路径和字数统计那一栏是否显示</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">elementpath</span>: <span class="literal">false</span>, <span class="comment">//元素路径是否显示</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">font_formats</span>:</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;微软雅黑=Microsoft YaHei,Helvetica Neue,PingFang SC,sans-serif;苹果苹方=PingFang SC,Microsoft YaHei,sans-serif;宋体=simsun,serif;仿宋体=FangSong,serif;黑体=SimHei,sans-serif;Arial=arial,helvetica,sans-serif;Arial Black=arial black,avant garde;Book Antiqua=book antiqua,palatino;&#x27;</span>, <span class="comment">//字体样式</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">plugins</span>:</span></span><br><span class="line"><span class="language-javascript">                    <span class="string">&#x27;powerpaste autoresize print preview searchreplace autolink directionality visualblocks visualchars fullscreen image link media template code codesample table charmap hr pagebreak nonbreaking anchor insertdatetime advlist lists wordcount textpattern autosave emoticons&#x27;</span>, <span class="comment">//插件配置 axupimgs indent2em</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">/*// 工具栏</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                toolbar: [</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#x27;fullscreen undo redo restoredraft | &#x27; +</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#x27;cut copy paste pastetext | &#x27; +</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#x27;forecolor backcolor bold italic underline strikethrough link anchor | &#x27; +</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#x27;alignleft aligncenter alignright alignjustify outdent indent | &#x27; +</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#x27;bullist numlist | &#x27; +</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &#x27;blockquote subscript superscript removeformat &#x27;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &quot;styleselect formatselect fontselect fontsizeselect |  &quot; +</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &quot;table image axupimgs media emoticons charmap hr pagebreak insertdatetime  selectall visualblocks searchreplace | &quot; +</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &quot;code print preview | &quot; +</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                    &quot;indent2em lineheight formatpainter&quot;,</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                ],</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                // 工具栏配置，设为false则隐藏</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">                // menubar: &quot;file edit my1&quot;, //菜单栏配置，设为false则隐藏，不配置则默认显示全部菜单，也可自定义配置--查看 http://tinymce.ax-z.cn/configure/editor-appearance.php --搜索“自定义菜单”*/</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">menubar</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">toolbar</span>: <span class="string">&quot;undo redo | fullscreen | formatselect alignleft aligncenter alignright alignjustify | link unlink | numlist bullist | image media table | fontselect fontsizeselect forecolor backcolor | bold italic underline strikethrough | indent outdent | superscript subscript | removeformat |&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">toolbar_drawer</span>: <span class="string">&quot;sliding&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// images_upload_url: &#x27;/apib/api-upload/uploadimg&#x27;,  //后端处理程序的url，建议直接自定义上传函数image_upload_handler，这个就可以不用了</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// images_upload_base_path: &#x27;/demo&#x27;,  //相对基本路径--关于图片上传建议查看--http://tinymce.ax-z.cn/general/upload-images.php</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">paste_data_images</span>: <span class="literal">true</span>, <span class="comment">//图片是否可粘贴</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//此处为图片上传处理函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">images_upload_handler</span>: <span class="function">(<span class="params">blobInfo, success</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 这里用base64的图片形式上传图片,</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>(); <span class="comment">//本地预览</span></span></span><br><span class="line"><span class="language-javascript">                    reader.<span class="title function_">readAsDataURL</span>(blobInfo.<span class="title function_">blob</span>());</span></span><br><span class="line"><span class="language-javascript">                    reader.<span class="property">onloadend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">const</span> imgbase64 = reader.<span class="property">result</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="title function_">success</span>(imgbase64);</span></span><br><span class="line"><span class="language-javascript">                    &#125;;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">file_picker_types</span>: <span class="string">&#x27;file image media&#x27;</span>, <span class="comment">//file image media分别对应三个类型文件的上传：link插件，image和axupimgs插件，media插件。想屏蔽某个插件的上传就去掉对应的参数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 文件上传处理函数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">file_picker_callback</span>: <span class="keyword">function</span> (<span class="params">callback, value, meta</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 使用案例http://tinymce.ax-z.cn/general/upload-images.php</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// meta.filetype  //根据这个判断点击的是什么file image media</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> filetype; <span class="comment">//限制文件的上传类型,需要什么就添加什么的后缀</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (meta.<span class="property">filetype</span> == <span class="string">&#x27;image&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        filetype = <span class="string">&#x27;.jpg, .jpeg, .png, .gif, .ico, .svg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (meta.<span class="property">filetype</span> == <span class="string">&#x27;media&#x27;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        filetype = <span class="string">&#x27;.mp3, .mp4, .avi, .mov&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        filetype = <span class="string">&#x27;.pdf555, .txt, .zip, .rar, .7z, .doc, .docx, .xls, .xlsx, .ppt, .pptx, .mp3, .mp4, .jpg, .jpeg, .png, .gif, .ico, .svg&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> inputElem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;input&#x27;</span>); <span class="comment">//创建文件选择</span></span></span><br><span class="line"><span class="language-javascript">                    inputElem.<span class="title function_">setAttribute</span>(<span class="string">&#x27;type&#x27;</span>, <span class="string">&#x27;file&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">                    inputElem.<span class="title function_">setAttribute</span>(<span class="string">&#x27;accept&#x27;</span>, filetype);</span></span><br><span class="line"><span class="language-javascript">                    inputElem.<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript">                    inputElem.<span class="property">onchange</span> = <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> file = inputElem.<span class="property">files</span>[<span class="number">0</span>]; <span class="comment">//获取文件信息</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        <span class="comment">// 所有都转成base64文件流,来自官方文档 https://www.tiny.cloud/docs/configure/file-image-upload/#file_picker_callback</span></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span></span><br><span class="line"><span class="language-javascript">                        reader.<span class="title function_">readAsDataURL</span>(file);</span></span><br><span class="line"><span class="language-javascript">                        reader.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// Note: Now we need to register the blob in TinyMCEs image blob</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// registry. In the next release this part hopefully won&#x27;t be</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// necessary, as we are looking to handle it internally.</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">let</span> id = <span class="string">&#x27;blobid&#x27;</span> + <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>();</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">let</span> blobCache = tinymce.<span class="property">activeEditor</span>.<span class="property">editorUpload</span>.<span class="property">blobCache</span>;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">let</span> base64 = reader.<span class="property">result</span>.<span class="title function_">split</span>(<span class="string">&#x27;,&#x27;</span>)[<span class="number">1</span>];</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">let</span> blobInfo = blobCache.<span class="title function_">create</span>(id, file, base64);</span></span><br><span class="line"><span class="language-javascript">                            blobCache.<span class="title function_">add</span>(blobInfo);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                            <span class="comment">// call the callback and populate the Title field with the file name</span></span></span><br><span class="line"><span class="language-javascript">                            <span class="title function_">callback</span>(blobInfo.<span class="title function_">blobUri</span>(), &#123;<span class="attr">title</span>: file.<span class="property">name</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">                        &#125;;</span></span><br><span class="line"><span class="language-javascript">                    &#125;;</span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 添加word复制粘贴扩展插件</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">external_plugins</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">powerpaste</span>: <span class="string">&#x27;/tinymce/js/tinymce/plugins/powerpaste/powerpaste/plugin.min.js&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                <span class="attr">powerpaste_word_import</span>: <span class="string">&#x27;merge&#x27;</span>, <span class="comment">// 参数可以是propmt, merge, clear，效果自行切换对比</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">powerpaste_html_import</span>: <span class="string">&#x27;merge&#x27;</span>, <span class="comment">// propmt, merge, clear</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">powerpaste_allow_local_images</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;,</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title function_">toFather</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">emit</span>(<span class="string">&#x27;updContent&#x27;</span>, &#123;<span class="attr">content</span>: content.<span class="property">value</span>&#125;);</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">watch</span>(</span></span><br><span class="line"><span class="language-javascript">            <span class="function">() =&gt;</span> content.<span class="property">value</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="title function_">toFather</span>();</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        );</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> <span class="title function_">eliminate</span> = (<span class="params"></span>) =&gt; &#123;</span></span><br><span class="line"><span class="language-javascript">            content.<span class="property">value</span> = <span class="string">&#x27;&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            content,</span></span><br><span class="line"><span class="language-javascript">            eliminate,</span></span><br><span class="line"><span class="language-javascript">            ...<span class="title function_">toRefs</span>(tiny),</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">&#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tinymce-boxz</span> &gt; <span class="selector-tag">textarea</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 隐藏apikey没有绑定当前域名的提示 */</span></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tox-notifications-container</span> <span class="selector-class">.tox-notification--warning</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">display</span>: none <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.tox</span><span class="selector-class">.tox-tinymce</span> &#123;</span></span><br><span class="line"><span class="language-css">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Javascript 注释规范</title>
      <link href="/posts/36878.html"/>
      <url>/posts/36878.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Javascript-代码注释规范"><a href="#Javascript-代码注释规范" class="headerlink" title="Javascript 代码注释规范"></a>Javascript 代码注释规范</h3><h4 id="一、语法"><a href="#一、语法" class="headerlink" title="一、语法"></a>一、语法</h4><ol><li>注释的说明<br>语法：写在注释块第一行<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * events-function(这是注释的说明)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span> 切换音频播放状态（播放/停止）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="attr">togglePlay</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 省略其它代码...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>标签<br>语法：@tagName</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** <span class="doctag">@function</span> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>标签的说明<br>语法：- 说明文字</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span> <span class="variable">Student</span> - 学生</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">name</span> - 学生的名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params">name</span>) &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ol><li>类型<br>语法：{typeName} (可与标签结合使用，如@param)</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; a 必传参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b, c</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>可选参数<br>语法：[paramName] (可与标签结合使用，如@param)</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; a 必传参数</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; [b] 可选参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>参数有默认值<br>语法：[paramName=value] (可与标签结合使用，如@param)</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; a 必传参数</span></span><br><span class="line"><span class="comment"> *  <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; [c=666] 参数有默认值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">a, c</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>链接<br>语法：[link text]{@link namepathOrURL}</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * See &#123;<span class="doctag">@link</span> MyClass&#125; and [MyClass&#x27;s foo property]&#123;<span class="doctag">@link</span> MyClass#foo&#125;.</span></span><br><span class="line"><span class="comment"> * Also, check out &#123;<span class="doctag">@link</span> http://www.google.com|Google&#125; and</span></span><br><span class="line"><span class="comment"> * &#123;<span class="doctag">@link</span> https://github.com GitHub&#125;.</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h4 id="二、示例"><a href="#二、示例" class="headerlink" title="二、示例"></a>二、示例</h4><ol><li>函数</li></ol><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 转换时间字符串为时间对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@function</span> <span class="variable">_str2time</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> strTime &#123;String&#125; - e.g &quot;2017-02-13 10:02:58&quot; or &quot;2017-02-13&quot; or &quot;9:10&quot;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> type &#123;String&#125; - e.g date, dateTime, time</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">_str2time</span>(<span class="params">strTime, type</span>) &#123;</span><br><span class="line">    <span class="comment">// 省略其它代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>类/构造函数<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定时器</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@class</span> <span class="variable">Timer</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Timer</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_timeId</span> = <span class="number">0</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_eventId</span> = -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventHandler</span> = &#123;</span><br><span class="line">        <span class="string">&#x27;stop&#x27;</span>: &#123;&#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 定时器是否处于停止状态</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@memberof</span> <span class="variable">Timer</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@member</span> <span class="variable">stopped</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@instance</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stopped</span> = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启动定时器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@memberof</span> <span class="variable">Timer</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@instance</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> <span class="variable">start</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; <span class="variable">handler</span> - 定时器每次执行时调用的函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; <span class="variable">interval</span> - 定时器执行的时间间隔</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">start</span> = <span class="keyword">function</span> (<span class="params">handler, interval</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stopped</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">let</span> _recursion = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">_timeId</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">handler</span>()</span><br><span class="line">                    .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">stopped</span>) &#123;</span><br><span class="line">                            <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">_timeId</span>);</span><br><span class="line">                            <span class="variable language_">this</span>.<span class="title function_">_trigger</span>(<span class="string">&#x27;stop&#x27;</span>);</span><br><span class="line">                            <span class="keyword">return</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="title function_">_recursion</span>();</span><br><span class="line">                    &#125;)</span><br><span class="line">                    .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                        <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">_timeId</span>);</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="property">stopped</span> = <span class="literal">true</span>;</span><br><span class="line">                        <span class="variable language_">this</span>.<span class="title function_">_trigger</span>(<span class="string">&#x27;stop&#x27;</span>);</span><br><span class="line">                        <span class="keyword">if</span> (err) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(err);</span><br><span class="line">                    &#125;);</span><br><span class="line">            &#125;, interval)</span><br><span class="line">        &#125;.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">        <span class="title function_">_recursion</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止定时器</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@memberof</span> <span class="variable">Timer</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@instance</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@method</span> <span class="variable">stop</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">stop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">stopped</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 监听事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">Timer</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@instance</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> <span class="variable">on</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">type</span> - 事件类型  e.g &#x27;stop&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; <span class="variable">fn</span> - 事件处理函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> &#123;<span class="type">number</span>&#125; <span class="variable">eventId</span> - 事件处理函数Id，用于取消监听</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Timer</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">on</span> = <span class="keyword">function</span> (<span class="params">type, fn</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _eventId = fn.<span class="property">name</span> || ++<span class="variable language_">this</span>.<span class="property">_eventId</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">eventHandler</span>[type][_eventId] = fn;</span><br><span class="line">    <span class="keyword">return</span> _eventId;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 触发事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@private</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Timer</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">_trigger</span> = <span class="keyword">function</span> (<span class="params">type</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> handlerMap = <span class="variable language_">this</span>.<span class="property">eventHandler</span>[type];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> handlerMap) &#123;</span><br><span class="line">        handlerMap[key]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 取消监听事件</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@memberof</span> <span class="variable">Timer</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@instance</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@method</span> <span class="variable">off</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">type</span> - 事件类型  e.g &#x27;stop&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">function</span>&#125; <span class="variable">target</span> - 事件处理函数Id或者函数名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="title class_">Timer</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">off</span> = <span class="keyword">function</span> (<span class="params">type, target</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> _target = (<span class="keyword">typeof</span> target === <span class="string">&#x27;function&#x27;</span>) ? target.<span class="property">name</span> : target;</span><br><span class="line">    <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">eventHandler</span>[type][_target];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端调试代码技巧</title>
      <link href="/posts/17557.html"/>
      <url>/posts/17557.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><ul><li>待完善</li></ul><p>寻求简单有效的debug方法，少走弯路，更高效的修改bug</p></blockquote><h4 id="1、setTimeout"><a href="#1、setTimeout" class="headerlink" title="1、setTimeout"></a>1、setTimeout</h4><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/settimeout-debug.gif" alt="悬浮DOM"></p><blockquote><p>在我们的代码中，可能会遇到鼠标悬浮出现提示，此时想要调试悬浮的DOM时会很困难，此时可以使用定时器去进行一个debug</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">debugger</span>;</span><br><span class="line">&#125;, <span class="number">3000</span>);</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/debugger.gif" alt="debugger"></p><h4 id="2、console"><a href="#2、console" class="headerlink" title="2、console"></a>2、console</h4><blockquote><p>开发中使用最多的<code>console</code></p></blockquote><h4 id="3、debugger"><a href="#3、debugger" class="headerlink" title="3、debugger"></a>3、debugger</h4><blockquote><ul><li><p>直接在代码中需要断点的地方，直接debugger即可，当JS执行到该语句时会自动暂停，页面会出现蒙层卡住，然后会自动跳转到debugger代码处，处于当前执行环境的数据鼠标移上，该数据会显示出来</p></li><li><p>当点击页面中的前进按钮时，就会跳转到下一个断点处，全部跳转完成后断点就会结束。</p></li></ul></blockquote><h4 id="4、浏览器断点-source断点"><a href="#4、浏览器断点-source断点" class="headerlink" title="4、浏览器断点(source断点)"></a>4、浏览器断点(source断点)</h4><p>可以直接在浏览器里断点，在行数的地方可以直接加上断点，F8可以直接跳转到下一个断点，F10可以单步骤调试，F11可以直接进入方法，也就相当于单步调试了。</p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/20221023151039.png" alt="source断点"></p><ul><li>从左到右，各个图标表示的功能分别为：<ul><li><code>Pause/Resume script execution（F8 或 Ctrl + \）</code>：暂停/恢复脚本执行（程序执行到下一断点停止）；</li><li><code>Step over next function call（F10 或 Ctrl + &#39;）</code>：执行到下一步的函数调用（跳到下一行）；</li><li><code>Step into next function call（F11 或 Ctrl + ;）</code>：进入当前函数；</li><li>Step out of current function（shift + F11 或 Ctrl + shift + ;）`：跳出当前执行函</li><li><code>Step（F9）</code>：跳到下一条执行语句；</li><li><code>Deactive/Active all breakpoints</code>: 关闭/开启所有断点（不会取消）；</li><li><code>Pause on exceptions</code>: 异常情况自动断点设置，浏览器会在程序发生异常的那一行设置断点，即当程序会在异常发生处暂停；</li></ul></li></ul><h4 id="5、浏览器控制台调试"><a href="#5、浏览器控制台调试" class="headerlink" title="5、浏览器控制台调试"></a>5、浏览器控制台调试</h4><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221023151519483.png" alt="浏览器控制台"></p><blockquote><p>浏览器控制台可以直接调试一些样式问题</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 小技巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何优雅处理 async await 错误</title>
      <link href="/posts/51281.html"/>
      <url>/posts/51281.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>借用 <code>await-to-js</code> 库<br><a href="https://github.com/scopsy/await-to-js">https://github.com/scopsy/await-to-js</a><br><a href="https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/">https://blog.grossman.io/how-to-write-async-await-without-try-catch-blocks-in-javascript/</a></p></blockquote><ul><li><p>之前处理异步请求时是这样的：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="title function_">asyncTask</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> asyncFuncARes = <span class="keyword">await</span> <span class="title function_">asyncFuncA</span>()</span><br><span class="line">    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> asyncFuncBRes = <span class="keyword">await</span> <span class="title function_">asyncFuncB</span>(asyncFuncARes)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> asyncFuncCRes = <span class="keyword">await</span> <span class="title function_">asyncFuncC</span>(asyncFuncBRes)</span><br><span class="line">    &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Error</span>(error)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用 <code>await-to-js</code> 后是这样的:</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> to <span class="keyword">from</span> <span class="string">&#x27;./to.js&#x27;</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="keyword">async</span> <span class="title function_">asyncTask</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">const</span> [err, asyncFuncARes]  = <span class="keyword">await</span> <span class="title function_">to</span>(<span class="title function_">asyncFuncA</span>())</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> (error);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [err, asyncFuncBRes]  = <span class="keyword">await</span> <span class="title function_">tp</span>(<span class="title function_">asyncFuncB</span>(asyncFuncARes))</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> (error);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> [err, asyncFuncCRes]  = <span class="keyword">await</span> <span class="title function_">to</span>(<span class="title function_">asyncFuncC</span>(asyncFuncBRes)</span><br><span class="line"><span class="keyword">if</span>(err) <span class="keyword">throw</span> <span class="keyword">new</span> (error);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h5 id="await-to-js-源码分析"><a href="#await-to-js-源码分析" class="headerlink" title="await-to-js 源码分析"></a><code>await-to-js</code> 源码分析</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">to</span>(<span class="params">promise, errorExt</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> [<span class="literal">null</span>, data])</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (errorExt) &#123;</span><br><span class="line">            <span class="keyword">const</span> parsedError = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, err, errorExt);</span><br><span class="line">            <span class="keyword">return</span> [parsedError, <span class="literal">undefined</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> [err, <span class="literal">undefined</span>];</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> to;</span><br></pre></td></tr></table></figure><p>这里我们先抛开errorExt这个自定义的错误文本,核心代码是这样的<br><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">to</span>(<span class="params">promise</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> promise</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">data</span>) =&gt;</span> [<span class="literal">null</span>, data]) <span class="comment">// 成功,返回[null,响应结果]</span></span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> [err, <span class="literal">undefined</span>]; <span class="comment">// 失败,返回[错误信息,undefined]</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> to;</span><br></pre></td></tr></table></figure><br>代码逻辑结论</p><ul><li><p>无论成功还是失败都返回一个数组,数组的第一项是和错误相关的,数组的第二项是和响应结果相关的</p></li><li><p>成功的话数组第一项也就是错误信息为空,数组第二项也就是响应结果正常返回</p></li><li><p>失败的话数组第一项也就是错误信息为错误信息,数组第二项也就是响应结果返回undefined</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> axios </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pdf预览</title>
      <link href="/posts/44377.html"/>
      <url>/posts/44377.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h3><blockquote><p><a href="https://www.cnblogs.com/songyaru/p/15078091.html">https://www.cnblogs.com/songyaru/p/15078091.html</a></p></blockquote><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><blockquote><p>不使用插件直接进行pdf预览时，对于小文件没有任何问题，但在预览一个305M，近400页的pdf文件，打开pdf直接拉到最后几页，会造成浏览器崩溃，于是尝试使用pdf.js的插件方式进行pdf预览，解决大文件浏览器崩溃的问题。</p></blockquote><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h6 id="1-下载pdfjs"><a href="#1-下载pdfjs" class="headerlink" title="1.下载pdfjs"></a>1.下载pdfjs</h6><blockquote><p>官网：<a href="http://mozilla.github.io/pdf.js/getting_started/#download">http://mozilla.github.io/pdf.js/getting_started/#download</a></p></blockquote><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221020153026258.png" alt="image-20221020153026258"></p><h6 id="2-拖入项目中"><a href="#2-拖入项目中" class="headerlink" title="2.拖入项目中"></a>2.拖入项目中</h6><p>将安装包放入中public文件夹下</p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221020153036289.png" alt="image-20221020153036289"></p><h6 id="3-页面中使用"><a href="#3-页面中使用" class="headerlink" title="3.页面中使用"></a>3.页面中使用</h6><p>（1）直接使用</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;/pdf/web/viewer.html?file=&#x27;</span> + path);<span class="comment">//path是文件的全路径地址</span></span><br></pre></td></tr></table></figure><p>（2）通过iframe新页面使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:src</span>=<span class="string">&quot;`pdf/web/viewer.html?file=$&#123;pdfUrl&#125;`&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;pdf-window&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">height</span>=<span class="string">&quot;100%&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">frameborder</span>=<span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="问题总结"><a href="#问题总结" class="headerlink" title="问题总结"></a>问题总结</h3><h6 id="1-解决跨域问题"><a href="#1-解决跨域问题" class="headerlink" title="1.解决跨域问题"></a>1.解决跨域问题</h6><p>报错：”file origin does not match viewer’s”</p><p>解决：直接注释掉web/viewer.js中的这几行，不去判断跨域即可</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// const fileOrigin = new URL(file, window.location.href).origin;</span></span><br><span class="line"><span class="comment">// if (fileOrigin !== viewerOrigin) &#123;</span></span><br><span class="line"><span class="comment">//   throw new Error(&quot;file origin does not match viewer&#x27;s&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h6 id="2-pdfjs身份认证"><a href="#2-pdfjs身份认证" class="headerlink" title="2.pdfjs身份认证"></a>2.pdfjs身份认证</h6><p>通过这种方式访问’/pdf/web/viewer.html?file=’+path，如何在请求后端pdf文档时，在请求头中加入token验证？</p><p>解决：找到build下的pdf.js文件，加上请求头token的设置代码即可</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> params = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line"><span class="keyword">var</span> rangeTransport = <span class="literal">null</span>,</span><br><span class="line">  worker = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加设置token代码</span></span><br><span class="line">params[<span class="string">&#x27;httpHeaders&#x27;</span>] = &#123;</span><br><span class="line">  <span class="string">&quot;Authentication&quot;</span>: <span class="variable language_">window</span>.<span class="property">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;TOKEN&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="3-去掉pdf预览顶部的下载等"><a href="#3-去掉pdf预览顶部的下载等" class="headerlink" title="3.去掉pdf预览顶部的下载等"></a>3.去掉pdf预览顶部的下载等</h6><p>解决：找到web下viewer.html文件，找到相对应的控制设置样式visibility:hidden即可</p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221020153049688.png" alt="image-20221020153049688"></p><h6 id="4-分段加载"><a href="#4-分段加载" class="headerlink" title="4.分段加载"></a>4.分段加载</h6><p>对于一些比较大的pdf文件，我们需要做到分段加载，否则会使界面卡死</p><p>解决：</p><p>（1）找到web下viewer.js，将disableAutoFetch、disableStream均改为true</p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221020153059956.png" alt="image-20221020153059956"></p><p>（2）找到build/pdf.js文件，寻找DEFAULT_RANGE_CHUNK_SIZE配置项，并修改为65536*16</p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221020153109185.png" alt="image-20221020153109185"></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="/posts/28439.html"/>
      <url>/posts/28439.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p><strong>首先，继承的是 属性 和 原型方法</strong></p></blockquote><h5 id="ES6-继承"><a href="#ES6-继承" class="headerlink" title="ES6 继承"></a>ES6 继承</h5><p>ES6：<a href="https://es6.ruanyifeng.com/#docs/class-extends">https://es6.ruanyifeng.com/#docs/class-extends</a></p><blockquote><p>Class 可以通过<code>extends</code>关键字实现继承，让子类继承父类的属性和方法</p><p>子类如果写 <code>constructor()</code>就必须要写 <code>super()</code>,且要写在最前面，否则报错，只有<code>super()</code>方法才能让子类实例继承父类。</p><p>:facepunch:ps: ES6 规定，子类必须在<code>constructor()</code>方法中调用<code>super()</code>，否则就会报错。这是因为子类自己的<code>this</code>对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，添加子类自己的实例属性和方法。如果不调用<code>super()</code>方法，子类就得不到自己的<code>this</code>对象。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">...</span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">color</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">super</span>.<span class="title function_">toString</span>(); <span class="comment">// 调用父类的toString()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ES5-继承"><a href="#ES5-继承" class="headerlink" title="ES5 继承"></a>ES5 继承</h5><blockquote><p>js 中有很多中继承的方式，不过每一种继承方式都有优缺点，重点掌握 ES5 继承，别的继承方式基本都是 ES5 继承的语法糖</p><p>先创造子类实例，通过<code>Parent.call(this, arg1, arg2...)</code>将父类的属性方法添加到<code>this</code>上，继承了父类的属性</p><p>再通过 <code>Son.prototype = Object.create( Father.prototype )</code>将父类的原型继承过来</p><p>最后可以通过<code>Son.prototype.constructor = Son</code> 将子类的原型指到子类身上</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;优秀的&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承的是 属性 和 原型方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Son.prototype = new Father() // 相互影响 会存在一个 &#123;name:undefined&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create 创造出一个空对象</span></span><br><span class="line"><span class="comment">// 让当前对象的__proto__ 指向传入的对象</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> father = <span class="keyword">new</span> <span class="title class_">Father</span>(<span class="string">&quot;Father&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;程序员&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="title function_">get</span>() + son.<span class="property">name</span>); <span class="comment">// 优秀的程序员</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>配置ESLint和Prettier</title>
      <link href="/posts/8990.html"/>
      <url>/posts/8990.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、为什么要使用-ESLint-和-Prettier"><a href="#1、为什么要使用-ESLint-和-Prettier" class="headerlink" title="1、为什么要使用 ESLint 和 Prettier"></a>1、为什么要使用 ESLint 和 Prettier</h4><blockquote><p>代码规范是软件开发领域经久不衰的话题，随着前端应用的大型化和复杂化，越来越多的前端团队开始重视 <code>JavaScript</code> 代码规范。不以规矩，不能成方圆</p></blockquote><h4 id="2、ESlint"><a href="#2、ESlint" class="headerlink" title="2、ESlint"></a>2、ESlint</h4><blockquote><p>如果项目目录下有多个配置文件，ESLint 只会使用一个，优先级为：<code>.eslintrc.js</code> &gt; <code>.eslintrc</code> &gt; <code>package.json</code></p></blockquote><h6 id="gt-安装-ESlint"><a href="#gt-安装-ESlint" class="headerlink" title="&gt; 安装 ESlint"></a>&gt; 安装 ESlint</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除原来的依赖</span></span><br><span class="line">npm rm @vue/cli-plugin-eslint @vue/eslint-config-prettier babel-eslint eslint eslint-plugin-prettier eslint-plugin-vue prettier</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装 依赖</span></span><br><span class="line">npm install @vue/cli-plugin-eslint@4.4.6 @vue/eslint-config-prettier@7.0.0 babel-eslint eslint@7.15.0 eslint-plugin-prettier@3.4.1 eslint-plugin-vue@7.2.0 prettier@2.5.1 --save-dev</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果安装报错</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--legacy-peer-deps：安装时忽略所有peerDependencies，忽视依赖冲突，采用npm版本4到版本6的样式去安装依赖，已有的依赖不会覆盖。建议用--legacy-peer-deps 比较保险一点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--force 会无视冲突，并强制获取远端npm库资源，当有资源冲突时覆盖掉原先的版本。</span></span><br><span class="line">npm install @vue/cli-plugin-eslint @vue/eslint-config-prettier babel-eslint eslint eslint-plugin-prettier eslint-plugin-vue prettier --save-dev --legacy-peer-deps</span><br></pre></td></tr></table></figure><p>在 package.json 文件中添加或替换 lint 命令</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint --fix --ext .js,.vue src/&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run lint # 需要进行一键修复的时候就执行命令</span><br></pre></td></tr></table></figure><h6 id="gt-eslintrc-js配置"><a href="#gt-eslintrc-js配置" class="headerlink" title="&gt; .eslintrc.js配置"></a>&gt; .eslintrc.js配置</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">root</span>: <span class="literal">true</span>, <span class="comment">// 当前项目使用这个配置文件, 不会往父级目录找.eslintrc.js文件</span></span><br><span class="line">    <span class="attr">env</span>: &#123;</span><br><span class="line">        <span class="comment">// 指定eslint启动环境(vuecli底层是node支持), browser: true也可以在浏览器设置</span></span><br><span class="line">        <span class="attr">node</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">extends</span>: [</span><br><span class="line">        <span class="comment">// 扩展配置</span></span><br><span class="line">        <span class="string">&quot;eslint:recommended&quot;</span>, <span class="comment">// 这个扩展包帮我们启用了一系列核心规则，这些规则是在 rules（https://cn.eslint.org/docs/rules/）页面 中被标记为 ✅ 的常见问题</span></span><br><span class="line">        <span class="string">&quot;plugin:vue/recommended&quot;</span>, <span class="comment">// vue模板格式化更严格</span></span><br><span class="line">        <span class="string">&quot;plugin:prettier/recommended&quot;</span>, <span class="comment">// 添加 prettier 插件 解决 eslint 和 prettier 的冲突</span></span><br><span class="line">        <span class="string">&quot;plugin:vue/essential&quot;</span>, <span class="comment">// vue里必须的规则</span></span><br><span class="line">        <span class="string">&quot;@vue/prettier&quot;</span>,</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">        <span class="comment">// 扩展配置</span></span><br><span class="line">        <span class="comment">// 对新语法使用eslint</span></span><br><span class="line">        <span class="attr">parser</span>: <span class="string">&quot;babel-eslint&quot;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//   &quot;off&quot; or 0 - 关闭规则</span></span><br><span class="line">    <span class="comment">//   &quot;warn&quot; or 1 - 将规则视为一个警告（不会影响退出码）,只警告，不会退出程序</span></span><br><span class="line">    <span class="comment">//   &quot;error&quot; or 2 - 将规则视为一个错误 (退出码为1)，报错并退出程序</span></span><br><span class="line">    <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="string">&quot;no-console&quot;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;warn&quot;</span> : <span class="string">&quot;off&quot;</span>, <span class="comment">// 上线环境用打印就报警告, 开发环境关闭此规则</span></span><br><span class="line">        <span class="string">&quot;no-debugger&quot;</span>: process.<span class="property">env</span>.<span class="property">NODE_ENV</span> === <span class="string">&quot;production&quot;</span> ? <span class="string">&quot;warn&quot;</span> : <span class="string">&quot;off&quot;</span>, <span class="comment">// debugger可以终止代码执行</span></span><br><span class="line">        <span class="string">&quot;prettier/prettier&quot;</span>: [<span class="string">&quot;error&quot;</span>, &#123; <span class="attr">endOfLine</span>: <span class="string">&quot;auto&quot;</span> &#125;], <span class="comment">// 解决 Delete `␍`eslint(prettier/prettier) 错误</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="3、Prettier"><a href="#3、Prettier" class="headerlink" title="3、Prettier"></a>3、Prettier</h4><h6 id="gt-根目录创建并配置-prettierrc-文件"><a href="#gt-根目录创建并配置-prettierrc-文件" class="headerlink" title="&gt; 根目录创建并配置 .prettierrc 文件"></a>&gt; 根目录创建并配置 <code>.prettierrc</code> 文件</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">120</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;useTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;TrailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jsxBracketSameLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="gt-命令行格式化所有文件"><a href="#gt-命令行格式化所有文件" class="headerlink" title="&gt; 命令行格式化所有文件"></a>&gt; 命令行格式化所有文件</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npx prettier --write . #格式化所有文件</span><br></pre></td></tr></table></figure><blockquote><p><strong>！！！ 配置完记得重启vscode</strong></p></blockquote><h4 id="4、插件安装"><a href="#4、插件安装" class="headerlink" title="4、插件安装"></a>4、插件安装</h4><h6 id="Prettier-插件安装"><a href="#Prettier-插件安装" class="headerlink" title="Prettier 插件安装"></a>Prettier 插件安装</h6><blockquote><p>安装插件 <code>Prettier - Code formatter</code></p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/1.webp?x-oss-process=style/huyu" alt="Prettier"></p></blockquote><h6 id="ESLint-插件安装"><a href="#ESLint-插件安装" class="headerlink" title="ESLint 插件安装"></a>ESLint 插件安装</h6><blockquote><p>安装插件 <code>ESLint</code></p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/2.webp?x-oss-process=style/huyu" alt="ESLint"></p></blockquote><ul><li>添加配置项</li></ul><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/3.webp?x-oss-process=style/huyu" alt="vscode配置项"></p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="comment">// 将prettier设置为默认格式化程序(在编辑器中有可能被其他Formatter占用，所以将prettier设置为默认Formatter)</span></span><br><span class="line">  <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 保存时自动格式化 (根据根目录下‘.prettierrc文件配置项’)</span></span><br><span class="line">  <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// Enable per-language</span></span><br><span class="line">  <span class="attr">&quot;[javascript]&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;editor.defaultFormatter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esbenp.prettier-vscode&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnSave&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="comment">// 为ESLint启用“保存时自动修复”，并且仍然具有格式和快速修复功能</span></span><br><span class="line">  <span class="attr">&quot;editor.codeActionsOnSave&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;source.fixAll.eslint&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5、配置项含义"><a href="#5、配置项含义" class="headerlink" title="5、配置项含义"></a>5、配置项含义</h4><h6 id="prettierrc文件常见配置"><a href="#prettierrc文件常见配置" class="headerlink" title=".prettierrc文件常见配置"></a>.prettierrc文件常见配置</h6><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// tab缩进大小,默认为2</span></span><br><span class="line">    <span class="attr">&quot;tabWidth&quot;</span><span class="punctuation">:</span> <span class="number">4</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 行长规则 默认为120</span></span><br><span class="line">    <span class="attr">&quot;printWidth&quot;</span><span class="punctuation">:</span> <span class="number">120</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 使用tab缩进，默认false true 使用tab缩进 false 使用空格缩进</span></span><br><span class="line">    <span class="attr">&quot;useTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 使用分号, 默认true true 有分号 false 没有分号</span></span><br><span class="line">    <span class="attr">&quot;semi&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 使用单引号, 默认false false 双引号 true 单引号 (在jsx中配置无效, 默认都是双引号)</span></span><br><span class="line">    <span class="attr">&quot;singleQuote&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 行尾逗号,默认 none,可选 none|es5|all</span></span><br><span class="line">    <span class="comment">// es5 包括es5中的数组、对象</span></span><br><span class="line">    <span class="comment">// all 包括函数对象等所有可选</span></span><br><span class="line">    <span class="attr">&quot;TrailingComma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 对象中的空格 默认true</span></span><br><span class="line">    <span class="comment">// true: &#123; foo: bar &#125; false: &#123;foo: bar&#125;</span></span><br><span class="line">    <span class="attr">&quot;bracketSpacing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// JSX标签闭合位置 默认false</span></span><br><span class="line">    <span class="comment">// false: &lt;div</span></span><br><span class="line">    <span class="comment">//          className=&quot;&quot;</span></span><br><span class="line">    <span class="comment">//          style=&#123;&#123;&#125;&#125;</span></span><br><span class="line">    <span class="comment">//       &gt;</span></span><br><span class="line">    <span class="comment">// true: &lt;div</span></span><br><span class="line">    <span class="comment">//          className=&quot;&quot;</span></span><br><span class="line">    <span class="comment">//          style=&#123;&#123;&#125;&#125; &gt;</span></span><br><span class="line">    <span class="attr">&quot;jsxBracketSameLine&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">// 箭头函数参数括号 默认avoid 可选 avoid| always</span></span><br><span class="line">    <span class="comment">// avoid 能省略括号的时候就省略 例如x =&gt; x</span></span><br><span class="line">    <span class="comment">// always 总是有括号</span></span><br><span class="line">    <span class="attr">&quot;arrowParens&quot;</span><span class="punctuation">:</span> <span class="string">&quot;avoid&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>提升代码可读性，减少if-else</title>
      <link href="/posts/8101.html"/>
      <url>/posts/8101.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>相信大家或多或少都接触过拥有庞大 <code>if else</code> 的项目代码吧，多重嵌套的 <code>if else</code> 在维护的时候真的让人很恼火，有时候一个 bug 排查下来，严重感觉身体被掏空😿。</p><p>本文并未有消灭或歧视 <code>if else</code>的意思，<code>if else</code> 的好用都知道，这里只是在某些特定场景为大家额外提供一种思路，增加我们代码的可读性。</p></blockquote><h2 id="短路运算💻"><a href="#短路运算💻" class="headerlink" title="短路运算💻"></a>短路运算💻</h2><p>Javascript 的逻辑或 <code>||</code> 的短路运算有时候可以用来代替一些比较简单的 <code>if else</code></p><ul><li>逻辑或 <code>||</code> 的短路运算：若左边能转成true，返回左边式子的值，反之返回右边式子的值。</li></ul><p>下面用一个简单的案例来表述</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c</span><br><span class="line"><span class="keyword">if</span>(a)&#123;</span><br><span class="line">    c = a</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    c = b</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>大家看着上面的代码会难受嘛（本人有一丢丢的强迫症🤦），明明就是一个很简单的判断却需要写好几行代码才能实现。这个时候我们就可以用短路运算去简化我们的代码啦🙂。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> c = a || b</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>这样看起来是不是就简洁了很多😕。</p><h2 id="三元运算符🎶"><a href="#三元运算符🎶" class="headerlink" title="三元运算符🎶"></a>三元运算符🎶</h2><p>三元运算符我觉得大家应该都很熟悉吧，很多时候简单的一些判断我们都可以使用三元运算符去替代 <code>if else</code>，这里只推荐 <strong>一层</strong> 三元运算符，因为多层嵌套的三元运算符也不具备良好的可读性🥹。</p><p>例子：条件为 true 时返回1，反之返回0：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = (nBoolean) &#123;</span><br><span class="line">    <span class="keyword">if</span> (nBoolean) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用三元运算符</span></span><br><span class="line"><span class="keyword">const</span> fn = (nBoolean) &#123;</span><br><span class="line">    <span class="keyword">return</span> nBoolean ? <span class="number">1</span> : <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>三元运算符使用的地方也比较多，比如：条件赋值，递归…</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// num值在nBoolean为true时为10，否则为5</span></span><br><span class="line"><span class="keyword">let</span> num = nBoolean ? <span class="number">10</span> : <span class="number">5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 求0-n之间的整数的和</span></span><br><span class="line"><span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    sum += n</span><br><span class="line">    <span class="keyword">return</span> n &gt;= <span class="number">2</span> ? <span class="title function_">add</span>(n - <span class="number">1</span>) : result;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> num = <span class="title function_">add</span>(<span class="number">10</span>);<span class="comment">//55</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="switch-case🖥️"><a href="#switch-case🖥️" class="headerlink" title="switch case🖥️"></a>switch case🖥️</h2><p>上述的两种方式：短路运算跟三元运算虽然很好用，代码也很简洁，不过都只能用于简单的判断，遇到多重条件判断就不能使用了😭。</p><p>对于 <code>switch case</code>，虽然它的可读性确实比 <code>else if</code> 更高，但是我想大家应该都觉得它写起来比较麻烦吧😣（反正我觉得很麻烦😺）。</p><p>例：有A、B、C、D四种种类型，在A、B的时候输出1，C输出2、D输出3，默认输出0。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> type = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//if else if</span></span><br><span class="line"><span class="keyword">if</span> (type === <span class="string">&#x27;A&#x27;</span> || type === <span class="string">&#x27;B&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (type === <span class="string">&#x27;C&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">&#x27;D&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//switch case</span></span><br><span class="line"><span class="keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;A&#x27;</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;B&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;C&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">case</span> <span class="string">&#x27;D&#x27;</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="attr">default</span>:</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="对象配置-策略模式📑"><a href="#对象配置-策略模式📑" class="headerlink" title="对象配置/策略模式📑"></a>对象配置/策略模式📑</h2><p>对象配置看起来跟 <code>策略模式</code> 差不多，都是根据不同得参数使用不同得数据/算法/函数。😺</p><p>策略模式就是将一系列算法封装起来，并使它们相互之间可以替换。被封装起来的算法具有独立性，外部不可改变其特性。</p><p>接下来我们用对象配置的方法实现一下上述的例子</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> type = <span class="string">&#x27;A&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> tactics = &#123;</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">default</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(tactics[type]) <span class="comment">// 1</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>接下来用几个例子让大家更加熟悉一点。</p><h3 id="案例1-商场促销价🙋"><a href="#案例1-商场促销价🙋" class="headerlink" title="案例1 商场促销价🙋"></a>案例1 商场促销价🙋</h3><p>根据不同的用户使用不同的折扣，如：普通用户不打折，普通会员用户9折，年费会员8.5折，超级会员8折。</p><p>使用<code>if else</code>实现😢</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取折扣 --- 使用if else</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDiscount</span> = (<span class="params">userKey</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (userKey === <span class="string">&#x27;普通会员&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.9</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userKey === <span class="string">&#x27;年费会员&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.85</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (userKey === <span class="string">&#x27;超级会员&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.8</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getDiscount</span>(<span class="string">&#x27;普通会员&#x27;</span>)) <span class="comment">// 0.9</span></span><br><span class="line"></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>使用对象配置/策略模式实现🙂</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取折扣 -- 使用对象配置/策略模式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDiscount</span> = (<span class="params">userKey</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 我们可以根据用户类型来生成我们的折扣对象</span></span><br><span class="line">    <span class="keyword">let</span> discounts = &#123;</span><br><span class="line">        <span class="string">&#x27;普通会员&#x27;</span>: <span class="number">0.9</span>,</span><br><span class="line">        <span class="string">&#x27;年费会员&#x27;</span>: <span class="number">0.85</span>,</span><br><span class="line">        <span class="string">&#x27;超级会员&#x27;</span>: <span class="number">0.8</span>,</span><br><span class="line">        <span class="string">&#x27;default&#x27;</span>: <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> discounts[userKey] || discounts[<span class="string">&#x27;default&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getDiscount</span>(<span class="string">&#x27;普通会员&#x27;</span>)) <span class="comment">// 0.9</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>从上面的案列中可以明显看得出来，使用对象配置比使用if else可读性更高，后续如果需要添加用户折扣也只需要修改折扣对象就行👍。</p><p>对象配置不一定非要使用对象去管理我们键值对，还可以使用 <code>Map</code>去管理🦋，如：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取折扣 -- 使用对象配置/策略模式</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">getDiscount</span> = (<span class="params">userKey</span>) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 我们可以根据用户类型来生成我们的折扣对象</span></span><br><span class="line">    <span class="keyword">let</span> discounts = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">        [<span class="string">&#x27;普通会员&#x27;</span>, <span class="number">0.9</span>],</span><br><span class="line">        [<span class="string">&#x27;年费会员&#x27;</span>, <span class="number">0.85</span>],</span><br><span class="line">        [<span class="string">&#x27;超级会员&#x27;</span>, <span class="number">0.8</span>],</span><br><span class="line">        [<span class="string">&#x27;default&#x27;</span>, <span class="number">1</span>]</span><br><span class="line">    ])</span><br><span class="line">    <span class="keyword">return</span> discounts.<span class="title function_">get</span>(userKey) || discounts.<span class="title function_">get</span>(<span class="string">&#x27;default&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getDiscount</span>(<span class="string">&#x27;普通会员&#x27;</span>)) <span class="comment">// 0.9</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h3 id="案例2-年终奖🏆"><a href="#案例2-年终奖🏆" class="headerlink" title="案例2 年终奖🏆"></a>案例2 年终奖🏆</h3><p>公司的年终奖根据员工的工资基数和绩效等级来发放的。例如，绩效为A的人年终奖有4倍工资，绩效为B的有3倍，绩效为C的只有2倍。</p><p>假如财务部要求我们提供一段代码来实现这个核算逻辑，我们要怎么实现呢？</p><p>这不是很简单嘛，一个函数就搞定了。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">calculateBonus</span> = (<span class="params">performanceLevel, salary</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">&#x27;A&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">&#x27;B&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (performanceLevel === <span class="string">&#x27;C&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">calculateBonus</span>( <span class="string">&#x27;B&#x27;</span>, <span class="number">20000</span> ) <span class="comment">// 输出：60000</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>可以发现，这段代码十分简单，但是 <code>calculateBonus</code>函数比较庞大，所有的逻辑分支都包含在<code>if else</code>语句中，如果增加了一种新的绩效等级D，或者把A等级的倍数改成5，那我们必须阅读所有代码才能去做修改🙇‍♂️。</p><p>所以我们可以用对象配置/策略模式去简化这个函数😺</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> strategies = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&#x27;A&#x27;</span>, <span class="number">4</span>],</span><br><span class="line">    [<span class="string">&#x27;B&#x27;</span>, <span class="number">3</span>],</span><br><span class="line">    [<span class="string">&#x27;C&#x27;</span>, <span class="number">2</span>]</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">calculateBonus</span> = (<span class="params">performanceLevel, salary</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> strategies.<span class="title function_">get</span>(performanceLevel) * salary</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">calculateBonus</span>( <span class="string">&#x27;B&#x27;</span>, <span class="number">20000</span> ) <span class="comment">// 输出：60000</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><p>至此，这个需求做完了，然后产品经理说要加上一个部门区分，假设公司有两个部门D和F，D部门的业绩较好，所以年终奖翻1.2倍😄，F部门的业绩较差，年终奖打9折😭。</p><p>改造以上代码，把状态值拼接，然后存入Map中</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 以绩效_部门的方式拼接键值存入</span></span><br><span class="line"><span class="keyword">let</span> strategies = <span class="keyword">new</span> <span class="title class_">Map</span>([</span><br><span class="line">    [<span class="string">&#x27;A_D&#x27;</span>, <span class="number">4</span> * <span class="number">1.2</span>],</span><br><span class="line">    [<span class="string">&#x27;B_D&#x27;</span>, <span class="number">3</span> * <span class="number">1.2</span>],</span><br><span class="line">    [<span class="string">&#x27;C_D&#x27;</span>, <span class="number">2</span> * <span class="number">1.2</span>],</span><br><span class="line">    [<span class="string">&#x27;A_F&#x27;</span>, <span class="number">4</span> * <span class="number">0.9</span>],</span><br><span class="line">    [<span class="string">&#x27;B_F&#x27;</span>, <span class="number">3</span> * <span class="number">0.9</span>],</span><br><span class="line">    [<span class="string">&#x27;C_F&#x27;</span>, <span class="number">2</span> * <span class="number">0.9</span>]</span><br><span class="line">])</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">calculateBonus</span> = (<span class="params">performanceLevel, salary, department</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> strategies.<span class="title function_">get</span>(<span class="string">`<span class="subst">$&#123;performanceLevel&#125;</span>_<span class="subst">$&#123;department&#125;</span>`</span>) * salary</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">calculateBonus</span>( <span class="string">&#x27;B&#x27;</span>, <span class="number">20000</span>, <span class="string">&#x27;D&#x27;</span> ) <span class="comment">// 输出：72000</span></span><br><span class="line">复制代码</span><br></pre></td></tr></table></figure><h2 id="结尾🔚"><a href="#结尾🔚" class="headerlink" title="结尾🔚"></a>结尾🔚</h2><p>本文主要是向大家传递一种思想，我们有很多的方法去优化我们的代码，提高我们代码的可读性。</p><p>对<code>if else</code>并没有歧视的意思，只是希望在大家以后的代码中不仅仅只有<code>if else</code>😨。</p>]]></content>
      
      
      <categories>
          
          <category> 代码优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>判断一个对象上是否存在一个属性</title>
      <link href="/posts/9275.html"/>
      <url>/posts/9275.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一、js判断一个对象是否为空"><a href="#一、js判断一个对象是否为空" class="headerlink" title="一、js判断一个对象是否为空"></a>一、js判断一个对象是否为空</h3><p><strong>方法一：</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">empty</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;    <span class="comment">//非空</span></span><br><span class="line">&#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;       <span class="comment">//为空</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">empty</span>(obj1)) <span class="comment">// 输出 true 为空</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">empty</span>(obj2)) <span class="comment">//输出 false 非空</span></span><br></pre></td></tr></table></figure><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221029201350245.png?x-oss-process=style/huyu" alt="方法一" style="zoom:67%;" /></p><p><strong>方法二：JSON.stringify</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj1) == <span class="string">&quot;&#123;&#125;&quot;</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;空对象&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;非空对象&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 空对象</span></span><br></pre></td></tr></table></figure><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221029201932296.png?x-oss-process=style/huyu" alt="JSON.stringify" style="zoom:67%;" /></p><p>此方法识别不了 <code>function</code>和<code>undefined</code>等<code>JSON.stringify</code>的缺陷</p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221029203128050.png?x-oss-process=style/huyu" alt="image-20221029203128050" style="zoom: 50%;" /></p><p><strong>方法三：</strong>Object.keys(obj) 返回一个给定对象自身可枚举属性组成的数组。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj1 = &#123;&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj1).<span class="property">length</span> == <span class="number">0</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;空对象&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;非空对象&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、js判断对象中是否有某个属性"><a href="#二、js判断对象中是否有某个属性" class="headerlink" title="二、js判断对象中是否有某个属性"></a>二、js判断对象中是否有某个属性</h3><p><strong>方法一： . 或 [ ] 当此属性的值为false、undefined、NaN、null、0、”” 时，此方法不适用。</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (obj2.<span class="property">a</span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象有此属性&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象无此属性&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二： in运算符 如果某属性在指定对象或其原型链上则返回true，只需判断自身属性时，此方法不适用。</strong></p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20221029203437536.png?x-oss-process=style/huyu" alt="image-20221029203437536"></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj2 = &#123; <span class="attr">a</span>:<span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;a&quot;</span> <span class="keyword">in</span> obj2)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象或其原型链上有此属性&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象或其原型链上无此属性&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法三：obj.hasOwnProperty() 对象自身属性中含有某属性，返回true。</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> obj2 = &#123;<span class="attr">a</span>:<span class="number">1</span>&#125;</span><br><span class="line"><span class="keyword">if</span> (obj2.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;a&quot;</span>))&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象上有此属性&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;对象上无此属性&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数字滚动</title>
      <link href="/posts/32529.html"/>
      <url>/posts/32529.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="数字滚动"><a href="#数字滚动" class="headerlink" title="数字滚动"></a>数字滚动</h1><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><blockquote><p>常用数据化大屏的echarts组件和ui组件</p></blockquote><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/%E6%95%B0%E5%AD%97%E6%BB%9A%E5%8A%A8.gif" alt="数字滚动"></p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><blockquote><p>使用vue-animate-number插件</p></blockquote><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p><strong>1.需要在项目终端下载安装vue-animate-number</strong></p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install vue-animate-number</span><br></pre></td></tr></table></figure><p><strong>2. 在main.js引入</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">VueAnimateNumber</span> <span class="keyword">from</span> <span class="string">&#x27;vue-animate-number&#x27;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueAnimateNumber</span>)</span><br></pre></td></tr></table></figure><p><strong>3. 在页面中引用</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;animate-number</span><br><span class="line">  <span class="keyword">from</span>=<span class="string">&quot;0&quot;</span></span><br><span class="line">  :to=<span class="string">&quot;num&quot;</span></span><br><span class="line">  :key=<span class="string">&quot;num&quot;</span></span><br><span class="line">  duration=<span class="string">&quot;500&quot;</span></span><br><span class="line">  :formatter=<span class="string">&quot;formatter&quot;</span></span><br><span class="line">  easing=<span class="string">&quot;easeOutQuad&quot;</span></span><br><span class="line">  &gt;&lt;/animate-number&gt;</span><br><span class="line">&lt;!-- 建议加上:key，这样可以适应num的动态变化 --&gt;</span><br><span class="line">&lt;!-- 添加formatter可以使用小数 --&gt;</span><br></pre></td></tr></table></figure><p><strong>4. 在js中使用小数</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">formatter</span>: <span class="keyword">function</span>(<span class="params">num</span>)&#123;</span><br><span class="line">  <span class="keyword">return</span> num.<span class="title function_">toFixed</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>git高级操作</title>
      <link href="/posts/59643.html"/>
      <url>/posts/59643.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Rebase-合并"><a href="#Rebase-合并" class="headerlink" title="Rebase 合并"></a>Rebase 合并</h2><p>该命令可以让和 <code>merge</code> 命令得到的结果基本是一致的。</p><p>通常使用 <code>merge</code> 操作将分支上的代码合并到 <code>master</code> 中，分支样子如下所示</p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/2019-06-01-043801.png?x-oss-process=style/huyu" alt="img"></p><p>使用 <code>rebase</code> 后，会将 <code>develop</code> 上的 <code>commit</code> 按顺序移到 <code>master</code> 的第三个 <code>commit</code> 后面，分支样子如下所示</p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/2019-06-01-043802.png?x-oss-process=style/huyu" alt="img"></p><p>Rebase 对比 merge，优势在于合并后的结果很清晰，只有一条线，劣势在于如果一旦出现冲突，解决冲突很麻烦，可能要解决多个冲突，但是 merge 出现冲突只需要解决一次。</p><p>使用 rebase 应该在需要被 rebase 的分支上操作，并且该分支是本地分支。如果 <code>develop</code> 分支需要 rebase 到 <code>master</code> 上去，那么应该如下操作</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># branch develop</span></span></span><br><span class="line">git rebase master</span><br><span class="line">git checkout master</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 用于将 `master` 上的 HEAD 移动到最新的 commit</span></span></span><br><span class="line">git merge develop</span><br></pre></td></tr></table></figure><h2 id="stash"><a href="#stash" class="headerlink" title="stash"></a>stash</h2><p><code>stash</code> 用于临时保存工作目录的改动。开发中可能会遇到代码写一半需要切分支打包的问题，如果这时候你不想 <code>commit</code> 的话，就可以使用该命令。</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash</span><br></pre></td></tr></table></figure><p>使用该命令可以暂存你的工作目录，后面想恢复工作目录，只需要使用</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git stash pop</span><br></pre></td></tr></table></figure><p>这样你之前临时保存的代码又回来了</p><h2 id="reflog"><a href="#reflog" class="headerlink" title="reflog"></a>reflog</h2><p><code>reflog</code> 可以看到 HEAD 的移动记录，假如之前误删了一个分支，可以通过 <code>git reflog</code> 看到移动 HEAD 的哈希值</p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/2019-06-01-043809.png?x-oss-process=style/huyu" alt="img"></p><p>从图中可以看出，HEAD 的最后一次移动行为是 <code>merge</code> 后，接下来分支 <code>new</code> 就被删除了，那么我们可以通过以下命令找回 <code>new</code> 分支</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git checkout 37d9aca</span><br><span class="line">git checkout -b new</span><br></pre></td></tr></table></figure><p>PS：<code>reflog</code> 记录是时效的，只会保存一段时间内的记录。</p><h2 id="Reset"><a href="#Reset" class="headerlink" title="#Reset"></a><a href="https://yuchengkai.cn/docs/cs/git.html#reset">#</a>Reset</h2><p>如果你想删除刚写的 commit，就可以通过以下命令实现</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git reset --hard HEAD^</span><br></pre></td></tr></table></figure><p>但是 <code>reset</code> 的本质并不是删除了 commit，而是重新设置了 HEAD 和它指向的 branch。</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51world(数字孪生)</title>
      <link href="/posts/3655.html"/>
      <url>/posts/3655.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>💡 概念解释：数字孪生是充分利用物理模型、传感器更新、运行历史等数据，集成多学科、多物理量、多尺度、多概率的仿真过程，在虚拟空间中完成映射，从而反映相对应的实体装备的全生命周期过程。数字孪生是一种超越现实的概念，可以被视为一个或多个重要的、彼此依赖的装备系统的数字映射系统。</p><h1 id="51world数字孪生平台"><a href="#51world数字孪生平台" class="headerlink" title="51world数字孪生平台"></a>51world数字孪生平台</h1><p>💡 平台简介：51world数字孪生城市平台采用“多元数据处理，城市底座生成，应用界面开发，数据集成开放”的模块化设计，满足平台持续运营，应用灵活适配，数据管理保密的需求，支持CIM、IOC，城市大脑业务，助理城市数字化转型</p><p>✍️平台地址：<a href="https://www.51aes.com/">https://www.51aes.com/</a></p><h2 id="产品生态"><a href="#产品生态" class="headerlink" title="产品生态"></a>产品生态</h2><div class="table-container"><table><thead><tr><th><a href="#DAN0W"><strong>PaaS平台</strong></a></th><th>通过开放产品能力、让开发者共享各行业AES场景底板，数据面板，超级接口等帮助开发者快速构建全行业应用（城市、园区、交通、地产、水务等）0代码开发，一站式创作，多端跨平台的数字孪生交互系统</th></tr></thead><tbody><tr><td><a href="#zqHnG"><strong>SuperAPI</strong></a></td><td>是一套负责交涉Web页面和云渲染服务的编程接口（for JavaScript）, 需要基于51平台使用；用户可在WEB页面上创建任意HTML5 UI元素, 利用SuperAPI与渲染场景进行双向交互。同时可以兼容当前主流的前端框架（Vue，React，Angular等）</td></tr><tr><td><a href="#mTQHM"><strong>SuperGUI</strong></a></td><td>SuperGUI（图形用户界面），是围绕着51WORLD核心产品全要素场景（AES），帮助生态合作伙伴进行细分行业的解决方案的搭建和输出，产品形态为B/S架构的开发者生态组合工具，旨在将基于AES的数字孪生基础能力快速赋能全行业，帮助生态伙伴高效的、低成本的构建数字孪生控制管理平台。</td></tr><tr><td><a href="#ZOKQn"><strong>蓝图编辑器</strong></a></td><td>SuperGUI中编辑事件配置功能，可以操作页面中的元素节点，交互节点，逻辑节点，场景节点，可以接入 SuperAPI 实现场景渲染双向交互功能</td></tr></tbody></table></div><h2 id="PaaS平台"><a href="#PaaS平台" class="headerlink" title="PaaS平台"></a>PaaS平台</h2><p>下载地址：<a href="https://wdp.51aes.com/product-download">https://wdp.51aes.com/product-download</a></p><p>产品文档：<a href="https://djp2gcp2um.feishu.cn/docs/doccncXWIo0B47godjUyVf3N9Fe#">https://djp2gcp2um.feishu.cn/docs/doccncXWIo0B47godjUyVf3N9Fe#</a></p><h4 id="功能1：管理中心"><a href="#功能1：管理中心" class="headerlink" title="功能1：管理中心"></a>功能1：<a href="https://djp2gcp2um.feishu.cn/docs/doccncXWIo0B47godjUyVf3N9Fe#pvOmJa">管理中心</a></h4><p>在51WDP管理中心内，用户可以对案例进行管理及发布，也可以管理资产和场景（待开放），查看自己的权益，设置，个人信息，接收通知等。</p><p>知识点：</p><p>1.当场景需要与superAPI中链接时需要使用到管理中心中的渲染口令（具体实现：<a href="#IVMEf">superAPI-场景渲染</a>）</p><p>2.当需要本地场景多个人使用时可以在 管理中心 - 系统设置 中修改 渲染路数 ，即可实现多人操作（多人操作对电脑性能要求较高）</p><h4 id="功能2：案例编辑器"><a href="#功能2：案例编辑器" class="headerlink" title="功能2：案例编辑器"></a>功能2：<a href="https://djp2gcp2um.feishu.cn/docs/doccncXWIo0B47godjUyVf3N9Fe#U4chVE">案例编辑器</a></h4><p>在案例编辑器中，用户可以对自己的案例进行创作编辑，目前有【模板】【场景】【模型】【面板】【交互（蓝图）】【导入】等功能模块，对应了数字孪生项目的各项基本要素。另外，还有众多的全局功能，包括偏好设置、模式切换、预览、发布等。</p><h2 id="SuperAPI"><a href="#SuperAPI" class="headerlink" title="SuperAPI"></a>SuperAPI</h2><p>产品文档：<a href="http://superapi.51aes.com/guide">http://superapi.51aes.com/guide</a></p><h4 id="技术架构："><a href="#技术架构：" class="headerlink" title="技术架构："></a><strong>技术架构</strong>：</h4><p>三维场景通过51WORLD云端渲染，将实时视频流推送到网页端，并且能够实现前端到后端的交互同步。</p><p>SuperAPI提供可在WEB端进行调用的方法，以便用户从前端页面直接向51WORLD云渲染平台程序发送指令。同时通过注册函数监听51WORLD云渲染程序发送的事件，用户再跟据事件类型，在WEB端中对此类事件做出响应。</p><h4 id="云渲染技术描述："><a href="#云渲染技术描述：" class="headerlink" title="云渲染技术描述："></a>云渲染技术描述：</h4><p>在拥有GPU的服务器部署使用图形API（D3D\OpenGL）进行实时渲染的3D可视化应用软件（下称“渲染服务软件”），通过Nvidia Enc实时编码渲染的图像到h264格式（低延迟），并通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API/Signaling_and_video_calling">WEB-RTC</a>协议（流控）发送到客户端。客户端是一个能够运行在手机、平板电脑、普通PC主机的应用程序（或者网页），用作3D可视化的展示，并且收集用户的操作通过<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebRTC_API/Signaling_and_video_calling">WEB-RTC</a>回传给服务器。最终，这套解决方案用来实现复杂3D应用（照片级真实的渲染效果）能够在手机、平板电脑、普通PC主机、甚至网页上进行远程的展示与实时的互动。</p><h4 id="API安装引用"><a href="#API安装引用" class="headerlink" title="API安装引用"></a>API安装引用</h4><p>文档地址：<a href="http://superapi.51aes.com/study">http://superapi.51aes.com/study</a></p><p>① 直接用 &lt;script 引入SuperAPI:</p><p>引入指定版本</p><pre><code>&lt;script src=&quot;http://superapi.51aes.com/dist/superAPI-6.2.0.min.js&quot;&gt;&lt;/script&gt;</code></pre><p>② 通过npm, cnpm, yarn安装:</p><p>✍️npm i 51superapi    ✍️cnpm install 51superapi        ✍️yarn add 51superapi</p><p>✍️import cloudRenderer from “51superapi”</p><h4 id="superAPI-与-WDP-平台场景链接"><a href="#superAPI-与-WDP-平台场景链接" class="headerlink" title="superAPI 与 WDP 平台场景链接"></a>superAPI 与 WDP 平台场景链接</h4><p>渲染口令：在 WDP 管理中心中获取案例渲染口令</p><p>渲染地址：</p><p>云渲染则直接填写云渲染地址即可</p><p>本地渲染：本机ip+8889    (“<a href="http://127.0.0.1:8889">http://127.0.0.1:8889</a>“)</p><p>具体文档：<a href="http://superapi.51aes.com/study">http://superapi.51aes.com/study</a></p><p>启动渲染代码块：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> cloudRender = <span class="keyword">new</span> <span class="title function_">cloudRenderer</span>(<span class="string">&quot;player&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">var</span> cloudurl = <span class="string">&quot;http://127.0.0.1:8889&quot;</span> <span class="comment">//本地渲染服务地址, 8889:固定端口</span></span><br><span class="line"><span class="keyword">var</span> orderID = <span class="string">&#x27;a5EEE4Fe&#x27;</span> <span class="comment">//渲染口令</span></span><br><span class="line"><span class="comment">//启动渲染</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">start51</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="title function_">fetch</span>(<span class="string">`<span class="subst">$&#123;cloudurl&#125;</span>/Renderers/Any/order`</span>, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;POST&quot;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">      <span class="string">&quot;Content-type&quot;</span>: <span class="string">&quot;application/json&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(&#123;</span><br><span class="line">      <span class="attr">order</span>: orderID,</span><br><span class="line">      <span class="attr">width</span>: <span class="variable language_">window</span>.<span class="property">innerWidth</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="variable language_">window</span>.<span class="property">innerHeight</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">//① order 渲染口令必填; ② width, height: 设置云渲染输出分辨率(此设置为固定分辨率,可选; 默认以云渲染客户端设置的分辨率输出)</span></span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.<span class="property">ok</span>) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="title class_">Error</span>(res.<span class="property">statusText</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res.<span class="title function_">json</span>()</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">json</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (json.<span class="property">url</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">url</span>, <span class="string">&#x27;云渲染url&#x27;</span>);</span><br><span class="line">      <span class="comment">//启动云渲染</span></span><br><span class="line">      cloudRender.<span class="title class_">SuperAPI</span>(<span class="string">&quot;StartRenderCloud&quot;</span>, json.<span class="property">url</span>);</span><br><span class="line">      <span class="comment">//事件注册</span></span><br><span class="line">      cloudRender.<span class="title class_">SuperAPI</span>(<span class="string">&quot;RegisterCloudResponse&quot;</span>, myHandleResponseFunction);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(json.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;Error: &#x27;</span>, error);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="可实现功能："><a href="#可实现功能：" class="headerlink" title="可实现功能："></a>可实现功能：</h4><p>相关文档：<a href="http://superapi.51aes.com/apifunc">http://superapi.51aes.com/apifunc</a></p><ol><li>镜头控制</li><li>场景编辑</li><li>覆盖物编辑</li><li>POI点</li><li>点聚合</li><li>楼体拆解</li><li>路径</li><li>场景热力图、迁徙图、战略图、区域轮廓图、区域高亮</li><li>场景控件</li><li>坐标计算</li></ol><h2 id="SuperGUI"><a href="#SuperGUI" class="headerlink" title="SuperGUI"></a>SuperGUI</h2><p>具体详情：SuperGUI主要用于在PaaS平台中对场景进行操作</p><p>学习地址：<a href="https://bbs.51aes.com/study/list/1414471703908311041.html?page=2">https://bbs.51aes.com/study/list/1414471703908311041.html?page=2</a>    （课程 19 开始）</p><h4 id="可用功能："><a href="#可用功能：" class="headerlink" title="可用功能："></a>可用功能：</h4><p>模板，场景，模型，交互，面板（包含蓝图），模型导入</p><p>模板，场景，模型，交互，模型导入均为拖拽式操作，不予过多讲述</p><ul><li><p>面板：</p></li><li><ul><li>主要用于对场景进行便捷式交互操作，可实现数据请求、图表展示、组件化信息展示、基础交互、图标展示、素材上传等操作</li><li>面板中各种展示内容均可进行尺寸、样式、数据（可以通过请求实现动态数据）、交互等操作</li><li>面板的初衷即为 PPT 式开发独立展示页面，可以实现 0 代码开发、操作式开发，可以快速生成可用单页面</li></ul></li><li><p>面板联调：</p></li><li><ul><li>可对蓝图中使用到的逻辑操作、superApi等功能进行在线调试</li></ul></li></ul><h2 id="蓝图编辑器"><a href="#蓝图编辑器" class="headerlink" title="蓝图编辑器"></a>蓝图编辑器</h2><p>相关文档：<a href="https://bbs.51aes.com/blog/1425349665726164994.html">https://bbs.51aes.com/blog/1425349665726164994.html</a></p><p>基础视频教程：<a href="https://ossstore.51hitech.com/BBSOperation/WDP4.0/Mid_Training/WDP4-MT24.mp4">https://ossstore.51hitech.com/BBSOperation/WDP4.0/Mid_Training/WDP4-MT24.mp4</a></p><ul><li>主要用于在 SuperGUI 编辑面板时实现更多更自由的交互逻辑操作</li><li>主要内容：元素节点，交互节点，逻辑节点，场景节点</li><li>实现流程：</li></ul><ol><li><ol><li>通过元素节点相关事件作为初始化触发条件</li><li>可以 触发逻辑节点相关操作、触发场景节点中 SuperAPI 事件、触发接口操作等</li><li>其中各个节点也可互相触发</li><li>达到无代码处理复杂操作的功能</li></ol></li></ol><h4 id="具体面板："><a href="#具体面板：" class="headerlink" title="具体面板："></a>具体面板：</h4><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221020152930420.png" alt="image-20221020152930420"></p><h2 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h2><p>51world平台：<a href="https://www.51aes.com/">https://www.51aes.com/</a></p><p>PaaS平台使用说明：<a href="https://djp2gcp2um.feishu.cn/docs/doccncXWIo0B47godjUyVf3N9Fe#">https://djp2gcp2um.feishu.cn/docs/doccncXWIo0B47godjUyVf3N9Fe#</a></p><p>SuperAPI开发手册：<a href="http://superapi.51aes.com/guide">http://superapi.51aes.com/guide</a></p><p>开发者社区：<a href="https://bbs.51aes.com/">https://bbs.51aes.com/</a></p><p>官方qq群：（注册开发者后发送注册账号即可通过验证）</p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221020152955883.png" alt="image-20221020152955883"></p>]]></content>
      
      
      <categories>
          
          <category> 数字孪生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>大屏适配</title>
      <link href="/posts/8736.html"/>
      <url>/posts/8736.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h1><h3 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h3><p>常用数据化大屏的echarts组件和ui组件（<strong>不包含高德地图</strong>）</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>css3的scale可以等比缩放内容并且不会导致元素失帧，所以可以借助动态计算宽高比来确保大屏始终是按照设计稿的宽高比居中显示在显示器内！</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><h4 id="1-在需要适配的组件最外侧的容器绑定内联样式"><a href="#1-在需要适配的组件最外侧的容器绑定内联样式" class="headerlink" title="1. 在需要适配的组件最外侧的容器绑定内联样式"></a>1. 在需要适配的组件最外侧的容器绑定内联样式</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;page-layout&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--  :style=&quot;scaleStyle&quot; 则为内联样式  --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;page-layout__inner&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;showBg&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;scaleStyle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;page-layout__inner__header&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ScreenTop</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;page-layout__inner__main&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ScreenMain</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 高德地图 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">section</span> <span class="attr">class</span>=<span class="string">&quot;page-layout__map&quot;</span> <span class="attr">v-show</span>=<span class="string">&quot;showGD&quot;</span> <span class="attr">:style</span>=<span class="string">&quot;mapBoxStyle&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ScreenMap</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2-定义data数据"><a href="#2-定义data数据" class="headerlink" title="2. 定义data数据"></a>2. 定义data数据</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">scaleStyle</span>: <span class="string">&#x27;&#x27;</span> <span class="comment">// 内联样式</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-在mounted添加load-和resize的事件监听（beforeDestroy记得销毁）"><a href="#3-在mounted添加load-和resize的事件监听（beforeDestroy记得销毁）" class="headerlink" title="3. 在mounted添加load 和resize的事件监听（beforeDestroy记得销毁）"></a>3. 在mounted添加load 和resize的事件监听（beforeDestroy记得销毁）</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">adaptation</span>()</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="variable language_">this</span>.<span class="property">adaptation</span>)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">adaptation</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">beforeDestroy</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;load&#x27;</span>, <span class="variable language_">this</span>.<span class="property">adaptation</span>)</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;resize&#x27;</span>, <span class="variable language_">this</span>.<span class="property">adaptation</span>)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h4 id="4-添加对应的计算适配（缩放比例）的方法"><a href="#4-添加对应的计算适配（缩放比例）的方法" class="headerlink" title="4. 添加对应的计算适配（缩放比例）的方法"></a>4. 添加对应的计算适配（缩放比例）的方法</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">adaptation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">scaleStyle</span> = <span class="variable language_">this</span>.<span class="title function_">computedAdaptation</span>() || <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 计算适配方案</span></span><br><span class="line"><span class="title function_">computedAdaptation</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> w = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span></span><br><span class="line">    <span class="keyword">const</span> h = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span></span><br><span class="line">    <span class="keyword">const</span> nw = <span class="variable constant_">WINDOW_WIDTH</span> <span class="comment">// 1920</span></span><br><span class="line">    <span class="keyword">const</span> nh = <span class="variable constant_">WINDOW_HEIGHT</span> <span class="comment">// 1080</span></span><br><span class="line">    <span class="keyword">let</span> scale = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (w / h &gt; nw / nh) &#123;</span><br><span class="line">        scale = h / nh</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        scale = w / nw</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> left = (w - <span class="variable constant_">WINDOW_WIDTH</span> * scale) / <span class="number">2</span></span><br><span class="line">    <span class="keyword">const</span> top = (h - <span class="variable constant_">WINDOW_HEIGHT</span> * scale) / <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;changeScale&#x27;</span>, scale)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">computedMapBoxStyle</span>(scale, top, left)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="string">`transform-origin:left top;transform: scale(<span class="subst">$&#123;scale&#125;</span>);width:<span class="subst">$&#123;WINDOW_WIDTH&#125;</span>px;height:<span class="subst">$&#123;WINDOW_HEIGHT&#125;</span>px;margin-left:<span class="subst">$&#123;left&#125;</span>px;margin-top:<span class="subst">$&#123;top&#125;</span>px`</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 适配 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依-登陆</title>
      <link href="/posts/47241.html"/>
      <url>/posts/47241.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="登录-若依"><a href="#登录-若依" class="headerlink" title="登录(若依)"></a>登录(若依)</h1><h6 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h6><p>● <a href="https://blog.csdn.net/liuzixin_lzx/article/details/113172451">https://blog.csdn.net/liuzixin_lzx/article/details/113172451</a></p><h6 id="方法解析"><a href="#方法解析" class="headerlink" title="方法解析"></a>方法解析</h6><p><p>handleLogin</p><br>created中获取验证码图片（getCodeImg接口）和cookie（有cookie则填入表单）<br>1、表单校验是否通过<br>2、判断是否记住密码（记住则将账号密码存入cookie，否则删除cookie已有的信息）<br>3、触发vuex中Login方法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getCode</span>();</span><br><span class="line">  <span class="variable language_">this</span>.<span class="title function_">getCookie</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">getCode</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">getCodeImg</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">codeUrl</span> = <span class="string">&quot;data:image/gif;base64,&quot;</span> + res.<span class="property">img</span>;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">uuid</span> = res.<span class="property">uuid</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">getCookie</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> username = <span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> password = <span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="keyword">const</span> rememberMe = <span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;rememberMe&#x27;</span>)</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">loginForm</span> = &#123;</span><br><span class="line">      <span class="attr">username</span>: username === <span class="literal">undefined</span> ? <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">username</span> : username,</span><br><span class="line">      <span class="attr">password</span>: password === <span class="literal">undefined</span> ? <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">password</span> : <span class="title function_">decrypt</span>(password),</span><br><span class="line">      <span class="attr">rememberMe</span>: rememberMe === <span class="literal">undefined</span> ? <span class="literal">false</span> : <span class="title class_">Boolean</span>(rememberMe)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">handleLogin</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">loginForm</span>.<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">rememberMe</span>) &#123;</span><br><span class="line">          <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;username&quot;</span>, <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">username</span>, &#123; <span class="attr">expires</span>: <span class="number">30</span> &#125;);</span><br><span class="line">          <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;password&quot;</span>, <span class="title function_">encrypt</span>(<span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">password</span>), &#123; <span class="attr">expires</span>: <span class="number">30</span> &#125;);</span><br><span class="line">          <span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&#x27;rememberMe&#x27;</span>, <span class="variable language_">this</span>.<span class="property">loginForm</span>.<span class="property">rememberMe</span>, &#123; <span class="attr">expires</span>: <span class="number">30</span> &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">          <span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">          <span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&#x27;rememberMe&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span></span><br><span class="line">          .<span class="title function_">dispatch</span>(<span class="string">&quot;Login&quot;</span>, <span class="variable language_">this</span>.<span class="property">loginForm</span>)</span><br><span class="line">          .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(&#123; <span class="attr">path</span>: <span class="variable language_">this</span>.<span class="property">redirect</span> || <span class="string">&quot;/&quot;</span> &#125;);</span><br><span class="line">          &#125;)</span><br><span class="line">          .<span class="title function_">catch</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getCode</span>();</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><p>Login</p><br>4、将账号信息作为参数请求login接口<br>5、请求成功获取token存入cookie</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; login, logout, getInfo &#125; <span class="keyword">from</span> <span class="string">&#x27;@/api/login&#x27;</span></span><br><span class="line">......</span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="comment">// 登录</span></span><br><span class="line">    <span class="title class_">Login</span>(&#123; commit &#125;, userInfo) &#123;</span><br><span class="line">      <span class="keyword">const</span> username = userInfo.<span class="property">username</span>.<span class="title function_">trim</span>()</span><br><span class="line">      <span class="keyword">const</span> password = userInfo.<span class="property">password</span></span><br><span class="line">      <span class="keyword">const</span> code = userInfo.<span class="property">code</span></span><br><span class="line">      <span class="keyword">const</span> uuid = userInfo.<span class="property">uuid</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">login</span>(username, password, code, uuid).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">setToken</span>(res.<span class="property">token</span>)</span><br><span class="line">          <span class="title function_">commit</span>(<span class="string">&#x27;SET_TOKEN&#x27;</span>, res.<span class="property">token</span>)</span><br><span class="line">          <span class="title function_">resolve</span>()</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="title function_">reject</span>(error)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    ......</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>6、resolve后跳转页面完成登录</p><h6 id="记住密码失效问题"><a href="#记住密码失效问题" class="headerlink" title="记住密码失效问题"></a>记住密码失效问题</h6><p>在直播项目的平台和后台登陆中都发现了一个bug，选择记住密码后重新登录显示密码错误<br>并且在控制台打印报错如下：<br><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221020153135434.png" alt="image-20221020153135434"></p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221020153145886.png" alt="image-20221020153145886"></p><p>查找原因：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">JSEncrypt</span> <span class="keyword">from</span> <span class="string">&#x27;jsencrypt/bin/jsencrypt.min&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 公钥</span></span><br><span class="line"><span class="keyword">const</span> publicKey =</span><br><span class="line">    <span class="string">&#x27;MFwwDQYJKoZIhvcNAQEBBQADSwAwSAJBAKoR8mX0rGKLqzcWmOzbfj64K8ZIgOdH\n&#x27;</span> +</span><br><span class="line">    <span class="string">&#x27;nzkXSOVOZbFu/TJhZ7rFAN+eaGkl3C4buccQd/EjEsj9ir7ijT7h96MCAwEAAQ==&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 私钥</span></span><br><span class="line"><span class="keyword">const</span> privateKey =</span><br><span class="line">    <span class="string">&#x27;MIIBVAIBADANBgkqhkiG9w0BAQEFAASCAT4wggE6AgEAAkEAqhHyZfSsYourNxaY7Nt+PrgrxkiA50efORdI5U5lsW79MmFnusUA355oaSXcLhu5xxB38SMSyP2KvuKNPuH3owIDAQABAkAfoiLyL+Z4lf4Myxk6xUDgLaWGximj20CUf+5BKKnlrK+Ed8gAkM0HqoTt2UZwA5E2MzS4EI2gjfQhz5X28uqxAiEA3wNFxfrCZlSZHb0gn2zDpWowcSxQAgiCstxGUoOqlW8CIQDDOerGKH5OmCJ4Z21v+F25WaHYPxCFMvwxpcw99EcvDQIgIdhDTIqD2jfYjPTY8Jj3EDGPbH2HHuffvflECt3Ek60CIQCFRlCkHpi7hthhYhovyloRYsM+IS9h/0BzlEAuO0ktMQIgSPT3aFAgJYwKpqRYKlLDVcflZFCKY7u3UP8iWi1Qw0Y=&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">encrypt</span>(<span class="params">txt</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> encryptor = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>()</span><br><span class="line">    encryptor.<span class="title function_">setPublicKey</span>(publicKey) <span class="comment">// 设置公钥</span></span><br><span class="line">    <span class="keyword">return</span> encryptor.<span class="title function_">encrypt</span>(txt) <span class="comment">// 对数据进行加密</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">decrypt</span>(<span class="params">txt</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> encryptor = <span class="keyword">new</span> <span class="title class_">JSEncrypt</span>()</span><br><span class="line">    encryptor.<span class="title function_">setPrivateKey</span>(privateKey) <span class="comment">// 设置私钥</span></span><br><span class="line">    <span class="keyword">return</span> encryptor.<span class="title function_">decrypt</span>(txt) <span class="comment">// 对数据进行解密</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>解决方案：<br>之前未配置私钥，私钥需与后端保持一致！！！</p>]]></content>
      
      
      <categories>
          
          <category> 后台系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 若依 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>若依-菜单管理</title>
      <link href="/posts/63142.html"/>
      <url>/posts/63142.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>菜单管理<br>参考文献<br><a href="https://blog.csdn.net/liuzixin_lzx/article/details/113179174">https://blog.csdn.net/liuzixin_lzx/article/details/113179174</a><br>菜单列表显示<br>1.构造树型结构数据<br>在utils文件夹下创建ruoyi.js 在里添加并导出下方代码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 构造树型结构数据</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; data 数据源</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; id id字段 默认 &#x27;id&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; parentId 父节点字段 默认 &#x27;parentId&#x27;</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; children 孩子节点字段 默认 &#x27;children&#x27;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">handleTree</span>(<span class="params">data, id, parentId, children</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> config = &#123;</span><br><span class="line"><span class="attr">id</span>: id || <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line"><span class="attr">parentId</span>: parentId || <span class="string">&#x27;parentId&#x27;</span>,</span><br><span class="line"><span class="attr">childrenList</span>: children || <span class="string">&#x27;children&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> childrenListMap = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> nodeIds = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> tree = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> d <span class="keyword">of</span> data) &#123;</span><br><span class="line"><span class="keyword">let</span> parentId = d[config.<span class="property">parentId</span>];</span><br><span class="line"><span class="keyword">if</span> (childrenListMap[parentId] == <span class="literal">null</span>) &#123;</span><br><span class="line">childrenListMap[parentId] = [];</span><br><span class="line">&#125;</span><br><span class="line">nodeIds[d[config.<span class="property">id</span>]] = d;</span><br><span class="line">childrenListMap[parentId].<span class="title function_">push</span>(d);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> d <span class="keyword">of</span> data) &#123;</span><br><span class="line"><span class="keyword">let</span> parentId = d[config.<span class="property">parentId</span>];</span><br><span class="line"><span class="keyword">if</span> (nodeIds[parentId] == <span class="literal">null</span>) &#123;</span><br><span class="line">tree.<span class="title function_">push</span>(d);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> t <span class="keyword">of</span> tree) &#123;</span><br><span class="line"><span class="title function_">adaptToChildrenList</span>(t);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">adaptToChildrenList</span>(<span class="params">o</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (childrenListMap[o[config.<span class="property">id</span>]] !== <span class="literal">null</span>) &#123;</span><br><span class="line">o[config.<span class="property">childrenList</span>] = childrenListMap[o[config.<span class="property">id</span>]];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (o[config.<span class="property">childrenList</span>]) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> c <span class="keyword">of</span> o[config.<span class="property">childrenList</span>]) &#123;</span><br><span class="line"><span class="title function_">adaptToChildrenList</span>(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.在main.js中引用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;handleTree&#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/ruoyi&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">handleTree</span> = handleTree</span><br></pre></td></tr></table></figure><p>3.在menu中使用</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="comment">// 查询参数</span></span><br><span class="line"><span class="attr">queryParams</span>: &#123;</span><br><span class="line"><span class="attr">menuName</span>: <span class="literal">undefined</span>, <span class="comment">// 菜单名称</span></span><br><span class="line"><span class="attr">status</span>: <span class="literal">undefined</span> <span class="comment">// 菜单状态</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">getList</span>();</span><br><span class="line">&#125;</span><br><span class="line">,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line"><span class="comment">// 查询菜单列表</span></span><br><span class="line"><span class="title function_">getList</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">// listMenu为请求的列表接口 this.queryParams为搜索需要传入的参数</span></span><br><span class="line"><span class="title function_">listMenu</span>(<span class="variable language_">this</span>.<span class="property">queryParams</span>).<span class="title function_">then</span>(<span class="function"><span class="params">response</span> =&gt;</span> &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">menuList</span> = <span class="variable language_">this</span>.<span class="title function_">handleTree</span>(response.<span class="property">data</span>, <span class="string">&quot;menuId&quot;</span>);</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">loading</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>页面配合elementui的表格一起使用</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- isExpandAll默认展开方式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-if</span>=<span class="string">&quot;refreshTable&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">v-loading</span>=<span class="string">&quot;loading&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:data</span>=<span class="string">&quot;menuList&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">row-key</span>=<span class="string">&quot;menuId&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:default-expand-all</span>=<span class="string">&quot;isExpandAll&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:tree-props</span>=<span class="string">&quot;&#123;children: &#x27;children&#x27;, hasChildren: &#x27;hasChildren&#x27;&#125;&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;menuName&quot;</span> <span class="attr">label</span>=<span class="string">&quot;菜单名称&quot;</span> <span class="attr">:show-overflow-tooltip</span>=<span class="string">&quot;true&quot;</span> <span class="attr">width</span>=<span class="string">&quot;160&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">label</span>=<span class="string">&quot;图标&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">width</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">svg-icon</span> <span class="attr">:icon-class</span>=<span class="string">&quot;scope.row.icon&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;orderNum&quot;</span> <span class="attr">label</span>=<span class="string">&quot;排序&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;perms&quot;</span> <span class="attr">label</span>=<span class="string">&quot;权限标识&quot;</span> <span class="attr">:show-overflow-tooltip</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;component&quot;</span> <span class="attr">label</span>=<span class="string">&quot;组件路径&quot;</span> <span class="attr">:show-overflow-tooltip</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;status&quot;</span> <span class="attr">label</span>=<span class="string">&quot;状态&quot;</span> <span class="attr">width</span>=<span class="string">&quot;80&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dict-tag</span> <span class="attr">:options</span>=<span class="string">&quot;dict.type.sys_normal_disable&quot;</span> <span class="attr">:value</span>=<span class="string">&quot;scope.row.status&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;创建时间&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;createTime&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; parseTime(scope.row.createTime) &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span> <span class="attr">class-name</span>=<span class="string">&quot;small-padding fixed-width&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;handleUpdate(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>修改</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">icon</span>=<span class="string">&quot;el-icon-plus&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;handleAdd(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>新增</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">el-button</span></span></span><br><span class="line"><span class="tag">          <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">type</span>=<span class="string">&quot;text&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span><br><span class="line"><span class="tag">          @<span class="attr">click</span>=<span class="string">&quot;handleDelete(scope.row)&quot;</span></span></span><br><span class="line"><span class="tag">      &gt;</span>删除</span><br><span class="line">      <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后台系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 若依 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>什么是Vuex</title>
      <link href="/posts/65033.html"/>
      <url>/posts/65033.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="什么是vuex"><a href="#什么是vuex" class="headerlink" title="什么是vuex"></a>什么是vuex</h4><p>vue提供的一个状态管理模式，解决不同组件数据共享问题</p><h4 id="vuex有几个属性"><a href="#vuex有几个属性" class="headerlink" title="vuex有几个属性"></a>vuex有几个属性</h4><h5 id="state"><a href="#state" class="headerlink" title="state"></a><strong>state</strong></h5><p>state是放置所有公共状态的属性，</p><p><code>$store.state.属性名</code> <code>...mapState([&#39;属性名&#39;])</code></p><h5 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a><strong>mutations</strong></h5><p>state数据的修改只能通过mutations，并且mutations必须是同步更新，目的是形成<code>数据快照</code></p><p>数据快照：一次mutation的执行，<strong>立刻</strong>得到一种视图状态，因为是立刻，所以必须是同步</p><p><code>this.$store.commit(&#39;函数名&#39;, 10)</code> <code>...mapMutations([&#39;函数名&#39;])</code></p><h5 id="actions"><a href="#actions" class="headerlink" title="actions"></a><strong>actions</strong></h5><p>state是存放数据的，mutations是同步更新数据，actions则负责进行异步操作</p><p><code>this.$store.dispatch(&#39;函数名&#39;,传参)</code>   <code>...mapActions([&#39;函数名&#39;])</code></p><h5 id="getters"><a href="#getters" class="headerlink" title="getters"></a><strong>getters</strong></h5><p>类似于计算属性，有时我们还需要从state中派生出一些状态，这些状态是<strong>依赖state</strong>的，此时会用到getters</p><p><code>$store.getters.filterList</code> <code>...mapGetters([&#39;filterList&#39;])</code></p><h5 id="modules"><a href="#modules" class="headerlink" title="modules"></a><strong>modules</strong></h5><blockquote><p>模块化，由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿</p><p><strong>命名空间</strong> <code>namespaced</code></p></blockquote><h4 id="什么是mapState"><a href="#什么是mapState" class="headerlink" title="什么是mapState"></a>什么是mapState</h4><ul><li>…….</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>高性能渲染十万条数据</title>
      <link href="/posts/21040.html"/>
      <url>/posts/21040.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>在实际工作中，我们很少会遇到一次性需要向页面中插入大量数据的情况，但是为了丰富我们的知识体系，我们有必要了解并清楚当遇到大量数据时，如何才能在不卡主页面的情况下渲染数据，以及其中背后的原理。</p><p>对于一次性插入大量数据的情况，一般有两种做法：</p><ol><li>时间分片</li><li>虚拟列表</li></ol><h3 id="1、时间分片"><a href="#1、时间分片" class="headerlink" title="1、时间分片"></a>1、时间分片</h3><h4 id="使用定时器"><a href="#使用定时器" class="headerlink" title="使用定时器"></a>使用定时器</h4><p>从上面的例子，我们已经知道，页面的卡顿是由于同时渲染大量DOM所引起的，所以我们考虑将渲染过程分批进行</p><p>在这里，我们使用<code>setTimeout</code>来实现分批渲染</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要插入的容器</span></span><br><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入十万条数据</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">100000</span>;</span><br><span class="line"><span class="comment">// 一次插入 20 条</span></span><br><span class="line"><span class="keyword">let</span> once = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//总页数</span></span><br><span class="line"><span class="keyword">let</span> page = total/once</span><br><span class="line"><span class="comment">//每条记录的索引</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//循环加载数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">curTotal,curIndex</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(curTotal &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每页多少条</span></span><br><span class="line">    <span class="keyword">let</span> pageCount = <span class="title class_">Math</span>.<span class="title function_">min</span>(curTotal , once);</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pageCount; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">            li.<span class="property">innerText</span> = curIndex + i + <span class="string">&#x27; : &#x27;</span> + ~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * total)</span><br><span class="line">            ul.<span class="title function_">appendChild</span>(li)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">loop</span>(curTotal - pageCount,curIndex + pageCount)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loop</span>(total,index);</span><br></pre></td></tr></table></figure><p>用一个gif图来看一下效果</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/10/16d18aa76affbeb0~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>我们可以看到页面加载的时间已经非常快了，每次刷新时可以很快的看到第一屏的所有数据，但是当我们快速滚动页面的时候，会发现页面出现闪屏或白屏的现象</p><h4 id="使用-requestAnimationFrame"><a href="#使用-requestAnimationFrame" class="headerlink" title="使用 requestAnimationFrame"></a>使用 requestAnimationFrame</h4><p>与<code>setTimeout</code>相比，<code>requestAnimationFrame</code>最大的优势是由系统来决定回调函数的执行时机。</p><p>如果屏幕刷新率是60Hz,那么回调函数就每16.7ms被执行一次，如果刷新率是75Hz，那么这个时间间隔就变成了1000/75=13.3ms，换句话说就是，<code>requestAnimationFrame</code>的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象。</p><p>我们使用<code>requestAnimationFrame</code>来进行分批渲染：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要插入的容器</span></span><br><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入十万条数据</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">100000</span>;</span><br><span class="line"><span class="comment">// 一次插入 20 条</span></span><br><span class="line"><span class="keyword">let</span> once = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//总页数</span></span><br><span class="line"><span class="keyword">let</span> page = total/once</span><br><span class="line"><span class="comment">//每条记录的索引</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//循环加载数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">curTotal,curIndex</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(curTotal &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每页多少条</span></span><br><span class="line">    <span class="keyword">let</span> pageCount = <span class="title class_">Math</span>.<span class="title function_">min</span>(curTotal , once);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pageCount; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">            li.<span class="property">innerText</span> = curIndex + i + <span class="string">&#x27; : &#x27;</span> + ~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * total)</span><br><span class="line">            ul.<span class="title function_">appendChild</span>(li)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">loop</span>(curTotal - pageCount,curIndex + pageCount)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loop</span>(total,index);</span><br></pre></td></tr></table></figure><p>看下效果</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/9/10/16d18aa76abe9fe3~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>我们可以看到，页面加载的速度很快，并且滚动的时候，也很流畅没有出现闪烁丢帧的现象。</p><p>这就结束了么，还可以再优化么？</p><p>当然~~</p><h4 id="使用-DocumentFragment"><a href="#使用-DocumentFragment" class="headerlink" title="使用 DocumentFragment"></a>使用 DocumentFragment</h4><p>先解释一下什么是 DocumentFragment ，文献引用自<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FDocumentFragment">MDN</a></p><blockquote><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DocumentFragment`，文档片段接口，表示一个没有父级文件的最小文档对象。它被作为一个轻量版的`Document`使用，用于存储已排好版的或尚未打理好格式的XML片段。最大的区别是因为`DocumentFragment`不是真实DOM树的一部分，它的变化不会触发DOM树的（重新渲染) ，且不会导致性能等问题。</span><br><span class="line">可以使用`document.createDocumentFragment`方法或者构造函数来创建一个空的`DocumentFragment</span><br></pre></td></tr></table></figure></blockquote><p>从MDN的说明中，我们得知<code>DocumentFragments</code>是DOM节点，但并不是DOM树的一部分，可以认为是存在内存中的，所以将子元素插入到文档片段时不会引起页面回流。</p><p>当<code>append</code>元素到<code>document</code>中时，被<code>append</code>进去的元素的样式表的计算是同步发生的，此时调用 getComputedStyle 可以得到样式的计算值。 而<code>append</code>元素到<code>documentFragment</code> 中时，是不会计算元素的样式表，所以<code>documentFragment</code> 性能更优。当然现在浏览器的优化已经做的很好了， 当<code>append</code>元素到<code>document</code>中后，没有访问 getComputedStyle 之类的方法时，现代浏览器也可以把样式表的计算推迟到脚本执行之后。</p><p>最后修改代码如下：</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要插入的容器</span></span><br><span class="line"><span class="keyword">let</span> ul = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;container&#x27;</span>);</span><br><span class="line"><span class="comment">// 插入十万条数据</span></span><br><span class="line"><span class="keyword">let</span> total = <span class="number">100000</span>;</span><br><span class="line"><span class="comment">// 一次插入 20 条</span></span><br><span class="line"><span class="keyword">let</span> once = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//总页数</span></span><br><span class="line"><span class="keyword">let</span> page = total/once</span><br><span class="line"><span class="comment">//每条记录的索引</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//循环加载数据</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params">curTotal,curIndex</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(curTotal &lt;= <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每页多少条</span></span><br><span class="line">    <span class="keyword">let</span> pageCount = <span class="title class_">Math</span>.<span class="title function_">min</span>(curTotal , once);</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">requestAnimationFrame</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">let</span> fragment = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; pageCount; i++)&#123;</span><br><span class="line">            <span class="keyword">let</span> li = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;li&#x27;</span>);</span><br><span class="line">            li.<span class="property">innerText</span> = curIndex + i + <span class="string">&#x27; : &#x27;</span> + ~~(<span class="title class_">Math</span>.<span class="title function_">random</span>() * total)</span><br><span class="line">            fragment.<span class="title function_">appendChild</span>(li)</span><br><span class="line">        &#125;</span><br><span class="line">        ul.<span class="title function_">appendChild</span>(fragment)</span><br><span class="line">        <span class="title function_">loop</span>(curTotal - pageCount,curIndex + pageCount)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">loop</span>(total,index);</span><br></pre></td></tr></table></figure><h3 id="2、虚拟列表"><a href="#2、虚拟列表" class="headerlink" title="2、虚拟列表"></a>2、虚拟列表</h3><h4 id="什么是虚拟列表"><a href="#什么是虚拟列表" class="headerlink" title="什么是虚拟列表"></a>什么是虚拟列表</h4><p><code>虚拟列表</code>其实是按需显示的一种实现，即只对<code>可见区域</code>进行渲染，对<code>非可见区域</code>中的数据不渲染或部分渲染的技术，从而达到极高的渲染性能。</p><p>假设有1万条记录需要同时渲染，我们屏幕的<code>可见区域</code>的高度为<code>500px</code>,而列表项的高度为<code>50px</code>，则此时我们在屏幕中最多只能看到10个列表项，那么在首次渲染的时候，我们只需加载10条即可。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15195cf16a558~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>说完首次加载，再分析一下当滚动发生时，我们可以通过计算当前滚动值得知此时在屏幕<code>可见区域</code>应该显示的列表项。</p><p>假设滚动发生，滚动条距顶部的位置为<code>150px</code>,则我们可得知在<code>可见区域</code>内的列表项为<code>第4项</code>至`第13项。</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e15197c273cbd9~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><p>虚拟列表的实现，实际上就是在首屏加载的时候，只加载<code>可视区域</code>内需要的列表项，当滚动发生时，动态通过计算获得<code>可视区域</code>内的列表项，并将<code>非可视区域</code>内存在的列表项删除。</p><ul><li>计算当前<code>可视区域</code>起始数据索引(<code>startIndex</code>)</li><li>计算当前<code>可视区域</code>结束数据索引(<code>endIndex</code>)</li><li>计算当前<code>可视区域的</code>数据，并渲染到页面中</li><li>计算<code>startIndex</code>对应的数据在整个列表中的偏移位置<code>startOffset</code>并设置到列表上</li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519a393dee2c~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>由于只是对<code>可视区域</code>内的列表项进行渲染，所以为了保持列表容器的高度并可正常的触发滚动，将Html结构设计成如下结构：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;infinite-list-container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;infinite-list-phantom&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;infinite-list&quot;</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- item-1 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- item-2 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- ...... --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- item-n --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>infinite-list-container</code> 为<code>可视区域</code>的容器</li><li><code>infinite-list-phantom</code> 为容器内的占位，高度为总列表高度，用于形成滚动条</li><li><code>infinite-list</code> 为列表项的<code>渲染区域</code></li></ul><p>接着，监听<code>infinite-list-container</code>的<code>scroll</code>事件，获取滚动位置<code>scrollTop</code></p><ul><li>假定<code>可视区域</code>高度固定，称之为<code>screenHeight</code></li><li>假定<code>列表每项</code>高度固定，称之为<code>itemSize</code></li><li>假定<code>列表数据</code>称之为<code>listData</code></li><li>假定<code>当前滚动位置</code>称之为<code>scrollTop</code></li></ul><p>则可推算出：</p><ul><li>列表总高度<code>listHeight</code> = listData.length * itemSize</li><li>可显示的列表项数<code>visibleCount</code> = Math.ceil(screenHeight / itemSize)</li><li>数据的起始索引<code>startIndex</code> = Math.floor(scrollTop / itemSize)</li><li>数据的结束索引<code>endIndex</code> = startIndex + visibleCount</li><li>列表显示数据为<code>visibleData</code> = listData.slice(startIndex,endIndex)</li></ul><p>当滚动后，由于<code>渲染区域</code>相对于<code>可视区域</code>已经发生了偏移，此时我需要获取一个偏移量<code>startOffset</code>，通过样式控制将<code>渲染区域</code>偏移至<code>可视区域</code>中。</p><ul><li>偏移量<code>startOffset</code> = scrollTop - (scrollTop % itemSize);</li></ul><p>最终的<code>简易代码</code>如下：</p><figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div ref=<span class="string">&quot;list&quot;</span> <span class="keyword">class</span>=<span class="string">&quot;infinite-list-container&quot;</span> <span class="variable">@scroll</span>=<span class="string">&quot;scrollEvent($event)&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;infinite-list-phantom&quot;</span> <span class="symbol">:style=<span class="string">&quot;&#123; height: listHeight + &#x27;px&#x27; &#125;&quot;</span>&gt;&lt;/div&gt;</span></span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;infinite-list&quot;</span> <span class="symbol">:style=<span class="string">&quot;&#123; transform: getTransform &#125;&quot;</span>&gt;</span></span><br><span class="line">      &lt;div ref=<span class="string">&quot;items&quot;</span></span><br><span class="line">        <span class="keyword">class</span>=<span class="string">&quot;infinite-list-item&quot;</span></span><br><span class="line">        v-<span class="keyword">for</span>=<span class="string">&quot;item in visibleData&quot;</span></span><br><span class="line">        <span class="symbol">:key=<span class="string">&quot;item.id&quot;</span></span></span><br><span class="line">        <span class="symbol">:style=<span class="string">&quot;&#123; height: itemSize + &#x27;px&#x27;,lineHeight: itemSize + &#x27;px&#x27; &#125;&quot;</span></span></span><br><span class="line">      &gt;&#123;&#123; item.value &#125;&#125;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/div</span>&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">&lt;/template</span>&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  <span class="symbol">name:</span><span class="string">&#x27;VirtualList&#x27;</span>,</span><br><span class="line">  <span class="symbol">props:</span> &#123;</span><br><span class="line">    <span class="regexp">//</span>所有列表数据</span><br><span class="line">    <span class="symbol">listData:</span>&#123;</span><br><span class="line">      <span class="symbol">type:</span>Array,</span><br><span class="line">      <span class="symbol">default:</span>()=&gt;[]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="regexp">//</span>每项高度</span><br><span class="line">    <span class="symbol">itemSize:</span> &#123;</span><br><span class="line">      <span class="symbol">type:</span> Number,</span><br><span class="line">      <span class="symbol">default:</span><span class="number">200</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="symbol">computed:</span>&#123;</span><br><span class="line">    <span class="regexp">//</span>列表总高度</span><br><span class="line">    listHeight()&#123;</span><br><span class="line">      <span class="keyword">return</span> this.listData.length * this.itemSize;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="regexp">//</span>可显示的列表项数</span><br><span class="line">    visibleCount()&#123;</span><br><span class="line">      <span class="keyword">return</span> Math.ceil(this.screenHeight / this.itemSize)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="regexp">//</span>偏移量对应的style</span><br><span class="line">    getTransform()&#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">`translate3d(0,$&#123;this.startOffset&#125;px,0)`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="regexp">//</span>获取真实显示列表数据</span><br><span class="line">    visibleData()&#123;</span><br><span class="line">      <span class="keyword">return</span> this.listData.slice(this.start, Math.min(this.<span class="keyword">end</span>,this.listData.length));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    this.screenHeight = this.<span class="variable">$el</span>.clientHeight;</span><br><span class="line">    this.start = <span class="number">0</span>;</span><br><span class="line">    this.<span class="keyword">end</span> = this.start + this.visibleCount;</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="regexp">//</span>可视区域高度</span><br><span class="line">      <span class="symbol">screenHeight:</span><span class="number">0</span>,</span><br><span class="line">      <span class="regexp">//</span>偏移量</span><br><span class="line">      <span class="symbol">startOffset:</span><span class="number">0</span>,</span><br><span class="line">      <span class="regexp">//</span>起始索引</span><br><span class="line">      <span class="symbol">start:</span><span class="number">0</span>,</span><br><span class="line">      <span class="regexp">//</span>结束索引</span><br><span class="line">      <span class="symbol">end:</span>null,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="symbol">methods:</span> &#123;</span><br><span class="line">    scrollEvent() &#123;</span><br><span class="line">      <span class="regexp">//</span>当前滚动位置</span><br><span class="line">      let scrollTop = this.<span class="variable">$refs</span>.list.scrollTop;</span><br><span class="line">      <span class="regexp">//</span>此时的开始索引</span><br><span class="line">      this.start = Math.floor(scrollTop / this.itemSize);</span><br><span class="line">      <span class="regexp">//</span>此时的结束索引</span><br><span class="line">      this.<span class="keyword">end</span> = this.start + this.visibleCount;</span><br><span class="line">      <span class="regexp">//</span>此时的偏移量</span><br><span class="line">      this.startOffset = scrollTop - (scrollTop % this.itemSize);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fcodesandbox.io%2Fs%2Fvirtuallist-1-rp8pi">点击查看在线DEMO及完整代码</a></p><p>最终效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e017d7bba3~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><h4 id="列表项动态高度"><a href="#列表项动态高度" class="headerlink" title="列表项动态高度"></a>列表项动态高度</h4><p>在之前的实现中，列表项的高度是固定的，因为高度固定，所以可以很轻易的获取列表项的整体高度以及滚动时的显示数据与对应的偏移量。而实际应用的时候，当列表中包含文本之类的可变内容，会导致列表项的高度并不相同。</p><p>比如这种情况：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e1519f1e121be9~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>在虚拟列表中应用动态高度的解决方案一般有如下三种：</p><blockquote><p>1.对组件属性<code>itemSize</code>进行扩展，支持传递类型为<code>数字</code>、<code>数组</code>、<code>函数</code></p></blockquote><ul><li>可以是一个固定值，如 100，此时列表项是固高的</li><li>可以是一个包含所有列表项高度的数据，如 [50, 20, 100, 80, …]</li><li>可以是一个根据列表项索引返回其高度的函数：(index: number): number</li></ul><p>这种方式虽然有比较好的灵活度，但仅适用于可以预先知道或可以通过计算得知列表项高度的情况，依然无法解决列表项高度由内容撑开的情况。</p><blockquote><p>2.将列表项<code>渲染到屏幕外</code>，对其高度进行测量并缓存，然后再将其渲染至可视区域内。</p></blockquote><p>由于预先渲染至屏幕外，再渲染至屏幕内，这导致渲染成本增加一倍，这对于数百万用户在低端移动设备上使用的产品来说是不切实际的。</p><blockquote><p>3.以<code>预估高度</code>先行渲染，然后获取真实高度并缓存。</p></blockquote><p>这是我选择的实现方式，可以避免前两种方案的不足。</p><p>接下来，来看如何简易的实现：</p><p>定义组件属性<code>estimatedItemSize</code>,用于接收<code>预估高度</code></p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  <span class="comment">//预估高度</span></span><br><span class="line">  estimatedItemSize:&#123;</span><br><span class="line">    type:Number</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>定义<code>positions</code>，用于列表项渲染后存储<code>每一项的高度以及位置</code>信息，</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">this</span>.positions = [</span><br><span class="line">  <span class="comment">// &#123;</span></span><br><span class="line">  <span class="comment">//   top:0,</span></span><br><span class="line">  <span class="comment">//   bottom:100,</span></span><br><span class="line">  <span class="comment">//   height:100</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>并在初始时根据<code>estimatedItemSize</code>对<code>positions</code>进行初始化。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">initPositions()&#123;</span><br><span class="line">  <span class="keyword">this</span>.positions = <span class="keyword">this</span>.listData.map((item,index)=&gt;&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      index,</span><br><span class="line">      height:<span class="keyword">this</span>.estimatedItemSize,</span><br><span class="line">      top:index * <span class="keyword">this</span>.estimatedItemSize,</span><br><span class="line">      bottom:(index + <span class="number">1</span>) * <span class="keyword">this</span>.estimatedItemSize</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于列表项高度不定，并且我们维护了<code>positions</code>，用于记录每一项的位置，而<code>列表高度</code>实际就等于列表中最后一项的底部距离列表顶部的位置。</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表总高度</span></span><br><span class="line">listHeight()&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.positions[<span class="keyword">this</span>.positions.length - <span class="number">1</span>].bottom;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于需要在<code>渲染完成</code>后，获取列表每项的位置信息并缓存，所以使用钩子函数<code>updated</code>来实现：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">updated()&#123;</span><br><span class="line">  let <span class="attr">nodes</span> = this.<span class="variable">$refs</span>.items<span class="comment">;</span></span><br><span class="line">  nodes.forEach((node)=&gt;&#123;</span><br><span class="line">    let <span class="attr">rect</span> = node.getBoundingClientRect()<span class="comment">;</span></span><br><span class="line">    let <span class="attr">height</span> = rect.height<span class="comment">;</span></span><br><span class="line">    let <span class="attr">index</span> = +node.id.slice(<span class="number">1</span>)</span><br><span class="line">    let <span class="attr">oldHeight</span> = this.positions[index].height<span class="comment">;</span></span><br><span class="line">    let <span class="attr">dValue</span> = oldHeight - height<span class="comment">;</span></span><br><span class="line">    //存在差值</span><br><span class="line">    if(dValue)&#123;</span><br><span class="line">      this.positions<span class="section">[index]</span>.<span class="attr">bottom</span> = this.positions[index].bottom - dValue<span class="comment">;</span></span><br><span class="line">      this.positions<span class="section">[index]</span>.<span class="attr">height</span> = height<span class="comment">;</span></span><br><span class="line">      for(let <span class="attr">k</span> = index + <span class="number">1</span><span class="comment">;k&lt;this.positions.length; k++)&#123;</span></span><br><span class="line">        this.positions<span class="section">[k]</span>.<span class="attr">top</span> = this.positions[k-<span class="number">1</span>].bottom<span class="comment">;</span></span><br><span class="line">        this.positions<span class="section">[k]</span>.<span class="attr">bottom</span> = this.positions[k].bottom - dValue<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>滚动后获取列表<code>开始索引</code>的方法修改为通过<code>缓存</code>获取：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获取列表起始索引</span></span><br><span class="line"><span class="title function_">getStartIndex</span>(<span class="params">scrollTop = <span class="number">0</span></span>)&#123;</span><br><span class="line">  <span class="keyword">let</span> item = <span class="variable language_">this</span>.<span class="property">positions</span>.<span class="title function_">find</span>(<span class="function"><span class="params">i</span> =&gt;</span> i &amp;&amp; i.<span class="property">bottom</span> &gt; scrollTop);</span><br><span class="line">  <span class="keyword">return</span> item.<span class="property">index</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由于我们的缓存数据，本身就是有顺序的，所以获取<code>开始索引</code>的方法可以考虑通过<code>二分查找</code>的方式来降低检索次数：</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line">//获取列表起始索引</span><br><span class="line">getStartIndex(<span class="attr">scrollTop</span> = <span class="number">0</span>)&#123;</span><br><span class="line">  //二分法查找</span><br><span class="line">  return this.binarySearch(this.positions,scrollTop)</span><br><span class="line">&#125;,</span><br><span class="line">//二分法查找</span><br><span class="line">binarySearch(list,value)&#123;</span><br><span class="line">  let <span class="attr">start</span> = <span class="number">0</span><span class="comment">;</span></span><br><span class="line">  let <span class="attr">end</span> = list.length - <span class="number">1</span><span class="comment">;</span></span><br><span class="line">  let <span class="attr">tempIndex</span> = null<span class="comment">;</span></span><br><span class="line">  while(start &lt;= end)&#123;</span><br><span class="line">    let <span class="attr">midIndex</span> = parseInt((start + end)/<span class="number">2</span>)<span class="comment">;</span></span><br><span class="line">    let <span class="attr">midValue</span> = list[midIndex].bottom<span class="comment">;</span></span><br><span class="line">    if(<span class="attr">midValue</span> === value)&#123;</span><br><span class="line">      return midIndex + 1<span class="comment">;</span></span><br><span class="line">    &#125;else if(midValue &lt; value)&#123;</span><br><span class="line">      <span class="attr">start</span> = midIndex + <span class="number">1</span><span class="comment">;</span></span><br><span class="line">    &#125;else if(midValue &gt; value)&#123;</span><br><span class="line">      if(<span class="attr">tempIndex</span> === null || tempIndex &gt; midIndex)&#123;</span><br><span class="line">        <span class="attr">tempIndex</span> = midIndex<span class="comment">;</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="attr">end</span> = end - <span class="number">1</span><span class="comment">;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return tempIndex<span class="comment">;</span></span><br><span class="line">&#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>滚动后将<code>偏移量</code>的获取方式变更：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">scrollEvent() &#123;</span><br><span class="line">  <span class="comment">//...省略</span></span><br><span class="line">  <span class="keyword">if</span>(<span class="keyword">this</span>.start &gt;= <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.startOffset = <span class="keyword">this</span>.positions[<span class="keyword">this</span>.start - <span class="number">1</span>].bottom</span><br><span class="line">  &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startOffset = <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fmarak%2FFaker.js%2F">faker.js</a> 来创建一些<code>随机数据</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">let</span> data = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">let</span> <span class="built_in">id</span> = 0; <span class="built_in">id</span> &lt; 10000; <span class="built_in">id</span>++) &#123;</span><br><span class="line">  data.push(&#123;</span><br><span class="line">    <span class="built_in">id</span>,</span><br><span class="line">    value: faker.lorem.sentences() // 长文本</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fcodesandbox.io%2Fs%2Fvirtuallist2-1bqk6">点击查看在线DEMO及完整代码</a></p><p>最终效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151e96584b690~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>从演示效果上看，我们实现了基于<code>文字内容动态撑高列表项</code>情况下的<code>虚拟列表</code>，但是我们可能会发现，当滚动过快时，会出现短暂的<code>白屏现象</code>。</p><p>为了使页面平滑滚动，我们还需要在<code>可见区域</code>的上方和下方渲染额外的项目，在滚动时给予一些<code>缓冲</code>，所以将屏幕分为三个区域：</p><ul><li>可视区域上方：<code>above</code></li><li>可视区域：<code>screen</code></li><li>可视区域下方：<code>below</code></li></ul><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151a59317cae7~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><p>定义组件属性<code>bufferScale</code>,用于接收<code>缓冲区数据</code>与<code>可视区数据</code>的<code>比例</code></p><figure class="highlight scss"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  <span class="comment">//缓冲区比例</span></span><br><span class="line">  bufferScale:&#123;</span><br><span class="line">    type:Number,</span><br><span class="line">    default:<span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可视区上方渲染条数<code>aboveCount</code>获取方式如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">aboveCount()&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.min(<span class="keyword">this</span>.start,<span class="keyword">this</span>.bufferScale * <span class="keyword">this</span>.visibleCount)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可视区下方渲染条数<code>belowCount</code>获取方式如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">belowCount()&#123;</span><br><span class="line">  <span class="keyword">return</span> Math.min(<span class="keyword">this</span>.listData.length - <span class="keyword">this</span>.end,<span class="keyword">this</span>.bufferScale * <span class="keyword">this</span>.visibleCount);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>真实渲染数据<code>visibleData</code>获取方式如下：</p><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line">visibleData()&#123;</span><br><span class="line">  let start = <span class="keyword">this</span>.start - <span class="keyword">this</span>.aboveCount;</span><br><span class="line">  let end = <span class="keyword">this</span>.end + <span class="keyword">this</span>.belowCount;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>._listData.slice(start, end);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><a href="https://link.juejin.cn/?target=https%3A%2F%2Fcodesandbox.io%2Fs%2Fvirtuallist-3-i3h9v">点击查看在线DEMO及完整代码</a></p><p>最终效果如下：</p><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2019/10/29/16e151ee0eb0fc89~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt="img"></p><blockquote><p>基于这个方案，个人开发了一个基于Vue2.x的虚拟列表组件：<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fchenqf%2Fvue-virtual-listview">vue-virtual-listview</a>,可<a href="https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2Fchenqf%2Fvue-virtual-listview">点击查看完整代码</a>。</p></blockquote><h4 id="面向未来"><a href="#面向未来" class="headerlink" title="面向未来"></a>面向未来</h4><p>在前文中我们使用<code>监听scroll事件</code>的方式来触发可视区域中数据的更新，当滚动发生后，scroll事件会频繁触发，很多时候会造成<code>重复计算</code>的问题，从性能上来说无疑存在浪费的情况。</p><p>可以使用<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FIntersectionObserver">IntersectionObserver</a>替换监听scroll事件，<code>IntersectionObserver</code>可以监听目标元素是否出现在可视区域内，在监听的回调事件中执行可视区域数据的更新，并且<code>IntersectionObserver</code>的监听回调是异步触发，不随着目标元素的滚动而触发，性能消耗极低。</p><h4 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h4><p>我们虽然实现了根据列表项动态高度下的虚拟列表，但如果列表项中包含图片，并且列表高度由图片撑开，由于图片会发送网络请求，此时无法保证我们在获取列表项真实高度时图片是否已经加载完成，从而造成计算不准确的情况。</p><p>这种情况下，如果我们能监听列表项的大小变化就能获取其真正的高度了。我们可以使用<a href="https://link.juejin.cn/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fzh-CN%2Fdocs%2FWeb%2FAPI%2FResizeObserver">ResizeObserver</a>来监听列表项内容区域的高度改变，从而实时获取每一列表项的高度。</p><p>不过遗憾的是，在撰写本文的时候，仅有少数<a href="https://link.juejin.cn/?target=https%3A%2F%2Fwww.caniuse.com%2F%23search%3DResizeObserver">浏览器支持</a><code>ResizeObserver</code>。</p>]]></content>
      
      
      <categories>
          
          <category> 提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue知识总结</title>
      <link href="/posts/58641.html"/>
      <url>/posts/58641.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、vue-修改数据页面不重新渲染"><a href="#1、vue-修改数据页面不重新渲染" class="headerlink" title="1、vue 修改数据页面不重新渲染"></a>1、vue 修改数据页面不重新渲染</h4><blockquote><p><code>vue2</code>是用过<code>Object.defineProperty</code>实现数据响应式, 组件初始化时，对 data 中的 item 进行递归遍历，对 item 的每一个属性进行劫持，添加 set , get 方法。我们后来 新加的属性 ，并没有通过<code>Object.defineProperty</code>设置成响应式数据，修改后不会视图更新</p></blockquote><p><strong>通过数组索引号修改了数组，界面会不会相应更新？为什么？</strong></p><p>答：不会。vue 监听不到</p><p>vue 为什么没有提供 <code>arr[下标] = val</code> 变成响应式？</p><p>尤大：”因为性能问题，性能代价和获得的用户体验收益不成正比”</p><h6 id="数组-对象的响应式-，vue-里面是怎么处理的？"><a href="#数组-对象的响应式-，vue-里面是怎么处理的？" class="headerlink" title="数组/对象的响应式 ，vue 里面是怎么处理的？"></a><strong>数组/对象的响应式 ，vue 里面是怎么处理的？</strong></h6><p><strong>对象</strong>：使用了<code>Object.defineProperty</code>中的 get 和 set</p><blockquote><p>如何监测对象中的数据？<br>通过 setter 实现监视，且要在 new Vue 时就传⼊要监测的数据</p><ol><li>对象中后追加的属性，Vue 默认不做响应式处理</li><li>如需给后添加的属性做响应式，请使⽤如下 API：<br><code>Vue.set(target,propertyName/index,value)</code>  <code>vm.$set(target,propertyName/index,value)</code></li></ol></blockquote><p><strong><a href="https://cn.vuejs.org/v2/guide/list.html#%E6%95%B0%E7%BB%84%E6%9B%B4%E6%96%B0%E6%A3%80%E6%B5%8B">数组</a></strong>： <code>Vue</code>重写了数组的原型，更准确的表达是<strong>拦截</strong>了数组的原型</p><blockquote><p>如何监测数组中的数据？<br>通过包裹数组更新元素的⽅法实现，本质就是做了两件事：</p><ol><li>调⽤原⽣对应的⽅法对数组进⾏更新</li><li>重新解析模板，进⽽更新⻚⾯</li><li><p>在 Vue 修改数组中的某个元素⼀定要⽤如下⽅法：</p><ol><li>使 ⽤ 这 些 API ：<br><code>push() pop() shift() unshift() splice() sort() reverse()</code></li><li><code>Vue.set()</code> 或 <code>vm.$set()</code></li><li>覆盖整个数组</li></ol></li></ol></blockquote><p><strong>为什么对象和数组要分开处理?</strong></p><blockquote><p><code>对象</code>的属性通常比较少，对每一个属性都劫持<code>set和get</code>，并不会消耗很多性能</p><p><code>数组</code>有可能有成千上万个元素，如果每一个元素都劫持<code>set和get</code>，无疑消耗太多性能了</p><p>所以<code>对象</code>通过<code>defineProperty</code>进行正常的劫持<code>set和get</code></p><p><code>数组</code>则通过<code>修改数组原型上的部分方法</code>，来实现<code>修改数组触发响应式</code></p></blockquote><h4 id="2、生命周期"><a href="#2、生命周期" class="headerlink" title="2、生命周期"></a>2、生命周期</h4><h5 id="Vue-生命周期都有哪些？"><a href="#Vue-生命周期都有哪些？" class="headerlink" title="Vue 生命周期都有哪些？"></a>Vue 生命周期都有哪些？</h5><div class="table-container"><table><thead><tr><th style="text-align:center">生命周期</th><th style="text-align:left">执行时机</th></tr></thead><tbody><tr><td style="text-align:center"><code>beforeCreate</code></td><td style="text-align:left">在组件实例被创建之初、组件的属性⽣效之前被调用</td></tr><tr><td style="text-align:center"><code>created</code></td><td style="text-align:left">在组件实例已创建完毕。此时属性也已绑定，但真实 DOM 还未⽣成，$el 还不可⽤</td></tr><tr><td style="text-align:center"><code>beforeMount</code></td><td style="text-align:left">在组件挂载开始之前被调⽤。相关的 render 函数⾸次被调⽤</td></tr><tr><td style="text-align:center"><code>mounted</code></td><td style="text-align:left">在 el 被新建的 vm.$el 替换并挂载到实例上之后被调用</td></tr><tr><td style="text-align:center"><code>beforeUpdate</code></td><td style="text-align:left">在组件数据更新之前调⽤。发⽣在虚拟 DOM 打补丁之前</td></tr><tr><td style="text-align:center"><code>update</code></td><td style="text-align:left">在组件数据更新之后被调用</td></tr><tr><td style="text-align:center"><code>activited</code></td><td style="text-align:left">在组件被激活时调⽤（使用了 <code>&lt;keep-alive&gt;</code> 的情况下）</td></tr><tr><td style="text-align:center"><code>deactivated</code></td><td style="text-align:left">在组件被销毁时调⽤（使用了 <code>&lt;keep-alive&gt;</code> 的情况下）</td></tr><tr><td style="text-align:center"><code>beforeDestory</code></td><td style="text-align:left">在组件销毁前调⽤</td></tr><tr><td style="text-align:center"><code>destoryed</code></td><td style="text-align:left">在组件销毁后调⽤</td></tr></tbody></table></div><h5 id="父子组件生命周期执行顺序"><a href="#父子组件生命周期执行顺序" class="headerlink" title="父子组件生命周期执行顺序"></a>父子组件生命周期执行顺序</h5><p><strong>加载渲染过程</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">-&gt;父beforeCreate</span><br><span class="line"> -&gt;父created</span><br><span class="line"> -&gt;父beforeMount</span><br><span class="line"> -&gt;子beforeCreate</span><br><span class="line"> -&gt;子created</span><br><span class="line"> -&gt;子beforeMount</span><br><span class="line"> -&gt;子mounted</span><br><span class="line"> -&gt;父mounted</span><br></pre></td></tr></table></figure><p><strong>更新过程</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated</span><br></pre></td></tr></table></figure><p><strong>销毁过程</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed</span><br></pre></td></tr></table></figure><p><code>keep-alive</code>可以实现组件缓存，当组件切换时不会对当前组件进行卸载</p><p><a href="https://juejin.cn/post/6844903641866829838#heading-11">https://juejin.cn/post/6844903641866829838#heading-11</a></p><p><a href="https://juejin.cn/post/7114252241166401573">https://juejin.cn/post/7114252241166401573</a></p><h4 id="3、watch-和-computed-的区别"><a href="#3、watch-和-computed-的区别" class="headerlink" title="3、watch 和 computed 的区别"></a>3、watch 和 computed 的区别</h4><p>官方文档：对于任何复杂逻辑，你都应当使用计算属性</p><p>扩展：<a href="https://blog.csdn.net/weixin_43638968/article/details/103593954">vue 中 Computed、Methods、Watch 区别</a></p><div class="table-container"><table><thead><tr><th style="text-align:center">computed（计算属性）</th><th style="text-align:center">watch（监视属性/侦听器）</th></tr></thead><tbody><tr><td style="text-align:center">根据你所依赖的数据动态显示新的计算结果<br />不用再 data 中声明，否则报错</td><td style="text-align:center">data 的数据监听回调,依赖 data 的数据变化<br />直接使用 data 声明的数据</td></tr><tr><td style="text-align:center">支持缓存</td><td style="text-align:center">不支持缓存</td></tr><tr><td style="text-align:center">不支持异步</td><td style="text-align:center">支持异步</td></tr><tr><td style="text-align:center">有 get 和 set 方法，当数据变化时，调用 set 方法</td><td style="text-align:center">可以深度监视 deep,加载就调用 immediate<br />监听的函数接收两个函数，newVal 和 oldVla</td></tr><tr><td style="text-align:center">当需要进行数值计算，并且依赖于其它数据时，用 computed</td><td style="text-align:center">在某个数据变化时做一些事情或需要异步操作时，用 watch</td></tr><tr><td style="text-align:center">computed 能做的</td><td style="text-align:center">watch 都能做到</td></tr></tbody></table></div><h4 id="4、组件通信（组件间传值）"><a href="#4、组件通信（组件间传值）" class="headerlink" title="4、组件通信（组件间传值）"></a>4、组件通信（组件间传值）</h4><blockquote><ul><li><code>props</code> <code>$emit</code></li><li><code>.sync</code> <code>v-model</code></li><li><code>$parent / $children</code> $parent 获取父组件的实例，任意调用父组件的方法，修改父组件的数据</li><li><code>ref</code> 父组件获取 子组件 实例，任意调用子组件的方法获取子组件的属性</li><li><code>provide / inject</code>prpvide 父组件内部提供数据 inject 嵌套的子组件可以注入数据</li><li><code>$attrs / $listeners</code> $attrs(没有被 props 接收的所有自定义属性) $listeners(可以获取所有的父组件传递过来的自定义事件)</li><li><code>eventBus</code> 定义一个事件总线 使用<code>$on</code> 绑定 <code>$emit</code> 触发</li><li><code>vuex</code></li><li>路由传参</li></ul></blockquote><p><a href="https://www.wpgdadatong.com/cn/blog/detail?BID=B3650">https://www.wpgdadatong.com/cn/blog/detail?BID=B3650</a></p><p><a href="https://juejin.cn/post/7110223595359436813">https://juejin.cn/post/7110223595359436813</a></p><h4 id="5、-nextTick"><a href="#5、-nextTick" class="headerlink" title="5、$nextTick"></a>5、$nextTick</h4><p><strong>NextTick 是什么</strong></p><blockquote><p>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 修改数据</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;修改后的值&quot;</span>;</span><br><span class="line"><span class="comment">// 此时DOM还没有更新</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>); <span class="comment">// =&gt; &#x27;原始的值&#x27;</span></span><br><span class="line"><span class="variable language_">this</span>.$nextTick(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// DOM 更新了</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$el</span>.<span class="property">textContent</span>); <span class="comment">// =&gt; &#x27;修改后的值&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>应用场景：因为 vue 是异步执行 dom 更新的，所以当你希望在更新数据之后，操作新的视图， 那么你的操作逻辑应写在 Vue.nextTick(callback) 的回调中，而这个回调会在dom 更新循环结束之后执行。 否则，因为异步更新 dom 的原因，如果你不是在 Vue.nextTick(callback) 的回调中执行操作新视图， 那么可能会发生意外。例如你在 created()钩子 是不能操作 dom 的，但你可以在此调接口更新数据， 如果你此时希望接口更新完毕数据后，接着调用操作 dom 的逻辑，那么最后将这部分操作 dom 的逻辑， 放置在Vue.nextTick(callback) 的回调函数中。</p></blockquote><h4 id="6、修饰符"><a href="#6、修饰符" class="headerlink" title="6、修饰符"></a>6、修饰符</h4><p>引用：<a href="https://juejin.cn/post/7026867875990208543#heading-22">https://juejin.cn/post/7026867875990208543#heading-22</a></p><h5 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h5><p><code>stop</code></p><ul><li><code>stop</code>修饰符的作用是阻止冒泡</li></ul><p><code>prevent⭐</code></p><ul><li><code>prevent</code>修饰符的作用是<strong>阻止默认事件</strong>（例如 a 标签的跳转）</li></ul><p><code>capture</code></p><ul><li>事件流默认冒泡，使用 capture 进行捕获<strong>捕获</strong></li></ul><p><code>self</code></p><ul><li><code>self</code>修饰符作用是，只有点击<strong>事件绑定的本身</strong>才会触发事件</li></ul><p><code>once</code></p><ul><li><code>once</code>修饰符的作用是，事件<strong>只执行一次</strong></li></ul><p><code>native⭐</code></p><ul><li><code>native</code>修饰符是加在<strong>自定义组件</strong>的事件上，保证事件能执行</li><li><code>native</code>是用来是在父组件中给子组件绑定一个<strong>原生的事件</strong>，就将子组件变成了普通的 HTML 标签看待</li></ul><p><code>passive</code></p><ul><li>当我们在监听元素滚动事件的时候，会一直触发 onscroll 事件，在 pc 端是没啥问题的，但是在移动端，会让我们的网页变卡，因此我们使用这个修饰符的时候，相当于给 onscroll 事件整了一个.lazy 修饰符</li></ul><h5 id="v-bind-修饰符"><a href="#v-bind-修饰符" class="headerlink" title="v-bind 修饰符"></a>v-bind 修饰符</h5><p><code>sync⭐</code></p><ul><li><p>当<code>父组件</code>传值进<code>子组件</code>，子组件想要改变这个值时，可以这么做</p></li><li><p>```js<br>// 父组件里<br><children :foo.sync="bar"></children><br>// 子组件里<br>this.$emit(‘update:foo’, newValue)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">`camel`</span><br><span class="line"></span><br><span class="line">`.camel` 修饰符允许在使用 DOM 模板时将 `v-bind` property 名称驼峰化，例如 SVG 的 `viewBox` property：</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">&lt;svg :view-box.camel=&quot;viewBox&quot;&gt;&lt;/svg&gt;</span><br></pre></td></tr></table></figure></li></ul><h5 id="鼠标修饰符"><a href="#鼠标修饰符" class="headerlink" title="鼠标修饰符"></a>鼠标修饰符</h5><p><code>left</code> <code>right</code> <code>middle</code></p><ul><li>这三个修饰符是鼠标的左中右按键触发的事件</li></ul><h5 id="表单相关修饰符"><a href="#表单相关修饰符" class="headerlink" title="表单相关修饰符"></a>表单相关修饰符</h5><p><code>trim⭐</code></p><ul><li><code>trim</code>修饰符的作用类似于 JavaScript 中的<code>trim()</code>方法，作用是把<code>v-model</code>绑定的值的首尾空格给过滤掉。</li></ul><p><code>lazy</code></p><ul><li><code>lazy</code>修饰符作用是，改变输入框的值时 value 不会改变，当光标离开输入框时，<code>v-model</code>绑定的值 value 才会改变</li></ul><p><code>number</code></p><ul><li><code>number</code>修饰符的作用是将值转成数字，但是先输入字符串和先输入数字，是两种情况：</li></ul><blockquote><p>先输入数字的话，只取前面数字部分</p><p>先输入字母的话，<code>number</code>修饰符无效</p></blockquote><h5 id="系统修饰符"><a href="#系统修饰符" class="headerlink" title="系统修饰符"></a>系统修饰符</h5><blockquote><p><code>.ctrl</code>、<code>.alt</code>、<code>.shift</code>、<code>.meta</code></p></blockquote><h5 id="按键修饰符"><a href="#按键修饰符" class="headerlink" title="按键修饰符"></a>按键修饰符</h5><blockquote><p>配合键盘事件使用: <code>.enter</code> <code>.tab</code> <code>.delete</code> <code>.esc</code> <code>.space</code> <code>.up</code> <code>.down</code> <code>left</code>……</p></blockquote><h4 id="7、图片上传-TODO⭐⭐"><a href="#7、图片上传-TODO⭐⭐" class="headerlink" title="7、图片上传 TODO⭐⭐"></a>7、图片上传 TODO⭐⭐</h4><p><a href="https://juejin.cn/post/6844903507640713223">FileReader 与 URL.createObjectURL 实现图片、视频上传预览</a></p><p>event.target.files 就是用户上传的图片信息</p><p>配合 cropperjs 可以实现图片裁剪功能</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果接口要求 Content-Type 是 multipart/form-data</span></span><br><span class="line"><span class="comment">// 则你必须传递 FormData 对象</span></span><br></pre></td></tr></table></figure><h4 id="8、v-for-和-v-if-v-if-和-v-show"><a href="#8、v-for-和-v-if-v-if-和-v-show" class="headerlink" title="8、v-for 和 v-if / v-if 和 v-show"></a>8、v-for 和 v-if / v-if 和 v-show</h4><p><a href="https://juejin.cn/post/7106437556354416677"><strong>为什么 v-if 和 v-for 不能同时使用？</strong></a></p><ul><li><p>v-if 不能和 v-for 一起使用的原因是 v-for 的优先级比 v-if 高，一起使用会造成性能浪费</p></li><li><p>解决方案有两种，把 v-if 放在 v-for 的外层或者把需要 v-for 的属性先从计算属性中过滤一次</p></li><li><p>v-if 和 v-for 的优先级问题在 vue3 中不需要考虑，vue3 更新了 v-if 和 v-for 的优先级，使 v-if 的优先级高于 v-for</p></li></ul><p><strong>v-if 和 v-show</strong></p><p><code>v-show</code>隐藏则是为该元素添加<code>display:none</code>。<code>v-if</code>是将<code>dom</code>元素整个添加或删除</p><ul><li><code>v-show</code> 由<code>false</code>变为<code>true</code>的时候不会触发组件的生命周期</li><li><code>v-if</code>由<code>false</code>变为<code>true</code>的时候，触发组件的<code>beforeCreate</code>、<code>create</code>、<code>beforeMount</code>、<code>mounted</code>钩子，由<code>true</code>变为<code>false</code>的时候触发组件的<code>beforeDestory</code>、<code>destoryed</code>方法</li></ul><p>性能消耗：<code>v-if</code>有更高的切换消耗；<code>v-show</code>有更高的初始渲染消耗；</p><p>如果需要非常频繁地切换，则使用 v-show 较好</p><p>如果在运行时条件很少改变，则使用 v-if 较好</p><h4 id="9、Vue-use"><a href="#9、Vue-use" class="headerlink" title="9、Vue.use()"></a>9、Vue.use()</h4><p><code>Vue.use</code>是用来安装插件的</p><p><strong>用法</strong>：Vue.use(plugin)</p><ul><li><strong>如果插件是一个对象</strong>，必须提供 <code>install</code> 方法。</li><li><strong>如果插件是一个函数，它会被作为 install 方法</strong>。install 方法调用时，<code>会将 Vue 作为参数传入</code>。</li><li>Vue.use(plugin)调用之后，插件的 install 方法就会默认接受到一个参数，这个参数就是 Vue</li></ul><p><strong>总结：Vue.use 是官方提供给开发者的一个 api，用来注册、安装类似 Vuex、vue-router、ElementUI 之类的插件的</strong></p><h4 id="10、-跨域"><a href="#10、-跨域" class="headerlink" title="10、 跨域"></a>10、 跨域</h4><blockquote><p>线上环境的跨域问题<br>1、cors &gt;&gt; 后端加响应头 access-control-allow-origin: ‘*’ 允许所有的页面请求<br>2、代理(主流方案)<br>开发环境 ：webpack的devServer进行代理，本地请求转发到接口 vue.config.js &gt; devServer &gt; proxy {}<br>线上环境： 服务器端使用 nginx 反向代理，拦截请求转发到线上接口, 解决跨域问题</p></blockquote><h5 id="什么是跨域"><a href="#什么是跨域" class="headerlink" title="什么是跨域"></a><strong>什么是跨域</strong></h5><blockquote><p>跨域问题是浏览器的<strong>同源策略</strong>所导致的</p><p>其中，<strong>域名、协议、端口号</strong>相同，称之为同源，如果不同，称之为跨源或<strong>跨域</strong></p></blockquote><p><strong>跨域常见的解决方法：</strong></p><ul><li><strong>代理</strong>，常用</li><li><strong>CORS</strong>，常用</li><li>JSONP</li></ul><h5 id="跨域解决方法-1-代理"><a href="#跨域解决方法-1-代理" class="headerlink" title="跨域解决方法 1-代理"></a>跨域解决方法 1-代理</h5><blockquote><p>代理适用的场景是：生产环境不发生跨域，但开发环境发生跨域</p><p>因此，只需要在开发环境使用代理解决跨域即可，这种代理又称之为开发代理</p></blockquote><p>在实际开发中，只需要对开发服务器稍加配置即可完成</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vue 的开发服务器代理配置</span></span><br><span class="line"><span class="comment">// vue.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="comment">// 配置开发服务器</span></span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="comment">// 配置代理</span></span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">// 若请求路径以 /api 开头</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://dev.taobao.com&quot;</span>, <span class="comment">// 将其转发到 http://dev.taobao.com</span></span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h5 id="跨域解决方法-2-CORS"><a href="#跨域解决方法-2-CORS" class="headerlink" title="跨域解决方法 2-CORS"></a>跨域解决方法 2-CORS</h5><p>阮一峰 CORS: <a href="https://www.ruanyifeng.com/blog/2016/04/cors.html">https://www.ruanyifeng.com/blog/2016/04/cors.html</a></p><blockquote><p><code>CORS</code>是基于<code>http1.1</code>的一种跨域解决方案，它的全称是<strong>C</strong>ross-<strong>O</strong>rigin <strong>R</strong>esource <strong>S</strong>haring，<strong>跨域资源共享</strong>。</p><p>CORS 需要浏览器和后端同时支持。</p><p>整个 CORS 通信过程，都是浏览器自动完成，不需要用户参与。对于开发者来说，CORS 通信与同源的 AJAX 通信没有差别，代码完全一样。浏览器一旦发现 AJAX 请求跨源，就会自动添加一些附加的头信息，有时还会多出一次附加的请求，但用户不会有感觉。</p><p>因此，实现 CORS 通信的关键是服务器。只要服务器实现了 CORS 接口，就可以跨源通信。</p></blockquote><p>浏览器将 CORS 请求分成两类：简单请求（simple request）和非简单请求（not-so-simple request）</p><p>只要同时满足以下两大条件，就属于简单请求。</p><p>凡是不同时满足下面两个条件，就属于非简单请求。</p><blockquote><p>（1) 请求方法是以下三种方法之一：</p><ul><li>HEAD</li><li>GET</li><li>POST</li></ul><p>（2）HTTP 的头信息不超出以下几种字段：</p><ul><li>Accept</li><li>Accept-Language</li><li>Content-Language</li><li>Last-Event-ID</li><li>Content-Type：只限于三个值<code>application/x-www-form-urlencoded</code>、<code>multipart/form-data</code>、<code>text/plain</code></li></ul></blockquote><h5 id="跨域解决方法-3-JSONP"><a href="#跨域解决方法-3-JSONP" class="headerlink" title="跨域解决方法 3-JSONP"></a>跨域解决方法 3-JSONP</h5><blockquote><p>JSONP 的做法是：当需要跨域请求时，不使用 AJAX，转而生成一个 script 元素去请求服务器，由于浏览器并不阻止 script 元素的请求，这样请求可以到达服务器。服务器拿到请求后，响应一段 JS 代码，这段代码实际上是一个函数调用，调用的是客户端预先生成好的函数，并把浏览器需要的数据作为参数传递到函数中，从而间接的把数据传递给客户端</p><p>JSONP 优点是简单兼容性好，可用于解决主流浏览器的跨域数据访问的问题。<strong>缺点是仅支持 get 方法具有局限性,不安全可能会遭受 XSS 攻击。</strong></p></blockquote><h4 id="11、cookie"><a href="#11、cookie" class="headerlink" title="11、cookie"></a>11、cookie</h4><p>什么是 cookie</p><blockquote><p>cookie 是储存在用户本地终端上的数据，是网站为了<strong>识别用户</strong>和<strong>跟踪会话</strong>而存储在用户本地终端中的文本数据</p></blockquote><p>怎么操作</p><blockquote><p>可以使用<code>js-cookie</code>插件</p><p>模块化开发时直接引入<code>import Cookies from &#39;js-cookie&#39;</code></p><p>js-cookie.js 常用的 API 和方法</p><p>设置 cookie</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, <span class="string">&quot;value&quot;</span>, &#123; <span class="attr">expires</span>: <span class="number">7</span>, <span class="attr">path</span>: <span class="string">&quot;&quot;</span> &#125;); <span class="comment">//7天过期</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">set</span>(<span class="string">&quot;name&quot;</span>, &#123; <span class="attr">foo</span>: <span class="string">&quot;bar&quot;</span> &#125;); <span class="comment">//设置一个json</span></span><br></pre></td></tr></table></figure><p>读取 cookie</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">//获取cookie</span></span><br><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">get</span>(); <span class="comment">//读取所有的cookie</span></span><br></pre></td></tr></table></figure><p>删除 cookie</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Cookies</span>.<span class="title function_">remove</span>(<span class="string">&quot;name&quot;</span>); <span class="comment">//删除cookie时必须是同一个路径。</span></span><br></pre></td></tr></table></figure></blockquote><h4 id="12、keep-alive-原理"><a href="#12、keep-alive-原理" class="headerlink" title="12、keep-alive 原理"></a>12、<a href="https://blog-1gxfs2h1401f4f58-1254415986.tcloudbaseapp.com/%E9%9D%A2%E8%AF%95%E9%A2%98%E7%B3%BB%E5%88%97/%E4%BA%8C%E3%80%81%E5%AF%B9keep-alive%E7%9A%84%E7%90%86%E8%A7%A3.html#%E5%8E%9F%E7%90%86">keep-alive 原理</a></h4><h5 id="keep-alive-是什么"><a href="#keep-alive-是什么" class="headerlink" title="keep-alive 是什么"></a>keep-alive 是什么</h5><blockquote><ol><li>vue 自带的组件 &gt;&gt; 主要功能是缓存组件 &gt;&gt; 提升性能</li><li>使用场景：可以少网络请求，如果当前组件数据量比较大，就可以节省网络请求 &gt;&gt; 提升用户体验</li><li>举例：如果详情页面之间进行切换，就可以使用<code>keep-alive</code>进行缓存组件，防止同样的数据重复请求</li></ol></blockquote><p><code>keep-alive</code> 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们</p><p><code>keep-alive</code>可以设置以下<code>props</code>属性：</p><ul><li><code>include</code> - 字符串或正则表达式。只有名称匹配的组件会被缓存</li><li><code>exclude</code> - 字符串或正则表达式。任何名称匹配的组件都不会被缓存</li><li><code>max</code> - 数字。最多可以缓存多少组件实例</li></ul><p>关于<code>keep-alive</code>的基本用法：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component :is=<span class="string">&quot;view&quot;</span>&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure><p>匹配首先检查组件自身的 <code>name</code> 选项，如果 <code>name</code> 选项不可用，则匹配它的局部注册名称 (父组件 <code>components</code> 选项的键值)，匿名组件不能被匹配</p><p>设置了 keep-alive 缓存的组件，会多出两个生命周期钩子（<code>activated</code>与<code>deactivated</code>）：</p><ul><li>首次进入组件时：<code>beforeRouteEnter</code> &gt; <code>beforeCreate</code> &gt; <code>created</code>&gt; <code>mounted</code> &gt; <code>activated</code> &gt; … … &gt; <code>beforeRouteLeave</code> &gt; <code>deactivated</code></li><li>再次进入组件时：<code>beforeRouteEnter</code> &gt;<code>activated</code> &gt; … … &gt; <code>beforeRouteLeave</code> &gt; <code>deactivated</code></li></ul><h5 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a><strong>使用场景</strong></h5><p>使用原则：当我们在某些场景下不需要让页面重新加载时我们可以使用<code>keep-alive</code></p><p>举个栗子:</p><p>当我们从<code>首页</code>–&gt;<code>列表页</code>–&gt;<code>商详页</code>–&gt;<code>再返回</code>，这时候列表页应该是需要<code>keep-alive</code></p><p>从<code>首页</code>–&gt;<code>列表页</code>–&gt;<code>商详页</code>–&gt;<code>返回到列表页(需要缓存)</code>–&gt;<code>返回到首页(需要缓存)</code>–&gt;<code>再次进入列表页(不需要缓存)</code>，这时候可以按需来控制页面的<code>keep-alive</code></p><p>在路由中设置<code>keepAlive</code>属性判断是否需要缓存</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;list&#x27;</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;itemList&#x27;</span>, <span class="comment">// 列表页</span></span><br><span class="line">  component (resolve) &#123;</span><br><span class="line">    <span class="built_in">require</span>([<span class="string">&#x27;@/pages/item/list&#x27;</span>], resolve)</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">meta</span>: &#123;</span><br><span class="line">  <span class="attr">keepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;列表页&#x27;</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>&lt;keep-alive&gt;</code></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;app&quot;</span> <span class="keyword">class</span>=<span class="string">&#x27;wrapper&#x27;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 需要缓存的视图组件 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span></span><br><span class="line">      &lt;!-- 不需要缓存的视图组件 --&gt;</span><br><span class="line">     <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">v-if</span>=<span class="string">&quot;!$route.meta.keepAlive&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><h5 id="缓存后如何获取数据"><a href="#缓存后如何获取数据" class="headerlink" title="缓存后如何获取数据"></a>缓存后如何获取数据</h5><p>解决方案可以有以下两种：</p><ul><li>beforeRouteEnter</li><li>actived</li></ul><h4 id="13、ref"><a href="#13、ref" class="headerlink" title="13、ref"></a>13、ref</h4><p>作用：</p><ul><li>放到 dom 节点上 &gt;&gt; 获取原生 dom</li><li>组件身上 &gt;&gt; 获取组件实例 &gt;&gt; 可以获取组件内部所有的方法和数据</li></ul><h4 id="14、scoped-原理是什么？"><a href="#14、scoped-原理是什么？" class="headerlink" title="14、scoped 原理是什么？"></a>14、scoped 原理是什么？</h4><p>作用：使<strong>样式私有化（模块化）</strong>，不对全局造成污染</p><p>原理：动态的给组件加上一个 hash 值，用属性选择器去匹配</p><h4 id="15、-router-和-route"><a href="#15、-router-和-route" class="headerlink" title="15、$router 和 $route"></a>15、$router 和 $route</h4><p><strong>$route</strong>：当前的路由信息对象，获取到路由参数、路径</p><blockquote><ol><li><strong>$route.path：</strong> 字符串，对应当前路由的路径，总是解析为绝对路径，如<code>/foo/bar</code>。</li><li><strong>$route.params：</strong> 一个 key/value 对象，包含了 动态片段 和 全匹配片段，如果没有路由参数，就是一个空对象。</li><li><strong>$route.query：</strong> 一个 key/value 对象，表示 URL 查询参数。例如，对于路径 /foo?user=1，则有$route.query.user == 1，如果没有查询参数，则是个空对象。</li><li><strong>$route.hash：</strong> 当前路由的 hash 值 (不带#) ，如果没有 hash 值，则为空字符串。锚点</li><li><strong>$route.fullPath：</strong> 完成解析后的 URL，包含查询参数和 hash 的完整路径。</li><li><strong>$route.matched：</strong> 数组，包含当前匹配的路径中所包含的所有片段所对应的配置参数对象。</li><li><strong>$route.name：</strong> 当前路径名字</li><li><strong>$route.meta：</strong> 路由元信息</li></ol></blockquote><p><strong>$router</strong>：全局路由 vueRouter 的实例，挂载到 Vue 原型上$router 属性，可以获取到全局路由配置信息，跳转方法</p><blockquote><p>$router.replace({path:’home’})，//替换路由，没有历史记录</p><p>$router.push(‘/login’) ,跳转到指定路由</p><p>$router.back()</p><p>$router.go()</p></blockquote><h4 id="16、发布订阅模式和观察者模式"><a href="#16、发布订阅模式和观察者模式" class="headerlink" title="16、发布订阅模式和观察者模式"></a>16、<a href="https://juejin.cn/post/7055441354054172709#heading-3">发布订阅模式和观察者模式</a></h4><h5 id="发布订阅模式"><a href="#发布订阅模式" class="headerlink" title="发布订阅模式"></a>发布订阅模式</h5><blockquote><p>发布订阅模式中有三个角色，发布者 <code>Publisher</code> ，信息中心 <code>Event Channel</code> ，订阅者 <code>Subscriber</code></p><p>我们假定，存在一个”信号中心”，某个任务执行完成，就向信号中心”发布”（publish）一个信号，其他任务可以向信号中心”订阅”（subscribe）这个信号，从而知道什么时候自己可以开始执行。这就叫做”发布/订阅模式”（publish-subscribe pattern)</p><p><strong>通常是通过 on 事件订阅消息，emit 事件发布消息，remove 事件删除订阅</strong></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">PubSub</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 事件中心</span></span><br><span class="line">    <span class="comment">// 存储格式: warTask: [], routeTask: []</span></span><br><span class="line">    <span class="comment">// 每种事件(任务)下存放其订阅者的回调函数</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span> = &#123;&#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 订阅方法</span></span><br><span class="line">  <span class="title function_">subscribe</span>(<span class="params">type, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="variable language_">this</span>.<span class="property">events</span>[type]) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">events</span>[type].<span class="title function_">push</span>(cb);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 发布方法</span></span><br><span class="line">  <span class="title function_">publish</span>(<span class="params">type, ...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[type]) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">events</span>[type].<span class="title function_">forEach</span>(<span class="function">(<span class="params">cb</span>) =&gt;</span> <span class="title function_">cb</span>(...args));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 取消订阅方法</span></span><br><span class="line">  <span class="title function_">unsubscribe</span>(<span class="params">type, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[type]) &#123;</span><br><span class="line">      <span class="keyword">const</span> cbIndex = <span class="variable language_">this</span>.<span class="property">events</span>[type].<span class="title function_">findIndex</span>(<span class="function">(<span class="params">e</span>) =&gt;</span> e === cb);</span><br><span class="line">      <span class="keyword">if</span> (cbIndex !== -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">events</span>[type].<span class="title function_">splice</span>(cbIndex, <span class="number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[type].<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">events</span>[type];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">unsubscribeAll</span>(<span class="params">type</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">events</span>[type]) &#123;</span><br><span class="line">      <span class="keyword">delete</span> <span class="variable language_">this</span>.<span class="property">events</span>[type];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="观察者模式"><a href="#观察者模式" class="headerlink" title="观察者模式"></a>观察者模式</h5><p>当对象之间存在一对多的依赖关系时，其中一个对象的状态发生改变，所有依赖它的对象都会收到通知，这就是<strong>观察者模式</strong></p><blockquote><ul><li>观察者(订阅者) — Watcher<ul><li>update()：当事件发生时，具体要做的事情</li></ul></li><li>目标(发布者) —  Dep<ul><li>subs 数组：存储所有的观察者</li><li>addSub()：添加观察者</li><li>notify()：当事件发生，调用所有观察者的 update() 方法</li></ul></li><li>没有事件中心</li></ul></blockquote><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><div class="table-container"><table><thead><tr><th>设计模式</th><th>观察者模式</th><th>发布订阅模式</th></tr></thead><tbody><tr><td>主体</td><td>Watcher 观察者、Dep 目标对象</td><td>Publisher 发布者、Event Channel 信息中心、Subscribe 订阅者</td></tr><tr><td>主体关系<br></td><td>Dep 中通过 subs 记录 Watcher</td><td>Publisher 和 Subscribe 不想不知道对方，通过中介联系</td></tr><tr><td>优点</td><td>角色明确，Watcher 和 Dep 要遵循约定的成员方法</td><td>松散耦合，灵活度高，通常应用在异步编程中</td></tr><tr><td>缺点</td><td>紧耦合</td><td>当事件类型变多时，会增加维护成本</td></tr><tr><td><strong>使用案例</strong></td><td>双向数据绑定</td><td>事件总线 EventBus</td></tr></tbody></table></div><h4 id="17、vue-响应式原理（数据劫持）"><a href="#17、vue-响应式原理（数据劫持）" class="headerlink" title="17、vue 响应式原理（数据劫持）"></a>17、<a href="https://blog-1gxfs2h1401f4f58-1254415986.tcloudbaseapp.com/vue%E5%8E%9F%E7%90%86/vue2%E5%8E%9F%E7%90%86/1.%E5%93%8D%E5%BA%94%E5%BC%8F%E5%8E%9F%E7%90%86.html">vue 响应式原理（数据劫持）</a></h4><h4 id="18、eventBus"><a href="#18、eventBus" class="headerlink" title="18、eventBus"></a>18、eventBus</h4><h4 id="19、v-model-与-sync"><a href="#19、v-model-与-sync" class="headerlink" title="19、v-model 与.sync"></a>19、v-model 与.sync</h4><blockquote><p><strong>相同点</strong>：都是语法糖，都可以实现父子组件中的数据的双向通信。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  v-model</span></span><br><span class="line">&lt;son  v-model=<span class="string">&quot;num&quot;</span>/&gt; <span class="comment">//父组件使用子组件</span></span><br><span class="line"><span class="attr">model</span>:&#123;</span><br><span class="line"><span class="attr">prop</span>:<span class="string">&#x27;newValue&#x27;</span>, <span class="comment">// 默认为 value 可以使用prop自定义属性名</span></span><br><span class="line"><span class="attr">event</span>:<span class="string">&quot;updateValue&quot;</span>, <span class="comment">// event 修改事件名 默认为input</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">props</span>: &#123; <span class="comment">// 子组件接收</span></span><br><span class="line"><span class="attr">value</span>: &#123;  <span class="comment">// 默认为value</span></span><br><span class="line"><span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;input&#x27;</span>, <span class="string">&#x27;小红&#x27;</span>)</span><br><span class="line"><span class="comment">// .sync</span></span><br><span class="line">&lt;son :title.<span class="property">sync</span>=<span class="string">&quot;doc.title&quot;</span>&gt;&lt;<span class="regexp">/son&gt;   /</span><span class="regexp">/ 父组件</span></span><br><span class="line"><span class="regexp">props:&#123;</span></span><br><span class="line"><span class="regexp">title:&#123;</span></span><br><span class="line"><span class="regexp">  type:...</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">this.$emit(&#x27;update:title&#x27;, newTitle)  /</span><span class="regexp">/ 子组件</span></span><br></pre></td></tr></table></figure><p><strong>区别点</strong>：格式不同： v-model=”num”, :num.sync=”num”</p><p><code>v-model</code>：    @input + value<br><code>:num.sync</code>:  @update:num</p><p><strong>另外需要特别注意的是:</strong> <code>v-model</code>只能用一次；<code>.sync</code>可以有多个</p></blockquote><h4 id="20、如何做样式穿透"><a href="#20、如何做样式穿透" class="headerlink" title="20、如何做样式穿透"></a>20、如何做样式穿透</h4><p><strong>背景</strong>：修改当前组件嵌套的子组件内部的样式</p><p><strong>问题</strong>：</p><ol><li>如果不添加 scoped，可能影响全局样式</li><li>如果添加 scoped，嵌套的子组件内部样式不能生效</li></ol><p><strong>如何解决</strong>：添加<code>/deep/</code> / <code>::v-deep</code></p><blockquote><p>scss: 使用<code>::v-deep</code></p><p>less: 使用 <code>/deep/</code></p></blockquote><h4 id="21、你对SPA单页面的理解，它的优缺点分别是什么？"><a href="#21、你对SPA单页面的理解，它的优缺点分别是什么？" class="headerlink" title="21、你对SPA单页面的理解，它的优缺点分别是什么？"></a>21、你对SPA单页面的理解，它的优缺点分别是什么？</h4><blockquote><p>SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。</p></blockquote><h6 id="单页应用优缺点"><a href="#单页应用优缺点" class="headerlink" title="单页应用优缺点"></a>单页应用优缺点</h6><p>优点：</p><ul><li>具有桌面应用的即时性、网站的可移植性和可访问性</li><li>用户体验好、快，内容的改变不需要重新加载整个页面，SPA 相对对服务器压力小；</li><li>良好的前后端分离，分工更明确</li></ul><p>缺点：</p><ul><li>SEO（搜索引擎）难度较大</li><li>首次渲染速度相对较慢</li><li>前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；</li></ul><h4 id="22、怎么理解-Vue-的单向数据流"><a href="#22、怎么理解-Vue-的单向数据流" class="headerlink" title="22、怎么理解 Vue 的单向数据流"></a>22、怎么理解 Vue 的单向数据流</h4><blockquote><p>① 单向数据流是指数据从父组件传向子组件，子组件没有权限直接修改该数据；<br>② 子组件需要在 data 或者 computed 中重新定义变量来接收父组件传来的值，以便修改；<br>③ 子组件可以通过 $emit 的方式通知父组件修改值，再重新传回给子组件；</p></blockquote><h4 id="23、路由懒加载"><a href="#23、路由懒加载" class="headerlink" title="23、路由懒加载"></a>23、路由懒加载</h4><h6 id="为什么要使用路由懒加载"><a href="#为什么要使用路由懒加载" class="headerlink" title="为什么要使用路由懒加载"></a>为什么要使用路由懒加载</h6><blockquote><p>为给客户更好的客户体验，首屏组件加载速度更快一些，解决白屏问题</p></blockquote><h6 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h6><blockquote><p>懒加载简单来说就是延迟加载或按需加载，即在需要的时候的时候进行加载</p><p>路由 和 组件 的常用两种懒加载方式：</p><p>1、vue异步组件实现路由懒加载 <code>component：resolve=&gt;([&#39;需要加载的路由的地址&#39;，resolve])</code></p><p>2、es提出的import(推荐使用这种方式) <code>const HelloWorld = （）=&gt; import(&#39;需要加载的模块地址&#39;)</code></p></blockquote><p>通过魔法注释webpackChunkName修改名称，打包时就会显示修改后的新名称</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; name &#125; = <span class="keyword">await</span> <span class="title function_">import</span>(<span class="comment">/* webpackChunkName:&quot;newName&quot;*/</span><span class="string">&#x27;路径&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="24、如何理解vue的key属性"><a href="#24、如何理解vue的key属性" class="headerlink" title="24、如何理解vue的key属性"></a>24、如何理解vue的key属性</h4><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/GMFRTZ1Ew2igUmP.png?x-oss-process=style/huyu" alt="image-20220811205624543"></p><blockquote><pre><code>          **key 是为 Vue 中 vnode 的唯一标记，通过这个 key，我们的 diff 操作可以更准确、更快速，以便高效的更新虚拟 DOM**          1.  对⽐规则：              1. 旧虚拟DOM中找到了与新虚拟DOM相同的key：                  1. 若虚拟DOM中内容没变, 直接使⽤之前的真实DOM                  2. 若虚拟DOM中内容变了, 则⽣成新的真实DOM，随后替换掉⻚⾯中之前的真                       实DOM              2. 旧虚拟DOM中未找到与新虚拟DOM相同的key：创建新的真实DOM，随后渲染到                  到⻚⾯                2. ⽤index作为key可能会引发的问题：                 1. 若对数据进⾏逆序添加、逆序删除等破坏顺序操作：会产⽣没有必要的真实DOM                     更新 ==&gt; 界⾯效果没问题, 但效率低                 2. 若结构中还包含输⼊类的DOM：会产⽣错误DOM更新 ==&gt; 界⾯有问题                3. 开发中如何选择key?                 1. 最好使⽤每条数据的唯⼀标识作为key，⽐如id、⼿机号、⾝份证号、学号等唯⼀                     值                 2. 如果不存在对数据的逆序添加、逆序删除等破坏顺序的操作，仅⽤于渲染列表，                     使⽤index作为key是没有问题的</code></pre></blockquote><h4 id="25、vue-router-有哪几种导航钩子"><a href="#25、vue-router-有哪几种导航钩子" class="headerlink" title="25、vue-router 有哪几种导航钩子"></a>25、vue-router 有哪几种导航钩子</h4><p><a href="https://router.vuejs.org/zh/guide/advanced/navigation-guards.html">https://router.vuejs.org/zh/guide/advanced/navigation-guards.html</a></p><p><a href="https://router.vuejs.org/zh/guide/advanced/meta.html">https://router.vuejs.org/zh/guide/advanced/meta.html</a></p><p><strong>全局导航钩子</strong></p><ul><li><code>router.beforeEach(to,from,next)</code>：添加一个导航守卫，在任何<strong>导航前</strong>执行</li><li><code>router.beforeResolve(to,from)</code>：添加一个导航守卫，在<strong>导航即将解析之前</strong>执行。在这个状态下，所有的组件都已经被获取，并且其他导航守卫也已经成功</li><li><code>router.afterEach(to,from)</code>：添加一个导航钩子，<strong>在每次导航后执行</strong></li></ul><p><strong>组件内的钩子</strong></p><ul><li><code>beforeRouterEnter(to, from, next)</code>：在渲染该组件的对应路由被验证前调用</li><li><code>beforeRouterUpdate</code>：在当前路由改变，但是该组件被复用时调用</li><li><code>beforeRouterLeave</code>：在导航离开渲染该组件的对应路由时调用</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">UserDetails</span> = &#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">`...`</span>,</span><br><span class="line">  <span class="title function_">beforeRouteEnter</span>(<span class="params">to, <span class="keyword">from</span>,next</span>) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被验证前调用</span></span><br><span class="line">    <span class="comment">// 不能获取组件实例 `this` ！</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行时，组件实例还没被创建！</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 `/users/:id`，在 `/users/1` 和 `/users/2` 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 `UserDetails` 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 因为在这种情况发生的时候，组件已经挂载好了，导航守卫可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">beforeRouteLeave</span>(<span class="params">to, <span class="keyword">from</span></span>) &#123;</span><br><span class="line">    <span class="comment">// 在导航离开渲染该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 与 `beforeRouteUpdate` 一样，它可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>路由独享的守卫</strong></p><ul><li><code>beforeEnter</code>:<strong>只在进入路由时触发</strong>，不会在 <code>params</code>、<code>query</code> 或 <code>hash</code> 改变时触发</li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/users/:id&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">UserDetails</span>,</span><br><span class="line">    <span class="attr">beforeEnter</span>: <span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reject the navigation</span></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/crRNltVTHoA8nXW.png?x-oss-process=style/huyu" alt="image-20220809005712651"></p><h4 id="26、什么是-MVVM？（深入待总结）"><a href="#26、什么是-MVVM？（深入待总结）" class="headerlink" title="26、什么是 MVVM？（深入待总结）"></a>26、什么是 MVVM？（深入待总结）</h4><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/4BpRdQsYCcEuwe6.webp?x-oss-process=style/huyu" alt="img"></p><blockquote><ul><li>Model：模型层（数据层），主要用于保存一些数据</li><li>View： 视图层，主要用于将后端数据借助各种元素呈现给用户，同时也可提供用户操作的入口</li><li>ViewModel：视图模型层：该层也是mvvm中的核心层，主要用于作为Model个View两个层的数据连接层，负责两个层之间的数据传递。该层主要包含两大功能点：<ul><li>DOM监听（DOM Listener）视图变化后更新数据</li><li>数据绑定（Data bindings）数据变化后更新视图</li></ul></li></ul></blockquote><h4 id="27、Vue-是如何实现数据双向绑定的？"><a href="#27、Vue-是如何实现数据双向绑定的？" class="headerlink" title="27、Vue 是如何实现数据双向绑定的？"></a>27、Vue 是如何实现数据双向绑定的？</h4><p><a href="https://juejin.cn/post/6950939562872930341">https://juejin.cn/post/6950939562872930341</a></p><blockquote><p>Vue 数据双向绑定主要是指：数据变化更新视图，视图变化更新数据</p></blockquote><p>Vue 主要通过以下 4 个步骤来实现数据双向绑定的：</p><ol><li>需要Observe（观察者）的数据对象进行递归遍历，包括子属性对象的属性，都加上setter和getter这样的话，给这个对象的某个值赋值，就会触发setter，那么就能监听到了数据变化</li><li>Compile（编译）解析模板指令，将模板中的变量替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，更新视图</li><li>Watcher订阅者是Observer和Compile之间通信的桥梁，主要做的事情是: ①在自身实例化时往属性订阅器(dep)里面添加自己 ②自身必须有一个update()方法 ③待属性变动dep.notify()通知时，能调用自身的update()方法，并触发Compile中绑定的回调，则功成身退。</li><li>MVVM作为数据绑定的入口，整合Observer、Compile和Watcher三者，通过Observer来监听自己的model数据变化，通过Compile来解析编译模板指令，最终利用Watcher搭起Observer和Compile之间的通信桥梁，达到数据变化 -&gt; 视图更新；视图交互变化(input) -&gt; 数据model变更的双向绑定效果。</li></ol><p>以上四个步骤的流程图表示如下，如果有同学理解不大清晰的，可以查看作者专门介绍数据双向绑定的文章<a href="https://juejin.cn/post/6844903903822086151">《0 到 1 掌握：Vue 核心之数据双向绑定》</a>，有进行详细的讲解、以及代码 demo 示例</p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/ZykbSiv6VjH3Udl.webp?x-oss-process=style/huyu" alt="1158910-20180306234148823-430002059.png"></p><h4 id="28、Vue-observable你有了解过吗？说说看"><a href="#28、Vue-observable你有了解过吗？说说看" class="headerlink" title="28、Vue.observable你有了解过吗？说说看"></a>28、Vue.observable你有了解过吗？说说看</h4><p> <a href="https://cowtransfer.com/s/1ef3d485042d4e">https://cowtransfer.com/s/1ef3d485042d4e</a> 点击链接查看 [ my2.jpg ] ，或访问奶牛快传 cowtransfer.com 输入传输口令 uk9ct9 查看；</p><h4 id="29、v-model-的原理？"><a href="#29、v-model-的原理？" class="headerlink" title="29、v-model 的原理？"></a>29、v-model 的原理？</h4><p>我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件：</p><ul><li>text 和 textarea 元素使用 value 属性和 input 事件；</li><li>checkbox 和 radio 使用 checked 属性和 change 事件；</li><li>select 字段将 value 作为 prop 并将 change 作为事件。</li></ul><p>以 input 表单元素为例：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;input v-model=<span class="string">&#x27;something&#x27;</span>&gt;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-bind:value</span>=<span class="string">&quot;something&quot;</span> <span class="attr">v-on:input</span>=<span class="string">&quot;something = $event.target.value&quot;</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h4 id="30、data是个函数不是个对象"><a href="#30、data是个函数不是个对象" class="headerlink" title="30、data是个函数不是个对象"></a>30、data是个函数不是个对象</h4><blockquote><p>首先，data是个函数是确保数据不会被污染，在JS中对象是一个引用数据类型，如果是对象形式，多个vue实例会相互影响，为了保证组件的复用性，data要写成函数，函数形式每次使用时，会返回一个新的对象拷贝，这样使用组件时data中的数据就不会被相互影响</p><p>new Vue的实例，比如app.js中，是不会被复用的，所以不存在数据污染的情况</p></blockquote><h4 id="31、路由三种模式"><a href="#31、路由三种模式" class="headerlink" title="31、路由三种模式"></a>31、路由三种模式</h4><p><strong>hash模式</strong></p><p><strong>history模式</strong></p><p><strong>abstract模式</strong></p><h4 id="32、hash模式和history模式（补充）"><a href="#32、hash模式和history模式（补充）" class="headerlink" title="32、hash模式和history模式（补充）"></a>32、hash模式和history模式（补充）</h4><p><a href="https://juejin.cn/post/6867875626611654663">https://juejin.cn/post/6867875626611654663</a></p><h6 id="前端路由原理"><a href="#前端路由原理" class="headerlink" title="前端路由原理"></a>前端路由原理</h6><p>前端路由的核心，就在于改变视图的同时不会向后端发出请求；而是加载路由对应的组件。vue-router就是将组件映射到路由, 然后渲染出来的。并实现了三种模式：Hash模式、History模式以及Abstract模式。默认Hash模式</p><p><strong>hash模式</strong> ： #后面是路由路径，特点是前端访问，#后面的变化不会经过服务器</p><p><strong>history模式</strong>：正常的/访问模式，特点是后端访问，任意地址的变化都会访问服务器</p><h6 id="Hash模式"><a href="#Hash模式" class="headerlink" title="Hash模式"></a>Hash模式</h6><ul><li>原理<br>基于浏览器的<strong>hashchange事件</strong>，地址变化时，通过window.location.hash 获取地址上的hash值；并通过构造Router类，配置routes对象设置hash值与对应的组件内容。</li><li>优点</li></ul><ol><li>hash值会出现在URL中, 但是不会被包含在Http请求中, 因此hash值改变不会重新加载页面</li><li>hash改变会触发hashchange事件, 能控制浏览器的前进后退</li><li>兼容性好</li></ol><ul><li>缺点</li></ul><ol><li><strong>地址栏中携带#，不美观</strong></li><li>只可修改 # 后面的部分，因此只能设置与当前 URL 同文档的 URL</li><li>hash有体积限制，故只可添加短字符串</li><li>设置的新值必须与原来不一样才会触发hashchange事件，并将记录添加到栈中</li><li><strong>每次URL的改变不属于一次http请求，所以不利于SEO优化</strong></li></ol><h6 id="History模式"><a href="#History模式" class="headerlink" title="History模式"></a>History模式</h6><ul><li>原理<br>基于HTML5新增的pushState()和replaceState()两个api，以及浏览器的popstate事件，地址变化时，通过window.location.pathname找到对应的组件。并通过构造Router类，配置routes对象设置pathname值与对应的组件内容。</li><li>优点</li></ul><ol><li><strong>没有#，更加美观</strong></li><li>pushState() 设置的新 URL 可以是与当前 URL 同源的任意 URL</li><li>pushState() 设置的新 URL 可以与当前 URL 一模一样，这样也会把记录添加到栈中</li><li>pushState() 通过 stateObject 参数可以添加任意类型的数据到记录中</li><li>pushState() 可额外设置 title 属性供后续使用</li><li>浏览器的进后退能触发浏览器的popstate事件，获取window.location.pathname来控制页面的变化</li></ol><ul><li>缺点</li></ul><ol><li>URL的改变属于http请求，借助history.pushState实现页面的无刷新跳转，因此<strong>会重新请求服务器</strong>。所以前端的 URL 必须和实际向后端发起请求的 URL 一致。如果用户输入的URL回车或者浏览器刷新或者分享出去某个页面路径，用户点击后，URL与后端配置的页面请求URL不一致，则匹配不到任何静态资源，就会返回404页面。所以需要后台配置支持，覆盖所有情况的候选资源，如果 URL 匹配不到任何静态资源，则应该返回app 依赖的页面或者应用首页。</li><li>兼容性差，特定浏览器支持</li></ol><h6 id="Abstract模式"><a href="#Abstract模式" class="headerlink" title="Abstract模式"></a>Abstract模式</h6><p>工作时没用过，支持所有javascript运行模式。vue-router 自身会对环境做校验，如果发现没有浏览器的 API，路由会自动强制进入 abstract 模式。在移动端原生环境中也是使用 abstract 模式。</p><h6 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h6><p>hash 模式和 history 模式都属于浏览器自身的特性，Vue-Router 只是利用了这两个特性（通过调用浏览器提供的接口）来实现前端路由。</p><h4 id="33、说说你对slot的理解？slot使用场景有哪些？"><a href="#33、说说你对slot的理解？slot使用场景有哪些？" class="headerlink" title="33、说说你对slot的理解？slot使用场景有哪些？"></a>33、说说你对slot的理解？slot使用场景有哪些？</h4><p><a href="https://vue3js.cn/interview/vue/slot.html#%E4%B8%80%E3%80%81slot%E6%98%AF%E4%BB%80%E4%B9%88">https://vue3js.cn/interview/vue/slot.html#%E4%B8%80%E3%80%81slot%E6%98%AF%E4%BB%80%E4%B9%88</a></p><h6 id="什么是slot"><a href="#什么是slot" class="headerlink" title="什么是slot"></a><strong>什么是slot</strong></h6><blockquote><p>slot，是组件的一块HTML模板，这块模板显示不显示、以及怎样显示由父组件来决定</p></blockquote><h6 id="slot的作用"><a href="#slot的作用" class="headerlink" title="slot的作用"></a>slot的作用</h6><blockquote><p><strong>通过插槽可以让用户可以拓展组件，去更好地复用组件和对其做定制化处理</strong></p><p>如果父组件在使用到一个复用组件的时候，获取这个组件在不同的地方有少量的更改，如果去重写组件是一件不明智的事情</p><p>通过<code>slot</code>插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用</p><p><strong>比如布局组件、表格列、下拉选、弹框显示内容等</strong></p></blockquote><h6 id="slot的分类"><a href="#slot的分类" class="headerlink" title="slot的分类"></a>slot的分类</h6><blockquote><ul><li><p>默认插槽</p><ul><li><p>子组件用<code>&lt;slot&gt;</code>标签来确定渲染的位置，标签里面可以放<code>DOM</code>结构，当父组件使用的时候没有往插槽传入内容，标签内<code>DOM</code>结构就会显示在页面</p><p>父组件在使用的时候，直接在子组件的标签内写入内容即可</p></li></ul></li><li><p>具名插槽</p><ul><li><p>子组件用<code>name</code>属性来表示插槽的名字，不传为默认插槽</p><p>父组件中在使用时在默认插槽的基础上加上<code>slot</code>属性，值为子组件插槽<code>name</code>属性值</p></li></ul></li><li><p>作用域插槽</p><ul><li><p>子组件在作用域上绑定属性来将子组件的信息传给父组件使用，这些属性会被挂在父组件<code>v-slot</code>接受的对象上</p><p>父组件中在使用时通过<code>v-slot:</code>（简写：#）获取子组件的信息，在内容中使用</p></li></ul></li></ul></blockquote><h4 id="34、使用过-Vue-SSR-吗？说说-SSR？"><a href="#34、使用过-Vue-SSR-吗？说说-SSR？" class="headerlink" title="34、使用过 Vue SSR 吗？说说 SSR？"></a>34、使用过 Vue SSR 吗？说说 SSR？</h4><p>服务器端渲染</p><h4 id="35、说说你对vue的mixin的理解，有什么应用场景？"><a href="#35、说说你对vue的mixin的理解，有什么应用场景？" class="headerlink" title="35、说说你对vue的mixin的理解，有什么应用场景？"></a>35、说说你对vue的mixin的理解，有什么应用场景？</h4>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js知识点总结</title>
      <link href="/posts/2198.html"/>
      <url>/posts/2198.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、手动实现防抖和节流"><a href="#1、手动实现防抖和节流" class="headerlink" title="1、手动实现防抖和节流"></a>1、手动实现<code>防抖</code>和<code>节流</code></h4><blockquote><p><strong>防抖</strong>：事件被触发 n 秒后再执行回调，如果在这 n 秒内事件又被触发，则重新计时,，防止在短时间内过于频繁的执行相同的任务。当短时间内的频繁是不必要的时候，就可以考虑去抖动，避免资源浪费，或造成不友好的体验。</p><p><strong>节流</strong>：规定一个单位时间，在这个单位时间内，只能有一次触发事件的回调函数执行，如果在同一个单位时间内某事件被触发多次，只有一次能生效</p><p><strong>防抖函数的应用场景：</strong></p><ul><li>按钮提交场景：防⽌多次提交按钮，只执⾏最后提交的⼀次</li><li>服务端验证场景：表单验证需要服务端配合，只执⾏⼀段连续的输⼊事件的最后⼀次，还有搜索联想词功能类似⽣存环境请⽤lodash.debounce</li></ul><p><strong>节流函数的适⽤场景：</strong></p><ul><li>拖拽场景：固定时间内只执⾏⼀次，防⽌超⾼频次触发位置变动</li><li>缩放场景：监控浏览器resize</li><li>动画场景：避免短时间内多次触发动画引起性能问题</li></ul></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * debounce 防抖</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn [function] 需要防抖的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay [number] 毫秒，防抖期限值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer = <span class="literal">null</span>; <span class="comment">//借助闭包</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...arg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="comment">//进入该分支语句，说明当前正在一个计时过程中，并且又触发了相同事件。</span></span><br><span class="line">      <span class="comment">// 所以要取消当前的计时，重新开始计时</span></span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, arg); <span class="comment">// 使用apply将fn函数的this指向修改为return后的function</span></span><br><span class="line">    &#125;, delay); <span class="comment">// 进入该分支说明当前并没有在计时，那么就开始一个计时</span></span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * debounce 节流</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> fn [function] 需要节流的函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> delay [number] 毫秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> valid = <span class="literal">false</span>; <span class="comment">// 节流阀</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...arg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">      <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">    valid = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, arg);</span><br><span class="line">      valid = <span class="literal">false</span>;</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2、let、const、var-的区别"><a href="#2、let、const、var-的区别" class="headerlink" title="2、let、const、var 的区别"></a>2、let、const、var 的区别</h4><blockquote><p><strong>1.是否存在变量提升？</strong></p><ul><li><p><code>var</code>声明的变量存在变量提升（将变量提升到当前<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Scope">作用域</a>的顶部）。即变量可以在声明之前调用，值为<code>undefined</code></p></li><li><p><code>let</code>和<code>const</code>不存在变量提升。即它们所声明的变量一定要在声明后使用，否则报<code>ReferenceError</code>错</p></li></ul><p><strong>2.是否存在暂时性死区？</strong></p><p><code>let和const存在暂时性死区</code>。即只要块级作用域内存在 let 命令，它所声明的变量就“绑定”（binding）这个区域，不再受外部的影响</p><p><strong>3.是否允许重复声明变量？</strong></p><ul><li><p><code>var</code>允许重复声明变量。</p></li><li><p><code>let</code>和<code>const</code>在同一作用域不允许重复声明变量。</p></li></ul><p><strong>4.是否存在块级作用域？</strong></p><ul><li>var 不存在块级作用域。</li><li>let 和 const 存在块级作用域<ul><li>块作用域由<code>&#123; &#125;</code>包括，<code>if</code>语句和<code>for</code>语句里面的<code>&#123; &#125;</code>也属于块作用域</li></ul></li></ul><p><strong>5. 是否能修改声明的变量？</strong></p><ul><li><code>var</code>和<code>let</code>可以。</li><li><code>const</code>声明一个只读的<strong>常量</strong>。一旦声明，常量的值就不能改变。<code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</li></ul></blockquote><h4 id="3、箭头函数与普通函数区别"><a href="#3、箭头函数与普通函数区别" class="headerlink" title="3、箭头函数与普通函数区别"></a>3、箭头函数与普通函数区别</h4><blockquote><p>1.箭头函数是匿名函数，不能作为构造函数，不能使用 new</p><p>2.箭头函数内没有<code>arguments</code>，可以用展开运算符<code>...</code>解决</p><p>3.箭头函数的 this，始终指向父级上下文（箭头函数的<code>this</code>取决于定义位置<code>父级的上下文</code>，跟使用位置没关系，普通函数<code>this</code>指向调用的那个对象）</p><p>4.箭头函数不能通过<code>call() 、 apply() 、bind()</code>方法直接修改它的 this 指向。(<code>call、apply、bind</code>会默认忽略第一个参数，但是可以正常传参)</p><p>5.箭头函数没有原型属性</p></blockquote><h4 id="4、Promise"><a href="#4、Promise" class="headerlink" title="4、Promise"></a>4、Promise</h4><ul><li><p>状态</p><ul><li><p><strong>进行中</strong>：<code>pending</code></p></li><li><p><strong>已成功</strong>：<code>resolved</code></p></li><li><p><strong>已失败</strong>：<code>rejected</code></p></li></ul></li><li><p>特点</p><ul><li><p>对象的状态不受外界影响</p></li><li><p>一旦状态改变就不会再变，任何时候都可得到这个结果</p></li></ul></li><li><p>声明：<code>new Promise((resolve, reject) =&gt; &#123;&#125;)</code></p></li><li><p>出参</p><ul><li><p><strong>resolve</strong>：将状态从<code>未完成</code>变为<code>成功</code>，在异步操作成功时调用，并将异步操作的结果作为参数传递出去</p></li><li><p><strong>reject</strong>：将状态从<code>未完成</code>变为<code>失败</code>，在异步操作失败时调用，并将异步操作的错误作为参数传递出去</p></li></ul></li></ul><p><strong>① 什么是 Promise？</strong></p><ul><li>Promise，简单说就是一个<code>容器</code>，包含异步操作结果的对象</li><li>从语法上说，<strong>promise</strong> 是一个<code>对象</code>，从它可以获取异步操作的的最终状态（成功或失败）。</li><li>Promise 是一个<code>构造函数</code>，对外提供统一的 API，自己身上有 all、reject、resolve 等方法，原型上有 then、catch 等方法。</li></ul><p><strong>② Promise 有什么用？</strong></p><p>解决回调地狱</p><p>ps:什么是回调地狱？回调地狱，其实简单来说就是异步回调函数的嵌套</p><p><strong>③Promise 有哪些方法</strong></p><ul><li><p><strong>then()：</strong>分别指定<code>resolved状态</code>和<code>rejected状态</code>的回调函数</p><ul><li><p><strong>第一参数</strong>：状态变为<code>resolved</code>时调用</p></li><li><p><strong>第二参数</strong>：状态变为<code>rejected</code>时调用(可选)</p></li><li><p><strong>链式调用 promise.then()</strong>：<strong><code>then</code> 方法返回一个 Promise 对象，其允许方法链，从而创建一个 promise 链</strong></p></li></ul></li></ul><ul><li><p><strong>catch()</strong>：指定发生错误时的回调函数</p></li><li><p><strong>Promise.resolve()</strong>：将对象转为 Promise 对象 等价于 <code>new Promise(resolve =&gt; resolve())</code></p><ul><li><p><strong>Promise 实例</strong>：原封不动地返回入参</p></li><li><p><strong>thenable 对象</strong>：</p><p><code>thenable</code>对象指的是具有<code>then</code>方法的对象</p><p><code>Promise.resolve</code>方法会将这个对象转为 Promise 对象，然后就立即执行<code>thenable</code>对象的<code>then</code>方法</p></li><li><p><strong>不具有 then()的对象</strong>：将此对象转为 Promise 对象并返回，状态为<code>resolved</code></p></li><li><p><strong>不带参数</strong>：返回 Promise 对象，状态为<code>resolved</code></p></li></ul></li><li><p><strong>Promise.reject()</strong>：将对象转为状态为<code>rejected</code>的 Promise 对象(等价于<code>new Promise((resolve, reject) =&gt; reject())</code>)</p></li><li><p><strong>Promise.all()：</strong></p><p>并发，<strong>发起多个并发请求</strong>，将多个实例包装成一个新实例（数组形式），然后在所有 promise 都被解决后执行一些操作(齐变更再返回)</p><ul><li>成功：只有全部实例状态变成<code>fulfilled</code>（ 成功 ），最终状态才会变成<code>fulfilled</code></li><li>失败：其中一个实例状态变成<code>rejected</code>，最终状态就会变成<code>rejected</code></li><li>每一个 promise 成功的值，会按照传入的顺序返回数组内</li><li>用 all 方法进行接口请求，就算其中有失败的情况，别的请求也会进行，但最后的状态还是<code>rejected</code></li></ul></li><li><p><strong>Promise.race()：</strong></p><p>赛跑机制</p><p>将多个实例包装成一个新实例，返回全部实例状态优先变更后的结果(先变更先返回)</p><ul><li>成功失败：哪个实例率先改变状态就返回哪个实例的状态</li></ul></li></ul><ul><li><strong>Promise.finally()</strong>：指定不管最后状态如何都会执行的回调函数</li><li><strong>Promise.allSettled()</strong>⭐：将多个实例包装成一个新实例，返回全部实例状态变更后的状态数组(齐变更再返回)<ul><li>成功：成员包含<code>status</code>和<code>value</code>，<code>status</code>为<code>fulfilled</code>，<code>value</code>为返回值</li><li>失败：成员包含<code>status</code>和<code>value</code>，<code>status</code>为<code>rejected</code>，<code>value</code>为错误原因</li></ul></li><li><strong>Promise.any()</strong>：将多个实例包装成一个新实例，返回全部实例状态变更后的结果数组(齐变更再返回)</li></ul><ul><li><p>成功：其中一个实例状态变成<code>fulfilled</code>，最终状态就会变成<code>fulfilled</code></p></li><li><p>失败：只有全部实例状态变成<code>rejected</code>，最终状态才会变成<code>rejected</code></p></li></ul><ul><li><strong>Promise.try()</strong>：不想区分是否同步异步函数，包装函数为实例，使用<code>then()</code>指定下一步流程，使用<code>catch()</code>捕获错误</li></ul><p><strong>常见的错误</strong></p><ul><li><p><code>Uncaught TypeError: undefined is not a promise</code></p><p>如果在控制台中收到 <code>Uncaught TypeError: undefined is not a promise</code> 错误，则请确保使用 <code>new Promise()</code> 而不是 <code>Promise()</code></p></li><li><p><strong><code>UnhandledPromiseRejectionWarning</code></strong></p><p>这意味着调用的 promise 被拒绝，但是没有用于处理错误的 catch。 在 then 之后添加 catch 则可以正确地处理</p></li></ul><blockquote><p>扩展：<a href="https://juejin.cn/post/7043758954496655397#heading-2">手写 Promise</a></p></blockquote><h4 id="5、数据类型"><a href="#5、数据类型" class="headerlink" title="5、数据类型"></a>5、数据类型</h4><p>原始数据类型（<strong>基本类型</strong>）：按值访问，可以操作保存在变量中实际的值。</p><ul><li><strong>空值</strong>（<code>null</code>）：用于未知的值 —— 只有一个 <code>null</code> 值的独立类型。</li><li><strong>未定义</strong>（<code>undefined</code>）: 用于未定义的值 —— 只有一个 <code>undefined</code> 值的独立类型。</li><li><strong>布尔值</strong>（<code>boolean</code>）：用于 <code>true</code> 和 <code>false</code>。</li><li><strong>数字</strong>（<code>number</code>）：用于任何类型的数字：整数或浮点数，在 <code>±(253-1)</code> 范围内的整数。</li><li><strong>字符串</strong>（<code>string</code>）：用于字符串：一个字符串可以包含 0 个或多个字符，所以没有单独的单字符类型。</li><li><strong>符号</strong>（<code>symbol</code>）:用于唯一的标识符。</li><li>BigInt:一种数字类型,可以表示任意精度格式的整数</li></ul><p>引用类型（<strong>复杂数据类型</strong>）：引用类型的值是保存在内存中的对象。</p><ul><li>对象（<strong>Object</strong>）<ul><li>数组对象（Array）</li><li>函数对象（Function）</li><li>布尔对象（Boolean）</li><li>数字对象（Number）</li><li>字符串对象（String）</li><li>日期对象（Date）</li><li>正则对象（RegExp）</li><li>错误对象（Error）</li></ul></li></ul><blockquote><p>⚠️ <strong>注意</strong>： 与其他语言不同的是，JavaScript 不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的引用而不是实际的对象。所以引用类型的值是按引用访问的。</p></blockquote><h4 id="6、检测数据类型的常用方法"><a href="#6、检测数据类型的常用方法" class="headerlink" title="6、检测数据类型的常用方法"></a>6、检测数据类型的常用方法</h4><blockquote><p><strong>typeof、instanceof、constructor、Object.prototype.toString.call()</strong></p></blockquote><h6 id="1-typeof"><a href="#1-typeof" class="headerlink" title="1 .typeof"></a>1 .typeof</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="keyword">typeof</span> <span class="number">100</span>, <span class="comment">//&quot;number&quot;</span></span><br><span class="line">  <span class="keyword">typeof</span> <span class="literal">undefined</span>, <span class="comment">//&quot;undefined&quot;</span></span><br><span class="line">  <span class="keyword">typeof</span> <span class="literal">null</span>, <span class="comment">//&quot;object&quot;</span></span><br><span class="line">  <span class="keyword">typeof</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">  &#125;, <span class="comment">//&quot;function&quot;</span></span><br><span class="line">  <span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">100</span>), <span class="comment">//&#x27;object&#x27;</span></span><br><span class="line">  <span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&quot;abc&quot;</span>), <span class="comment">// &#x27;string&#x27;</span></span><br><span class="line">  <span class="keyword">typeof</span> <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>) <span class="comment">//&#x27;boolean&#x27;</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><blockquote><p>typeof 可以正常检测出：number、boolean、string、object、function、undefined、symbol、bigint</p><ul><li>检测基本数据类型，null 会检测 object，因为 null 是一个空的引用对象</li><li>检测复杂数据类型，除 function 外，均为 object</li></ul></blockquote><h6 id="2-instanceof"><a href="#2-instanceof" class="headerlink" title="2 . instanceof"></a><strong>2 . instanceof</strong></h6><p><code>instanceof</code> 运算符需要指定一个构造函数，或者说指定一个特定的类型，用来判断这个构造函数的原型是否在给定对象的原型链上</p><blockquote><p>基本数据类型中：Number，String，Boolean。字面量值不可以用 instanceof 检测，但是构造函数创建的值可以</p><p>注意：null 和 undefined 都返回了 false，这是因为它们的类型就是自己本身，并不是 Object 创建出来它们，所以返回了 false。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  <span class="number">100</span> <span class="keyword">instanceof</span> <span class="title class_">Number</span>, <span class="comment">//false</span></span><br><span class="line">  <span class="literal">undefined</span> <span class="keyword">instanceof</span> <span class="title class_">Object</span>, <span class="comment">//false</span></span><br><span class="line">  [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>] <span class="keyword">instanceof</span> <span class="title class_">Array</span>, <span class="comment">//true</span></span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">Error</span>() <span class="keyword">instanceof</span> <span class="title class_">Error</span> <span class="comment">//true</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><h6 id="3-constructor"><a href="#3-constructor" class="headerlink" title="3 .constructor"></a><strong>3 .constructor</strong></h6><p>constructor 是 prototype 对象上的属性，指向构造函数。根据实例对象寻找属性的顺序，若实例对象上没有实例属性或方法时，就去原型链上寻找，因此，实例对象也是能使用 constructor 属性的。可以检测出字面量方式创建的对象类型</p><p>如果输出一个类型的实例的 constructor，就如下所示：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">123</span>).<span class="property">constructor</span>);</span><br><span class="line"><span class="comment">//ƒ Number() &#123; [native code] &#125;</span></span><br></pre></td></tr></table></figure><p>可以看到它指向了 Number 的构造函数，因此，可以使用<code>num.constructor === Number</code>来判断一个变量是不是 Number 类型的</p><p>除了 undefined 和 null 之外，其他类型都可以通过 constructor 属性来判断类型。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;abcdef&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> bool = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// undefined和null没有constructor属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line">  num.<span class="property">constructor</span> === <span class="title class_">Number</span>,</span><br><span class="line">  str.<span class="property">constructor</span> === <span class="title class_">String</span>,</span><br><span class="line">  bool.<span class="property">constructor</span> === <span class="title class_">Boolean</span>,</span><br><span class="line">  arr.<span class="property">constructor</span> === <span class="title class_">Array</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">//所有结果均为true</span></span><br></pre></td></tr></table></figure><h6 id="4-使用-Object-prototype-toString-call-检测对象类型⭐"><a href="#4-使用-Object-prototype-toString-call-检测对象类型⭐" class="headerlink" title="4 . 使用 Object.prototype.toString.call()检测对象类型⭐"></a><strong>4 . 使用 Object.prototype.toString.call()检测对象类型</strong>⭐</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> toString = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line"></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="number">123</span>); <span class="comment">//&quot;[object Number]&quot;</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="literal">undefined</span>); <span class="comment">//&quot;[object Undefined]&quot;</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="literal">null</span>); <span class="comment">//&quot;[object Null]&quot;</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="regexp">/^[a-zA-Z]&#123;5,20&#125;$/</span>); <span class="comment">//&quot;[object RegExp]&quot;</span></span><br><span class="line">toString.<span class="title function_">call</span>(<span class="keyword">new</span> <span class="title class_">Error</span>()); <span class="comment">//&quot;[object Error]&quot;</span></span><br></pre></td></tr></table></figure><p>可以使用<code>Object.prototype.toString.call(obj).slice(8，-1)</code>来判断并截取</p><p>使用<code>Object.prototype.toString.call()</code>的方式来判断一个变量的类型是最准确的方法</p><h6 id="5-自己封装函数"><a href="#5-自己封装函数" class="headerlink" title="5 . 自己封装函数"></a><strong>5 . 自己封装函数</strong></h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getType</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> type = <span class="keyword">typeof</span> obj;</span><br><span class="line">  <span class="keyword">if</span> (type !== <span class="string">&quot;object&quot;</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> type;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//如果不是object类型的数据，直接用typeof就能判断出来</span></span><br><span class="line">  <span class="comment">//如果是object类型数据，准确判断类型必须使用Object.prototype.toString.call(obj)的方式才能判断</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(obj).<span class="title function_">replace</span>(<span class="regexp">/^\[object (\S+)]$/</span>, <span class="string">&quot;$1&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="6、isArray"><a href="#6、isArray" class="headerlink" title="6、isArray"></a><strong>6、isArray</strong></h6><p>isArray 可以检测出是否为数组</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="7、数组的常用方法有哪些"><a href="#7、数组的常用方法有哪些" class="headerlink" title="7、数组的常用方法有哪些"></a>7、数组的常用方法有哪些</h4><h5 id="一、操作方法"><a href="#一、操作方法" class="headerlink" title="一、操作方法"></a>一、操作方法</h5><h6 id="增"><a href="#增" class="headerlink" title="增"></a>增</h6><p>下面前三种是对原数组产生影响的增添方法，第四种则不会对原数组产生影响</p><blockquote><p>push( ) unshift( ) splice( ) concat( )</p></blockquote><p><strong>push()</strong></p><p><code>push()</code>方法接收任意数量的参数，并将它们添加到数组末尾，返回数组的最新长度</p><p><strong>unshift()</strong></p><p>unshift()在数组开头添加任意多个值，然后返回新的数组长度</p><p><strong>splice</strong></p><p>传入三个参数，分别是开始位置、0（要删除的元素数量）、插入的元素，返回的是空数组</p><p><strong>concat()</strong></p><p>合并</p><p>首先会创建一个当前数组的副本，然后再把它的参数添加到副本末尾，最后返回这个新构建的数组，不会影响原始数组</p><p><code>let colors = [&quot;red&quot;].concat(&quot;yellow&quot;, [&quot;black&quot;]);// [&quot;red&quot;, &quot;yellow&quot;, &quot;black&quot;]</code></p><h6 id="删"><a href="#删" class="headerlink" title="删"></a>删</h6><p>下面三种都会影响原数组，最后一项不影响原数组：</p><blockquote><p>pop() shift() splice() slice()</p></blockquote><p><strong>pop()</strong></p><p><code>pop()</code> 方法用于删除数组的最后一项，同时减少数组的<code>length</code> 值，返回被删除的项</p><p><strong>shift()</strong></p><p><code>shift()</code>方法用于删除数组的第一项，同时减少数组的<code>length</code> 值，返回被删除的项</p><p><strong>splice()</strong></p><p>传入两个参数，分别是开始位置，删除元素的数量，返回包含删除元素的数组</p><p><strong>slice()</strong></p><p>slice(开始索引, 结束索引) ，返回一个新数组，不会影响原始数组</p><h6 id="改"><a href="#改" class="headerlink" title="改"></a>改</h6><p>即修改原来数组的内容，常用<code>splice</code></p><p><strong>splice()</strong></p><p>传入三个参数，分别是（开始位置，要删除元素的数量，要插入的任意多个元素)，返回删除元素的数组</p><p>会改变原数组</p><h6 id="查"><a href="#查" class="headerlink" title="查"></a>查</h6><p>查找元素，返回元素坐标或者元素值</p><blockquote><p>indexOf( )  includes( )  find( )</p></blockquote><p><strong>indexOf()</strong></p><p>返回要查找的元素在数组中的位置，如果没找到则返回 -1</p><p><strong>includes()</strong></p><p>返回要查找的元素在数组中的位置，找到返回<code>true</code>，否则<code>false</code></p><p><strong>find()</strong></p><p>返回第一个匹配的元素</p><h5 id="二、排序方法"><a href="#二、排序方法" class="headerlink" title="二、排序方法"></a>二、排序方法</h5><blockquote><p>reverse()sort()</p></blockquote><h6 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h6><p>翻转</p><h6 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h6><p>排序</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sortArr</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> a - b; <span class="comment">// 升序</span></span><br><span class="line">  <span class="keyword">return</span> b - a; <span class="comment">// 降序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="三、转换方法"><a href="#三、转换方法" class="headerlink" title="三、转换方法"></a>三、转换方法</h5><h6 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h6><p>join() 方法接收一个参数，即字符串分隔符，返回包含所有项的字符串，转为字符串</p><h5 id="四、迭代方法"><a href="#四、迭代方法" class="headerlink" title="四、迭代方法"></a>四、迭代方法</h5><p>常用来迭代数组的方法（除 forEach 外其他都不会对空数组进⾏检测、不会改变原始数组）有如下：</p><blockquote><p>some() every() forEach() filter() map()</p></blockquote><h6 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h6><p>对数组每一项都运行传入的测试函数，如果至少有 1 个元素返回 true ，则这个方法返回 true</p><h6 id="every"><a href="#every" class="headerlink" title="every()"></a>every()</h6><p>对数组每一项都运行传入的测试函数，如果所有元素都返回 true ，则这个方法返回 true</p><h6 id="forEach"><a href="#forEach" class="headerlink" title="forEach()"></a>forEach()</h6><p>对数组每一项都运行传入的函数，没有返回值</p><h6 id="filter"><a href="#filter" class="headerlink" title="filter()"></a>filter()</h6><p>对数组每一项都运行传入的函数，函数返回 <code>true</code> 的项会组成数组之后返回</p><h6 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h6><p>映射 对数组每一项都运行传入的函数，返回由每次函数调用的结果构成的数组</p><h4 id="8、深浅拷贝"><a href="#8、深浅拷贝" class="headerlink" title="8、深浅拷贝"></a>8、深浅拷贝</h4><blockquote><p><strong>基本类型</strong>数据保存在在<strong>栈</strong>内存中</p><p><strong>引用类型</strong>数据保存在<strong>堆</strong>内存中，引用数据类型的变量是一个指向堆内存中实际对象的引用，存在栈中</p></blockquote><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/eq4kTpIjEyhCWwu.png?x-oss-process=style/huyu" alt=""></p><h5 id="深拷贝和浅拷贝的区别"><a href="#深拷贝和浅拷贝的区别" class="headerlink" title="深拷贝和浅拷贝的区别"></a>深拷贝和浅拷贝的区别</h5><p><strong>1.浅拷贝</strong>： 将原对象或原数组的引用直接赋给新对象，新数组，新对象/数组只是原对象的一个引用。</p><p>如果属性是基本类型，拷贝的就是基本类型的值。如果属性是引用类型，拷贝的就是内存地址，即浅拷贝是拷贝一层，深层次的引用类型则共享内存地址</p><p><strong>2.深拷贝</strong>： 创建一个新的对象和数组，将原对象的各项属性的“值”（数组的所有元素）拷贝过来，是“值”而不是“引用”</p><h5 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h5><p><strong>数组浅拷贝:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接遍历</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = [];</span><br><span class="line">  arr.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> newArr.<span class="title function_">push</span>(item));</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// slice</span></span><br><span class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> newArr2 = arr2.<span class="title function_">slice</span>();</span><br><span class="line"><span class="comment">//    concat() 合并空数组实现</span></span><br><span class="line"><span class="keyword">const</span> arr3 = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>];</span><br><span class="line"><span class="keyword">const</span> newArr3 = arr3.<span class="title function_">concat</span>([]);</span><br></pre></td></tr></table></figure><p><strong>对象浅拷贝:</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 直接遍历</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">shallowCopy</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newObj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    newObj[item] = obj[item];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newObj;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用拓展运算符</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">name</span>: <span class="string">&quot;Bob&quot;</span>, <span class="attr">age</span>: <span class="number">17</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> newObj2 = &#123; ...obj2 &#125;;</span><br></pre></td></tr></table></figure><h5 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h5><blockquote><p>用深拷贝最后要递归到全部是基本值，不然可能会陷入死循环/循环引用，导致栈溢出</p><p>TODO(待理解)⭐： 处理过的数据使用 map 结构缓存起来 &gt;&gt; 递归的时候碰到相同的数据 &gt;&gt; 直接使用缓存里面的</p></blockquote><p><strong>1. 先转换成字符串，在转换成(数组/对象) JSON.parse(JSON.stringify(XXXX))</strong></p><p>有一个缺点 里面的函数不能拷贝</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> array = [&#123; <span class="attr">number</span>: <span class="number">1</span> &#125;, &#123; <span class="attr">number</span>: <span class="number">2</span> &#125;, &#123; <span class="attr">number</span>: <span class="number">3</span> &#125;];</span><br><span class="line"><span class="keyword">const</span> str = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(array);</span><br><span class="line"><span class="keyword">const</span> copyArray = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(str);</span><br></pre></td></tr></table></figure><p><strong>2、递归实现简单的深拷贝：</strong></p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj = &#123;&#125;</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> obj !== <span class="string">&quot;object&quot;</span> || obj == <span class="literal">null</span>) &#123;</span><br><span class="line">    <span class="comment">// obj 是 null ，或者不是对象和数组，直接返回</span></span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 初始化返回结果</span></span><br><span class="line">  <span class="keyword">let</span> result;</span><br><span class="line">  obj <span class="keyword">instanceof</span> <span class="title class_">Array</span> ? (result = []) : (result = &#123;&#125;);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">    <span class="comment">// 保证 key 不是原型的属性</span></span><br><span class="line">    <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">      <span class="comment">// 递归调用！！！</span></span><br><span class="line">      result[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 返回结果</span></span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>3、解构赋值法实现一层拷贝</strong></p><p><strong>4、Object.assign() 实现一层深拷贝</strong></p><p><strong>5、 lodash第三方库</strong></p><p><strong>小结</strong></p><p>前提为拷贝类型为引用类型的情况下：</p><ul><li>浅拷贝是拷贝一层，属性为对象时，浅拷贝是复制，两个对象指向同一个地址</li><li>深拷贝是递归拷贝深层次，属性为对象时，深拷贝是新开栈，两个对象指向不同的地址</li></ul><h4 id="9、闭包"><a href="#9、闭包" class="headerlink" title="9、闭包"></a>9、闭包</h4><p><strong>什么是闭包</strong></p><blockquote><p>通俗地讲闭包就是在一个函数里边再定义一个函数，这个内部函数一直保持有对外部函数中作用域的访问权限(小房间一直可以有大房子的访问权限)</p></blockquote><p><strong>闭包的作用</strong></p><blockquote><ol><li>访问其他函数内部变量</li><li>保护变量不被 JS 的垃圾回收机制回收</li><li>避免全局变量被污染 方便调用上下文的局部变量 加强封装性</li></ol></blockquote><p><strong>闭包的优点</strong></p><blockquote><p>（一）变量长期驻扎在内存中<br>（二）另一个就是可以重复使用变量，并且不会造成变量污染<br>① 全局变量可以重复使用，但是容易造成变量污染。不同的地方定义了相同的全局变量,这样就会产生混乱。<br>② 局部变量仅在局部作用域内有效，不可以重复使用，不会造成变量污染。<br>③ 闭包结合了全局变量和局部变量的优点。可以重复使用变量，并且不会造成变量污染</p></blockquote><p><strong>闭包的缺点</strong></p><blockquote><p>由于闭包会使得函数中的变量都被保存在内存中，内存消耗很大，所以不能滥用闭包，否则会造成网页的性能问题，在 IE 中可能导致内存泄露。解决方法是，在退出函数之前，将不使用的局部变量全部删除。</p></blockquote><h4 id="10、数组去重"><a href="#10、数组去重" class="headerlink" title="10、数组去重"></a>10、数组去重</h4><p><a href="https://segmentfault.com/a/1190000016418021">https://segmentfault.com/a/1190000016418021</a></p><h6 id="Set-去重"><a href="#Set-去重" class="headerlink" title="Set 去重"></a>Set 去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> newArr = [...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]; <span class="comment">// [ 1, 2, 3, 4, 5 ]</span></span><br></pre></td></tr></table></figure><h6 id="indexOf-去重"><a href="#indexOf-去重" class="headerlink" title="indexOf 去重"></a>indexOf 去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (newArr.<span class="title function_">indexOf</span>(arr[i]) === -<span class="number">1</span>) newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="splice-去重"><a href="#splice-去重" class="headerlink" title="splice 去重"></a>splice 去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; arr.<span class="property">length</span>; j++) &#123;</span><br><span class="line">      <span class="keyword">if</span> (arr[i] === arr[j]) &#123;</span><br><span class="line">        arr.<span class="title function_">splice</span>(j, <span class="number">1</span>);</span><br><span class="line">        j--;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="includes-去重"><a href="#includes-去重" class="headerlink" title="includes 去重"></a>includes 去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> newArr = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!newArr.<span class="title function_">includes</span>(arr[i])) &#123;</span><br><span class="line">      newArr.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> newArr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="filter-去重"><a href="#filter-去重" class="headerlink" title="filter 去重"></a>filter 去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">    <span class="comment">//当前元素，在原始数组中的第一个索引===当前索引值，否则返回当前元素</span></span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">indexOf</span>(item) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="findIndex数组对象去重"><a href="#findIndex数组对象去重" class="headerlink" title="findIndex数组对象去重"></a>findIndex数组对象去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="comment">// todo:待总结数组去重方法</span></span><br><span class="line">  <span class="comment">// 方法一</span></span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">findIndex</span>(<span class="function">(<span class="params">child</span>) =&gt;</span> child.<span class="property">id</span> === item.<span class="property">id</span>) === index;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="Map数组对象去重"><a href="#Map数组对象去重" class="headerlink" title="Map数组对象去重"></a>Map数组对象去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">new</span> <span class="title class_">Map</span>();</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">filter</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> !res.<span class="title function_">has</span>(item.<span class="property">id</span>) &amp;&amp; res.<span class="title function_">set</span>(item.<span class="property">id</span>, <span class="number">1</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="reduce-数组对象去重"><a href="#reduce-数组对象去重" class="headerlink" title="reduce 数组对象去重"></a>reduce 数组对象去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">return</span> arr.<span class="title function_">reduce</span>(<span class="function">(<span class="params">pre, item</span>) =&gt;</span> &#123;</span><br><span class="line">    obj[item.<span class="property">id</span>] ? <span class="string">&quot;&quot;</span> : (obj[item.<span class="property">id</span>] = <span class="literal">true</span> &amp;&amp; pre.<span class="title function_">push</span>(item));</span><br><span class="line">    <span class="keyword">return</span> pre;</span><br><span class="line">  &#125;, []);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="lodash-库数组和数组对象去重"><a href="#lodash-库数组和数组对象去重" class="headerlink" title="lodash 库数组和数组对象去重"></a>lodash 库数组和数组对象去重</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; isEqual, uniqWith, uniqBy &#125; <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line"><span class="keyword">let</span> arr = [</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;sli&quot;</span>, <span class="attr">year</span>: <span class="number">2012</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;ap&quot;</span>, <span class="attr">year</span>: <span class="number">2015</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;alslion&quot;</span>, <span class="attr">year</span>: <span class="number">2012</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;pose&quot;</span>, <span class="attr">year</span>: <span class="number">2012</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&quot;pose&quot;</span>, <span class="attr">year</span>: <span class="number">2012</span> &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 根据id去掉相同的元素:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uniqBy</span>(arr, <span class="string">&quot;id&quot;</span>));</span><br><span class="line"><span class="comment">// 深检查数组每一项进行去重:</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">uniqWith</span>(arr, isEqual));</span><br></pre></td></tr></table></figure><h4 id="11、逻辑运算符-amp-amp-和"><a href="#11、逻辑运算符-amp-amp-和" class="headerlink" title="11、逻辑运算符 &amp;&amp; 和 ||"></a>11、逻辑运算符 &amp;&amp; 和 ||</h4><p><strong>||运算符: 条件 1 || 条件 2</strong></p><ul><li>若条件 1 为 true、返回条件 1</li><li>若条件 1 为 false、不管 || 后面是 true 还是 false、都是返回||后面的值、即则返回条件 2;</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> || <span class="string">&quot;&quot;</span>); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> || <span class="number">0</span>); <span class="comment">// 0</span></span><br></pre></td></tr></table></figure><p><strong>&amp;&amp;运算符: 条件 1 &amp;&amp; 条件 2</strong></p><ul><li>若条件 1 为 false、就返回返回条件 1 的值;</li><li>若条件 1 为 true, 无论条件 2 为 true 或者 false, 都将返回条件 2 的值;</li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0</span> &amp;&amp; <span class="string">&quot;&quot;</span>); <span class="comment">// 0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> &amp;&amp; <span class="number">0</span>); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="12、new-的过程"><a href="#12、new-的过程" class="headerlink" title="12、new 的过程"></a>12、new 的过程</h4><p>分析一下 new 的整个过程：</p><ul><li>1、创建一个空对象</li><li>2、this 指向 obj 空对象，并调用构造函数</li><li>3、继承构造函数的原型</li><li>4、返回对象</li></ul><p>简单实现一下 new：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myNew</span>(<span class="params">fn, ...args</span>) &#123;</span><br><span class="line">  <span class="comment">// 第一步：创建一个空对象</span></span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="comment">// 第二步：this指向obj 空对象，并调用构造函数</span></span><br><span class="line">  fn.<span class="title function_">apply</span>(obj, args);</span><br><span class="line">  <span class="comment">// 第三步：继承构造函数的原型</span></span><br><span class="line">  obj.<span class="property">__proto__</span> = fn.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">  <span class="comment">// 第四步：返回对象</span></span><br><span class="line">  <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="13、事件循环-Event-Loop-（结合着14条讲）"><a href="#13、事件循环-Event-Loop-（结合着14条讲）" class="headerlink" title="13、事件循环 Event Loop  （结合着14条讲）"></a>13、事件循环 Event Loop  （结合着14条讲）</h4><p><strong>是什么？</strong></p><blockquote><p>首先，<code>JavaScript</code>是一门单线程的语言，意味着同一时间内只能做一件事，如果前面一个任务耗时太长，后续的任务不得不等待，可能会导致程序假死的问题，但是这并不意味着单线程就是阻塞，而实现单线程非阻塞的方法就是事件循环</p></blockquote><p>在<code>JavaScript</code>中，所有的任务都可以分为</p><ul><li>同步任务：立即执行的任务，同步任务一般会直接进入到主线程中执行</li><li>异步任务：异步执行的任务，比如<code>ajax</code>网络请求，<code>setTimeout</code>定时函数等</li></ul><p>同步任务进入主线程，即主执行栈，异步任务进入任务队列，主线程内的任务执行完毕为空，会去任务队列读取对应的任务，推入主线程执行。过程不断重复就是<strong>事件循环</strong></p><h4 id="14、async-和-await-宏任务-和-微任务"><a href="#14、async-和-await-宏任务-和-微任务" class="headerlink" title="14、async 和 await 宏任务 和 微任务"></a>14、async 和 await 宏任务 和 微任务</h4><p><a href="https://www.mianshiya.com/qd/bf4a0bf261c7e2500090d9482499675f">https://www.mianshiya.com/qd/bf4a0bf261c7e2500090d9482499675f</a></p><h5 id="宏任务-和-微任务"><a href="#宏任务-和-微任务" class="headerlink" title="宏任务 和 微任务"></a>宏任务 和 微任务</h5><p>下面代码执行顺序是什么</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)  <span class="comment">// 同步</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;  <span class="comment">// 宏任务</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>)=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;new Promise&#x27;</span>) <span class="comment">// 同步</span></span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;then&#x27;</span>)  <span class="comment">// 微任务</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>) <span class="comment">// 同步</span></span><br></pre></td></tr></table></figure><p><code>1</code>=&gt;<code>&#39;new Promise&#39;</code>=&gt; <code>3</code> =&gt; <code>&#39;then&#39;</code> =&gt; <code>2</code></p><h6 id="1、什么是宏任务和微任务"><a href="#1、什么是宏任务和微任务" class="headerlink" title="1、什么是宏任务和微任务"></a>1、什么是宏任务和微任务</h6><p>Javascript 把异步任务又做了进一步的划分，异步任务又分为两类，分别是：</p><p><strong>微任务：</strong></p><p>一个需要异步执行的函数，执行时机是在主函数执行结束之后、当前宏任务结束之前</p><p>常见的微任务有：</p><ul><li>Promise.then</li><li>MutaionObserver</li><li>Object.observe（已废弃；Proxy 对象替代）</li><li>process.nextTick（Node.js）</li></ul><p><strong>宏任务：</strong></p><p>宏任务的时间粒度比较大，执行的时间间隔是不能精确控制的，对一些高实时性的需求就不太符合</p><p>常见的宏任务有：</p><ul><li>script (可以理解为外层同步代码)</li><li>setTimeout/setInterval</li><li>UI rendering/UI事件</li><li>postMessage、MessageChannel</li><li>setImmediate、I/O（Node.js）</li></ul><blockquote><p><strong>promise里面的代码是同步任务 promise的方法.then()等是异步任务 微任务</strong></p></blockquote><h6 id="2、宏任务和微任务的执行顺序"><a href="#2、宏任务和微任务的执行顺序" class="headerlink" title="2、宏任务和微任务的执行顺序"></a>2、宏任务和微任务的执行顺序</h6><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/YvSB58sUMZg7l31.png?x-oss-process=style/huyu" ></p><p>每一个宏任务执行完之后，都会检查是否存在待执行的微任务，如果有，则执行完所有微任务之后，再继续执行下一个宏任务。</p><blockquote><p><strong>1、微任务比宏任务的执行时间要早</strong></p><p><strong>2、微任务在DOM渲染之前执行，宏任务在DOM渲染之后执行</strong></p></blockquote><h5 id="async与await"><a href="#async与await" class="headerlink" title="async与await"></a>async与await</h5><blockquote><p><code>async</code> 是异步的意思，<code>await</code>是等待。所以可以理解<code>async</code>就是用来声明一个异步方法，而 <code>await</code>是用来等待异步方法执行</p></blockquote><h6 id="async"><a href="#async" class="headerlink" title="async"></a>async</h6><p><code>async</code>函数返回一个<code>promise</code>对象</p><h6 id="await"><a href="#await" class="headerlink" title="await"></a>await</h6><p>正常情况下，<code>await</code>命令后面是一个 <code>Promise</code>对象，返回该对象的结果。如果不是 <code>Promise</code>对象，就直接返回对应的值</p><p>不管<code>await</code>后面跟着的是什么，<code>await</code>都会阻塞后面的代码（加入微任务列表）</p><p>下面代码执行顺序是什么：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;settimeout&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title function_">async1</span>()</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><p>分析过程：</p><ol><li>执行整段代码，遇到 <code>console.log(&#39;script start&#39;)</code> 直接打印结果，输出 <code>script start</code></li><li>遇到定时器了，它是宏任务，先放着不执行</li><li>遇到 <code>async1()</code>，执行 <code>async1</code> 函数，先打印 <code>async1 start</code>，下面遇到<code>await</code>怎么办？先执行 <code>async2</code>，打印 <code>async2</code>，然后阻塞下面代码（即加入微任务列表），跳出去执行同步代码</li><li>跳到 <code>new Promise</code> 这里，直接执行，打印 <code>promise1</code>，下面遇到 <code>.then()</code>，它是微任务，放到微任务列表等待执行</li><li>最后一行直接打印 <code>script end</code>，现在同步代码执行完了，开始执行微任务，即 <code>await</code>下面的代码，打印 <code>async1 end</code></li><li>继续执行下一个微任务，即执行 <code>then</code> 的回调，打印 <code>promise2</code></li><li>上一个宏任务所有事都做完了，开始下一个宏任务，就是定时器，打印 <code>settimeout</code></li></ol><p>所以最后的结果是：<code>script start</code>、<code>async1 start</code>、<code>async2</code>、<code>promise1</code>、<code>script end</code>、<code>async1 end</code>、<code>promise2</code>、<code>settimeout</code></p><h4 id="15、call、apply、bind-的区别"><a href="#15、call、apply、bind-的区别" class="headerlink" title="15、call、apply、bind 的区别"></a>15、<strong>call、apply、bind 的区别</strong></h4><ul><li>都可以改变 <code>this</code> 指向</li><li>call 和 apply 会<code>立即执行</code>，bind 不会，而是返回一个函数</li><li>call 和 bind 可以接收<code>多个参数</code>，<code>apply</code> 只能接受两个，第二个是<code>数组</code></li><li>bind 参数可以分多次传入</li></ul><h4 id="16、继承"><a href="#16、继承" class="headerlink" title="16、继承"></a>16、继承</h4><blockquote><p><strong>首先，继承的是 属性 和 原型方法</strong></p></blockquote><h5 id="Class-继承"><a href="#Class-继承" class="headerlink" title="Class 继承"></a>Class 继承</h5><p>ES6：<a href="https://es6.ruanyifeng.com/#docs/class-extends">https://es6.ruanyifeng.com/#docs/class-extends</a></p><blockquote><p>Class 可以通过<code>extends</code>关键字实现继承，让子类继承父类的属性和方法</p><p>子类如果写 <code>constructor()</code>就必须要写 <code>super()</code>,且要写在最前面，否则报错，只有<code>super()</code>方法才能让子类实例继承父类。</p><p>:facepunch:ps: ES6 规定，子类必须在<code>constructor()</code>方法中调用<code>super()</code>，否则就会报错。这是因为子类自己的<code>this</code>对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，添加子类自己的实例属性和方法。如果不调用<code>super()</code>方法，子类就得不到自己的<code>this</code>对象。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x,y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">...</span><br><span class="line">  &#125;</span><br><span class="line"><span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Son</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">    <span class="variable language_">super</span>(x, y); <span class="comment">// 调用父类的constructor(x, y)</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">color</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">super</span>.<span class="title function_">toString</span>(); <span class="comment">// 调用父类的toString()</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="ES5-继承"><a href="#ES5-继承" class="headerlink" title="ES5 继承"></a>ES5 继承</h5><blockquote><p>js 中有很多中继承的方式，不过每一种继承方式都有优缺点，重点掌握 ES5 继承，别的继承方式基本都是 ES5 继承的语法糖</p><p>先创造子类实例，通过<code>Parent.call(this, arg1, arg2...)</code>将父类的属性方法添加到<code>this</code>上，继承了父类的属性</p><p>再通过 <code>Son.prototype = Object.create( Father.prototype )</code>将父类的原型继承过来</p><p>最后可以通过<code>Son.prototype.constructor = Son</code> 将子类的原型指到子类身上</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Father</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;黑马&quot;</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 继承的是 属性 和 原型方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Son</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="title class_">Father</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Son.prototype = new Father() // 相互影响 会存在一个 &#123;name:undefined&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.create 创造出一个空对象</span></span><br><span class="line"><span class="comment">// 让当前对象的__proto__ 指向传入的对象</span></span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Father</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="title class_">Son</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Son</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> son = <span class="keyword">new</span> <span class="title class_">Son</span>(<span class="string">&quot;程序员&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(son.<span class="title function_">get</span>() + son.<span class="property">name</span>); <span class="comment">// 黑马程序员</span></span><br></pre></td></tr></table></figure><h4 id="17、原型链"><a href="#17、原型链" class="headerlink" title="17、原型链"></a>17、原型链</h4><p><strong>什么是原型原型链？</strong></p><blockquote><p>每个函数都有一个 prototype 原型(原型就是对象)，原型对象有一个 constructor 属性，指向的是构造函数</p><p>访问对象的某一个属性或者方法时，会从对象自身查找，如果查找不到，就会去原型链上去找，原型的最终目的就是让所有的实例能够共享其属性和方法</p><p>查找顺序:</p><p>自身 &gt;<code>__proto__</code>&gt; 构造函数的原型对象 &gt;<code>__proto__</code>&gt; Object 的原型对象 &gt;<code>__proto__</code>&gt; null</p></blockquote><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/zlOJPgIK3y7YkWh.png?x-oss-process=style/huyu" alt=""></p><h4 id="18、堆和栈-TODO-⭐⭐"><a href="#18、堆和栈-TODO-⭐⭐" class="headerlink" title="18、堆和栈 TODO ⭐⭐"></a>18、堆和栈 TODO ⭐⭐</h4><p><a href="https://juejin.cn/post/6844903618999500808">https://juejin.cn/post/6844903618999500808</a></p><h4 id="19、ES6-Set-和-Map-TODO-⭐⭐"><a href="#19、ES6-Set-和-Map-TODO-⭐⭐" class="headerlink" title="19、ES6 Set 和 Map TODO ⭐⭐"></a>19、ES6 Set 和 Map TODO ⭐⭐</h4><h4 id="20、includes"><a href="#20、includes" class="headerlink" title="20、includes"></a>20、<strong>includes</strong></h4><blockquote><p><code>includes()</code> 方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回 false</p></blockquote><p>语法</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">includes</span>(valueToFind[, fromIndex])</span><br></pre></td></tr></table></figure><ul><li><p><code>valueToFind</code></p><p>需要查找的元素值。<strong>Note:</strong> 使用 <code>includes()</code>比较字符串和字符时是区分大小写。</p></li><li><p><code>fromIndex</code> 可选</p><p>从<code>fromIndex</code> 索引处开始查找 <code>valueToFind</code>。如果为负值，则按升序从 <code>array.length + fromIndex</code> 的索引开始搜 （即使从末尾开始往前跳 <code>fromIndex</code> 的绝对值个索引，然后往后搜寻）。默认为 0。</p></li></ul><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="title function_">includes</span>(<span class="number">3</span>, -<span class="number">1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="title class_">NaN</span>].<span class="title function_">includes</span>(<span class="title class_">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="21、find"><a href="#21、find" class="headerlink" title="21、find"></a>21、<strong>find</strong></h4><blockquote><p><code>find()</code>方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 <code>undefined</code></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">find</span>(callback[, thisArg])</span><br></pre></td></tr></table></figure><ul><li><p><code>callback</code></p><p>在数组每一项上执行的函数，接收 3 个参数：<code>element</code>当前遍历到的元素。<code>index</code>可选当前遍历到的索引。<code>array</code>可选数组本身</p></li><li><p><code>thisArg</code>可选</p><p>执行回调时用作 <code>this</code> 的对象</p></li></ul><h4 id="find-findindex-indexOf-includes-filter"><a href="#find-findindex-indexOf-includes-filter" class="headerlink" title="find findindex indexOf  includes filter"></a>find findindex indexOf  includes filter</h4><h4 id="22、hasOwnProperty"><a href="#22、hasOwnProperty" class="headerlink" title="22、hasOwnProperty"></a>22、hasOwnProperty</h4><p><a href="https://juejin.cn/post/6966053301615853582">https://juejin.cn/post/6966053301615853582</a></p><blockquote><p><code>hasOwnProperty</code>是Object.prototype的一个方法<br><strong>他能判断一个对象是否包含自定义属性而不是原型链上的属性</strong><br><code>hasOwnProperty</code> 是 JavaScript 中唯一一个处理属性但是不查找原型链的函数</p></blockquote><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20220805205922244.png?x-oss-process=style/huyu" alt="image-20220805205922244" style="zoom:150%;" /></p><h4 id="23、JS如何判断两个对象是否相等"><a href="#23、JS如何判断两个对象是否相等" class="headerlink" title="23、JS如何判断两个对象是否相等"></a>23、JS如何判断两个对象是否相等</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"><span class="attr">job</span>: &#123;</span><br><span class="line"><span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> b = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;zs&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line"><span class="attr">job</span>: &#123;</span><br><span class="line"><span class="attr">sex</span>: <span class="string">&#x27;男&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="JSON-stringify（）转字符串"><a href="#JSON-stringify（）转字符串" class="headerlink" title="JSON.stringify（）转字符串"></a>JSON.stringify（）转字符串</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(a) === <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(b))  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>缺陷</strong>：哪怕两个对象的内部数据相等，但只要每个数据对应的位置不同，其结果也为false</p><h6 id="函数检测"><a href="#函数检测" class="headerlink" title="函数检测"></a>函数检测</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isEqual</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line"> <span class="keyword">const</span> aKeysList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(a)</span><br><span class="line"> <span class="keyword">const</span> bKeysList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(b)</span><br><span class="line"> <span class="keyword">if</span> (aKeysList.<span class="property">length</span> !== bKeysList.<span class="property">length</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> aKey <span class="keyword">in</span> a) &#123;</span><br><span class="line">  <span class="keyword">if</span> (a[aKey] !== b[aKey]) &#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(a, b))   <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>缺陷</strong>：若对象当中嵌有引用类型数据，则此方法则不适用，需要进行改进</p><h6 id="函数检测的基础上递归"><a href="#函数检测的基础上递归" class="headerlink" title="函数检测的基础上递归"></a>函数检测的基础上递归</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">isEqual</span> = (<span class="params">a, b</span>) =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> aKeysList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(a)</span><br><span class="line"><span class="keyword">const</span> bKeysList = <span class="title class_">Object</span>.<span class="title function_">keys</span>(b)</span><br><span class="line"><span class="keyword">if</span> (aKeysList.<span class="property">length</span> !== bKeysList.<span class="property">length</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> aKey <span class="keyword">in</span> a) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> a[aKey] === <span class="string">&#x27;object&#x27;</span> || <span class="keyword">typeof</span> b[aKey] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_">isEqual</span>(a[aKey], b[aKey])) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[aKey] !== b[aKey]) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">isEqual</span>(a, b))  <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="24、for···in和for···of的区别"><a href="#24、for···in和for···of的区别" class="headerlink" title="24、for···in和for···of的区别"></a>24、for···in和for···of的区别</h4><p><a href="https://blog.csdn.net/weixin_43638968/article/details/109291957">https://blog.csdn.net/weixin_43638968/article/details/109291957</a></p><p><strong>首先一句话：(for···in取key，for··of取value)</strong><br>①从遍历<a href="https://so.csdn.net/so/search?q=数组&amp;spm=1001.2101.3001.7020">数组</a>角度来说，for···in遍历出来的是key(即下标)，for···of遍历出来的是value(即数组的值)；</p><p>②从遍历<a href="https://so.csdn.net/so/search?q=字符串&amp;spm=1001.2101.3001.7020">字符串</a>的角度来说，同数组一样。</p><p>③从遍历对象的角度来说，for···in会遍历出来的为对象的key，但for···of会直接报错。</p><p>④如果要使用for…of遍历普通对象，需要配合Object.keys()一起使用。</p><h4 id="25、创建对象的几种方式"><a href="#25、创建对象的几种方式" class="headerlink" title="25、创建对象的几种方式"></a>25、创建对象的几种方式</h4><p><a href="https://juejin.cn/post/6844904126233444360">https://juejin.cn/post/6844904126233444360</a></p><h6 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="new-Object"><a href="#new-Object" class="headerlink" title="new Object"></a>new Object</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br></pre></td></tr></table></figure><h6 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line"><span class="title function_">sang</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;唱歌&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;张三&#x27;</span>, <span class="number">22</span>)</span><br></pre></td></tr></table></figure><h6 id="ES6-class"><a href="#ES6-class" class="headerlink" title="ES6 class"></a>ES6 class</h6><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123; <span class="comment">// constructor构造函数</span></span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayname</span>(<span class="params"></span>) &#123; <span class="comment">//原型上的</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> per = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;dz&#x27;</span>, <span class="number">23</span>)</span><br></pre></td></tr></table></figure><h4 id="26、变量提升与函数提升"><a href="#26、变量提升与函数提升" class="headerlink" title="26、变量提升与函数提升"></a>26、变量提升与函数提升</h4><h6 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h6><p>将变量声明提升到它所在作用域的最开始的部分。</p><ul><li><strong>通过var定义（声明）的变量，在定义语句之前就可以访问到</strong></li><li><strong>值：undefined；</strong></li></ul><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">//undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><p>因为有变量提升的缘故，上面代码实际的执行顺序为：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br><span class="line">a = <span class="number">1</span>;</span><br></pre></td></tr></table></figure><h6 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h6><blockquote><p>js中创建函数有两种方式：<strong>函数声明式</strong>和<strong>函数表达式</strong></p></blockquote><p><strong>1、函数声明提升</strong></p><p><strong>js在执行之前，会把foo函数提升到最前面</strong>，所以我们在fun函数定义之前就可以使用fun函数。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fun</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>打印结果为aa；说明以函数声明来定义函数时，可以在定义函数之前访问到定义的函数。</p><p><strong>2、函数表达式提升</strong></p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;函数表达式&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此种声明方式我们可以理解为<strong>一个普通变量的提升</strong>，在js代码执行之前会把fun提升带最前面，<strong>在函数赋值之前，fun是undefined，如果调用fun(),将会报错</strong>。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">fun</span>();</span><br><span class="line"><span class="keyword">var</span> fun = <span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;aa&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时打印的结果为报错<code>Uncaught TypeError: fun is not a function</code>，因为在js代码执行之前，会把fun提升到最前面，值为undefined，不是一个函数，以函数的形式来进行调用时将会报错。</p><h4 id="27、暂时性死区"><a href="#27、暂时性死区" class="headerlink" title="27、暂时性死区"></a>27、暂时性死区</h4><blockquote><p>暂时性死区的本质就是，只要一进入当前作用域，所要使用的变量就已经存在了，但是不可获取，<strong>只有等到声明变量的那一行代码出现，才可以获取和使用该变量</strong></p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(a);   <span class="comment">// ReferenceError: Cannot access &#x27;a&#x27; before</span></span><br><span class="line"><span class="keyword">let</span>/<span class="keyword">const</span> a = <span class="number">78</span></span><br><span class="line"> &#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><h4 id="28、ES6新增了哪些语法"><a href="#28、ES6新增了哪些语法" class="headerlink" title="28、ES6新增了哪些语法"></a>28、ES6新增了哪些语法</h4><blockquote><ul><li>class</li><li>箭头函数</li><li>解构赋值</li><li>字符串模板</li><li>async/await</li><li>引入 module 模块</li><li>generators(生成器)</li><li>Map和Set</li></ul></blockquote><h4 id="29、假如有10万条数据需要处理，前端应该怎么处理？"><a href="#29、假如有10万条数据需要处理，前端应该怎么处理？" class="headerlink" title="29、假如有10万条数据需要处理，前端应该怎么处理？"></a>29、假如有10万条数据需要处理，前端应该怎么处理？</h4><p><a href="https://juejin.cn/post/6844904184689475592">https://juejin.cn/post/6844904184689475592</a></p><p><a href="https://juejin.cn/post/7101206944534233125#heading-29">https://juejin.cn/post/7101206944534233125#heading-29</a></p><p>思路：</p><ol><li><strong>采用懒加载+分页(前端维护懒加载的数据分发和分页)</strong></li><li><strong>使用虚拟滚动技术(目前react的antd4.0已支持虚拟滚动的select长列表)</strong></li></ol>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>打印组件</title>
      <link href="/posts/12573.html"/>
      <url>/posts/12573.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="打印element-ui的table表单"><a href="#打印element-ui的table表单" class="headerlink" title="打印element.ui的table表单"></a>打印element.ui的table表单</h1><blockquote><p>1，首先给需要打印的元素一个id</p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221021222503430.png" alt="image-20221021222503430"></p><p>2，在点击打印按钮的时候调用方法，在方法中传入id</p><p><img src="https://raw.githubusercontent.com/pan52yu/blogImg/main/image-20221021222533133.png" alt="image-20221021222533133"></p><p>3，代码会拼接成一个新的页面，然后打开一个新的浏览器标签，预览打印，需要调整的地方，可以在表单的样式中调整。假如说不想打印表单的最后一列“操作”，可以复制一个新的表单，然后隐藏，给它id，把“操作”这列的代码删掉，打印出来就不会有“操作”这一列了。具体的可以看下代码。</p></blockquote><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">PrintForm</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="comment">// 空页面</span></span><br><span class="line">  <span class="keyword">let</span> printStr = <span class="string">&quot;&lt;html&gt;&lt;head&gt;&lt;meta http-equiv=&#x27;Content-Type&#x27; content=&#x27;text/html; charset=utf-8&#x27;&gt;&lt;/head&gt;&quot;</span>;</span><br><span class="line">  <span class="comment">// 定义element-ui table组件的样式</span></span><br><span class="line">  <span class="keyword">const</span> tabStyle = <span class="string">`&lt;style&gt;</span></span><br><span class="line"><span class="string">      table&#123;width:150%;display:table-cell!important;box-sizing:border-box;table-layout:auto!important;&#125;</span></span><br><span class="line"><span class="string">      .el-table__header,.el-table__body,.el-table__footer&#123;width:100%!important;border-collapse: collapse;text-align:center;&#125;</span></span><br><span class="line"><span class="string">      table,table tr th, table tr td &#123; border:1px solid #ddd;color:#606266;word-wrap:break-word&#125;</span></span><br><span class="line"><span class="string">      table tr th,table tr td&#123;padding:5 10px;word-wrap:break-word &#125;</span></span><br><span class="line"><span class="string">      .el-table__body, tr td .cell&#123;width:100%!important&#125;</span></span><br><span class="line"><span class="string">      .el-table th.gutter&#123;display: none;&#125;</span></span><br><span class="line"><span class="string">      .el-table colgroup.gutter&#123;display: none;&#125;</span></span><br><span class="line"><span class="string">      &lt;/style&gt;&lt;body&gt;`</span>;</span><br><span class="line">  <span class="keyword">let</span> content = <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="comment">// 获取名为传入id的 dom元素内的内容</span></span><br><span class="line">  <span class="keyword">const</span> html = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(id).<span class="property">innerHTML</span>;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(html)</span><br><span class="line">  <span class="comment">// 新建一个 DOM</span></span><br><span class="line">  <span class="keyword">const</span> div = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> printDOMID = <span class="string">&quot;printDOMElement&quot;</span>;</span><br><span class="line">  div.<span class="property">id</span> = printDOMID;</span><br><span class="line">  div.<span class="property">innerHTML</span> = html;</span><br><span class="line">  <span class="comment">// 提取第一个表格的内容 即表头</span></span><br><span class="line">  <span class="keyword">const</span> ths = div.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.el-table__header-wrapper th&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> <span class="title class_">ThsTextArry</span> = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = ths.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (ths[i].<span class="property">innerText</span> !== <span class="string">&quot;&quot;</span>) <span class="title class_">ThsTextArry</span>.<span class="title function_">push</span>(ths[i].<span class="property">innerText</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 删除多余的表头</span></span><br><span class="line">  div.<span class="title function_">querySelector</span>(<span class="string">&quot;.hidden-columns&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line">  <span class="comment">// 第一个表格的内容提取出来后已经没用了 删掉</span></span><br><span class="line">  div.<span class="title function_">querySelector</span>(<span class="string">&quot;.el-table__header-wrapper&quot;</span>).<span class="title function_">remove</span>();</span><br><span class="line">  <span class="comment">// 将第一个表格的内容插入到第二个表格</span></span><br><span class="line">  <span class="keyword">let</span> newHTML = <span class="string">&quot;&lt;tr&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, len = <span class="title class_">ThsTextArry</span>.<span class="property">length</span>; i &lt; len; i++) &#123;</span><br><span class="line">    newHTML +=</span><br><span class="line">      <span class="string">&#x27;&lt;td style=&quot;text-align: center; font-weight: bold&quot;&gt;&#x27;</span> +</span><br><span class="line">      <span class="title class_">ThsTextArry</span>[i] +</span><br><span class="line">      <span class="string">&quot;&lt;/td&gt;&quot;</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  newHTML += <span class="string">&quot;&lt;/tr&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">  div.<span class="title function_">querySelector</span>(<span class="string">&quot;.el-table__body-wrapper table&quot;</span>).<span class="title function_">insertAdjacentHTML</span>(<span class="string">&quot;afterbegin&quot;</span>, newHTML);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> str = div.<span class="title function_">querySelector</span>(<span class="string">&quot;.el-table__body-wrapper&quot;</span>).<span class="property">innerHTML</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(str)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 拼接空页面+style样式+dom内容</span></span><br><span class="line">  content = content + str;</span><br><span class="line">  printStr = printStr + tabStyle + content + <span class="string">&quot;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">  <span class="comment">// 打开新页面</span></span><br><span class="line">  <span class="keyword">let</span> pWin = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;_blank&quot;</span>);</span><br><span class="line">  <span class="comment">// 将内容赋值到新页面</span></span><br><span class="line">  pWin.<span class="property">document</span>.<span class="title function_">write</span>(printStr);</span><br><span class="line">  <span class="comment">// 使用setTimeout，等页面dom元素渲染完成后再打印。</span></span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    pWin.<span class="title function_">print</span>(); <span class="comment">// 调用打印功能。</span></span><br><span class="line">    pWin.<span class="title function_">close</span>(); <span class="comment">// 关闭 打印创建的当前页面</span></span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP相关知识</title>
      <link href="/posts/17087.html"/>
      <url>/posts/17087.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Post-和-Get-的区别"><a href="#Post-和-Get-的区别" class="headerlink" title="Post 和 Get 的区别"></a>Post 和 Get 的区别</h3><p>先引入副作用和幂等的概念。</p><p>副作用指对服务器上的资源做改变，搜索是无副作用的，注册是副作用的。</p><p>幂等指发送 M 和 N 次请求（两者不相同且都大于 1），服务器上资源的状态一致，比如注册 10 个和 11 个帐号是不幂等的，对文章进行更改 10 次和 11 次是幂等的。</p><p>在规范的应用场景上说，Get 多用于无副作用，幂等的场景，例如搜索关键字。Post 多用于副作用，不幂等的场景，例如注册。</p><p>在技术上说：</p><ul><li>Get 请求能缓存，Post 不能</li><li>Post 相对 Get 安全一点点，因为Get 请求都包含在 URL 里，且会被浏览器保存历史纪录，Post 不会，但是在抓包的情况下都是一样的。</li><li>Post 可以通过 request body来传输比 Get 更多的数据，Get 没有这个技术</li><li>URL有长度限制，会影响 Get 请求，但是这个长度限制是浏览器规定的，不是 RFC 规定的</li><li>Post 支持更多的编码类型且不对数据类型限制</li></ul><h3 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h3><p><strong>2XX 成功</strong></p><ul><li>200 OK，表示从客户端发来的请求在服务器端被正确处理</li><li>204 No content，表示请求成功，但响应报文不含实体的主体部分</li><li>205 Reset Content，表示请求成功，但响应报文不含实体的主体部分，但是与 204 响应不同在于要求请求方重置内容</li><li>206 Partial Content，进行范围请求</li></ul><p><strong>3XX 重定向</strong></p><ul><li>301 moved permanently，永久性重定向，表示资源已被分配了新的 URL</li><li>302 found，临时性重定向，表示资源临时被分配了新的 URL</li><li>303 see other，表示资源存在着另一个 URL，应使用 GET 方法获取资源</li><li>304 not modified，表示服务器允许访问资源，但因发生请求未满足条件的情况</li><li>307 temporary redirect，临时重定向，和302含义类似，但是期望客户端保持请求方法不变向新的地址发出请求</li></ul><p><strong>4XX 客户端错误</strong></p><ul><li>400 bad request，请求报文存在语法错误</li><li>401 unauthorized，表示发送的请求需要有通过 HTTP 认证的认证信息</li><li>403 forbidden，表示对请求资源的访问被服务器拒绝</li><li>404 not found，表示在服务器上没有找到请求的资源</li></ul><p><strong>5XX 服务器错误</strong></p><ul><li>500 internal sever error，表示服务器端在执行请求时发生了错误</li><li>501 Not Implemented，表示服务器不支持当前请求所需要的某个功能<ul><li>503 service unavailable，表明服务器暂时处于超负载或正在停机维护，无法处理请求</li></ul></li></ul><h3 id="DNS"><a href="#DNS" class="headerlink" title="DNS"></a>DNS</h3><p>DNS 的作用就是通过域名查询到具体的 IP。</p><p>因为 IP 存在数字和英文的组合（IPv6），很不利于人类记忆，所以就出现了域名。你可以把域名看成是某个 IP 的别名，DNS 就是去查询这个别名的真正名称是什么。</p><p>在 TCP 握手之前就已经进行了 DNS 查询，这个查询是操作系统自己做的。当你在浏览器中想访问 <code>www.google.com</code> 时，会进行一下操作：</p><ol><li>操作系统会首先在本地缓存中查询</li><li>没有的话会去系统配置的 DNS 服务器中查询</li><li>如果这时候还没得话，会直接去 DNS 根服务器查询，这一步查询会找出负责 <code>com</code> 这个一级域名的服务器</li><li>然后去该服务器查询 <code>google</code> 这个二级域名</li><li>接下来三级域名的查询其实是我们配置的，你可以给 <code>www</code> 这个域名配置一个 IP，然后还可以给别的三级域名配置一个 IP</li></ol><p>以上介绍的是 DNS 迭代查询，还有种是递归查询，区别就是前者是由客户端去做请求，后者是由系统配置的 DNS 服务器做请求，得到结果后将数据返回给客户端。</p><p>PS：DNS 是基于 UDP 做的查询。</p><h3 id="从输入-URL-到页面加载完成的过程"><a href="#从输入-URL-到页面加载完成的过程" class="headerlink" title="从输入 URL 到页面加载完成的过程"></a>从输入 URL 到页面加载完成的过程</h3><p>这是一个很经典的面试题，在这题中可以将本文讲得内容都串联起来。</p><ol><li>首先做 DNS 查询，如果这一步做了智能 DNS 解析的话，会提供访问速度最快的 IP 地址回来</li><li>接下来是 TCP 握手，应用层会下发数据给传输层，这里 TCP 协议会指明两端的端口号，然后下发给网络层。网络层中的 IP 协议会确定 IP 地址，并且指示了数据传输中如何跳转路由器。然后包会再被封装到数据链路层的数据帧结构中，最后就是物理层面的传输了</li><li>TCP 握手结束后会进行 TLS 握手，然后就开始正式的传输数据</li><li>数据在进入服务端之前，可能还会先经过负责负载均衡的服务器，它的作用就是将请求合理的分发到多台服务器上，这时假设服务端会响应一个 HTML 文件</li><li>首先浏览器会判断状态码是什么，如果是 200 那就继续解析，如果 400 或 500 的话就会报错，如果 300 的话会进行重定向，这里会有个重定向计数器，避免过多次的重定向，超过次数也会报错</li><li>浏览器开始解析文件，如果是 gzip 格式的话会先解压一下，然后通过文件的编码格式知道该如何去解码文件</li><li>文件解码成功后会正式开始渲染流程，先会根据 HTML 构建 DOM 树，有 CSS 的话会去构建 CSSOM 树。如果遇到 <code>script</code> 标签的话，会判断是否存在 <code>async</code> 或者 <code>defer</code> ，前者会并行进行下载并执行 JS，后者会先下载文件，然后等待 HTML 解析完成后顺序执行，如果以上都没有，就会阻塞住渲染流程直到 JS 执行完毕。遇到文件下载的会去下载文件，这里如果使用 HTTP 2.0 协议的话会极大的提高多图的下载效率。</li><li>初始的 HTML 被完全加载和解析后会触发 <code>DOMContentLoaded</code> 事件</li><li>CSSOM 树和 DOM 树构建完成后会开始生成 Render 树，这一步就是确定页面元素的布局、样式等等诸多方面的东西</li><li>在生成 Render 树的过程中，浏览器就开始调用 GPU 绘制，合成图层，将内容显示在屏幕上了</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> http </tag>
            
            <tag> 状态码 </tag>
            
            <tag> DNS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>异步笔试题</title>
      <link href="/posts/44210.html"/>
      <url>/posts/44210.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>异步笔试题</p></blockquote><p>请写出下面代码的运行结果</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这道题主要考察的是事件循环中函数执行顺序的问题，其中包括<code>async</code>，<code>await</code>，<code>setTimeout</code>，<code>Promise</code>函数。下面来说一下本题中涉及到的知识点。</p><h3 id="任务队列"><a href="#任务队列" class="headerlink" title="任务队列"></a><strong>任务队列</strong></h3><p>​    首先我们需要明白以下几件事情：</p><ul><li>JS分为同步任务和异步任务</li><li>同步任务都在主线程上执行，形成一个执行栈</li><li>主线程之外，事件触发线程管理着一个任务队列，只要异步任务有了运行结果，就在任务队列之中放置一个事件。</li><li>一旦执行栈中的所有同步任务执行完毕（此时JS引擎空闲），系统就会读取任务队列，将可运行的异步任务添加到可执行栈中，开始执行。</li></ul><p>​    根据规范，事件循环是通过<a href="https://www.w3.org/TR/html5/webappapis.html#task-queues">任务队列</a>的机制来进行协调的。一个 Event Loop 中，可以有一个或者多个任务队列(task queue)，一个任务队列便是一系列有序任务(task)的集合；<strong>每个任务都有一个任务源(task source)，源自同一个任务源的 task 必须放到同一个任务队列，从不同源来的则被添加到不同队列。</strong> setTimeout/Promise 等API便是任务源，而进入任务队列的是他们指定的具体执行任务。</p><p>​    <a href="https://camo.githubusercontent.com/569f3f8af4ef408bf1c8e86ef1a0c593a6b2a678e1ab36fb1d641d1f292dce08/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643764383530353663372e706e67"><img src="https://camo.githubusercontent.com/569f3f8af4ef408bf1c8e86ef1a0c593a6b2a678e1ab36fb1d641d1f292dce08/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643764383530353663372e706e67" alt="img"></a></p><h3 id="宏任务"><a href="#宏任务" class="headerlink" title="宏任务"></a><strong>宏任务</strong></h3><p>​    (macro)task（又称之为宏任务），可以理解是每次执行栈执行的代码就是一个宏任务（包括每次从事件队列中获取一个事件回调并放到执行栈中执行）。</p><p>​    浏览器为了能够使得JS内部(macro)task与DOM任务能够有序的执行，<strong>会在一个(macro)task执行结束后，在下一个(macro)task 执行开始前，对页面进行重新渲染</strong>，流程如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">(macro)task-&gt;渲染-&gt;(macro)task-&gt;...</span><br></pre></td></tr></table></figure><p>(macro)task主要包含：script(整体代码)、setTimeout、setInterval、I/O、UI交互事件、postMessage、MessageChannel、setImmediate(Node.js 环境)</p><h3 id="微任务"><a href="#微任务" class="headerlink" title="微任务"></a><strong>微任务</strong></h3><p>​    microtask（又称为微任务），<strong>可以理解是在当前 task 执行结束后立即执行的任务</strong>。也就是说，在当前task任务后，下一个task之前，在渲染之前。</p><p>​    所以它的响应速度相比setTimeout（setTimeout是task）会更快，因为无需等渲染。也就是说，在某一个macrotask执行完后，就会将在它执行期间产生的所有microtask都执行完毕（在渲染前）。</p><p>​    microtask主要包含：Promise.then、MutaionObserver、process.nextTick(Node.js 环境)</p><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a><strong>运行机制</strong></h3><p>​    在事件循环中，每进行一次循环操作称为 tick，每一次 tick 的任务<a href="https://www.w3.org/TR/html5/webappapis.html#event-loops-processing-model">处理模型</a>是比较复杂的，但关键步骤如下：</p><ul><li>执行一个宏任务（栈中没有就从事件队列中获取）</li><li>执行过程中如果遇到微任务，就将它添加到微任务的任务队列中</li><li>宏任务执行完毕后，立即执行当前微任务队列中的所有微任务（依次执行）</li><li>当前宏任务执行完毕，开始检查渲染，然后GUI线程接管渲染</li><li>渲染完毕后，JS线程继续接管，开始下一个宏任务（从事件队列中获取）</li></ul><p>​    流程图如下：</p><p>​    <a href="https://camo.githubusercontent.com/6960fe108d5b5064db1751528fc65ed70f08be3f40c25024ceef66370f4ef1b3/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643661353238626461662e6a7067"><img src="https://camo.githubusercontent.com/6960fe108d5b5064db1751528fc65ed70f08be3f40c25024ceef66370f4ef1b3/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643661353238626461662e6a7067" alt="img"></a></p><h3 id="Promise和async中的立即执行"><a href="#Promise和async中的立即执行" class="headerlink" title="Promise和async中的立即执行"></a><strong>Promise和async中的立即执行</strong></h3><p>我们知道Promise中的异步体现在<code>then</code>和<code>catch</code>中，所以写在Promise中的代码是被当做同步任务立即执行的。而在async/await中，在出现await出现之前，其中的代码也是立即执行的。那么出现了await时候发生了什么呢？</p><h3 id="await做了什么"><a href="#await做了什么" class="headerlink" title="await做了什么"></a><strong>await做了什么</strong></h3><p>​    从字面意思上看await就是等待，await 等待的是一个表达式，这个表达式的返回值可以是一个promise对象也可以是其他值。</p><p>​    很多人以为await会一直等待之后的表达式执行完之后才会继续执行后面的代码，<strong>实际上await是一个让出线程的标志。await后面的表达式会先执行一遍，将await后面的代码加入到microtask中，然后就会跳出整个async函数来执行后面的代码。</strong></p><p>​    由于因为async await 本身就是promise+generator的语法糖。所以await后面的代码是microtask。所以对于本题中的</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line"><span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>等价于</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="title function_">async2</span>()).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="回到本题"><a href="#回到本题" class="headerlink" title="回到本题"></a><strong>回到本题</strong></h3><p>​    以上就本道题涉及到的所有相关知识点了，下面我们再回到这道题来一步一步看看怎么回事儿。</p><ol><li>首先，事件循环从宏任务(macrotask)队列开始，这个时候，宏任务队列中，只有一个script(整体代码)任务；当遇到任务源(task source)时，则会先分发任务到对应的任务队列中去。所以，上面例子的第一步执行如下图所示：</li></ol><p><a href="https://camo.githubusercontent.com/5f236daf1f85b04ffae36a526b7a50aaa4331d58b43b99cdf7c8703c94ead6e4/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643639623432316166332e706e67"><img src="https://camo.githubusercontent.com/5f236daf1f85b04ffae36a526b7a50aaa4331d58b43b99cdf7c8703c94ead6e4/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643639623432316166332e706e67" alt="img"></a></p><p>2.然后我们看到首先定义了两个async函数，接着往下看，然后遇到了 <code>console</code> 语句，直接输出 <code>script start</code>。输出之后，script 任务继续往下执行，遇到 <code>setTimeout</code>，其作为一个宏任务源，则会先将其任务分发到对应的队列中：</p><p><a href="https://camo.githubusercontent.com/2022ffd886068fcd25518f4c7528c2baec00afd0d895f985a5f599d9d03821dd/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643639623432353530612e706e67"><img src="https://camo.githubusercontent.com/2022ffd886068fcd25518f4c7528c2baec00afd0d895f985a5f599d9d03821dd/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f30382f356335643639623432353530612e706e67" alt="img"></a></p><p>3.script 任务继续往下执行，执行了async1()函数，前面讲过async函数中在await之前的代码是立即执行的，所以会立即输出<code>async1 start</code>。</p><p>遇到了await时，会将await后面的表达式执行一遍，所以就紧接着输出<code>async2</code>，然后将await后面的代码也就是<code>console.log(&#39;async1 end&#39;)</code>加入到microtask中的Promise队列中，接着跳出async1函数来执行后面的代码。</p><p><a href="https://camo.githubusercontent.com/88b70d88483e46afee14e2b69072fb1759cddef336ea79a7329e895512283657/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f31382f356336616435383333376165642e706e67"><img src="https://camo.githubusercontent.com/88b70d88483e46afee14e2b69072fb1759cddef336ea79a7329e895512283657/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f31382f356336616435383333376165642e706e67" alt="img"></a></p><p>4.script任务继续往下执行，遇到Promise实例。由于Promise中的函数是立即执行的，而后续的 <code>.then</code> 则会被分发到 microtask 的 <code>Promise</code> 队列中去。所以会先输出 <code>promise1</code>，然后执行 <code>resolve</code>，将 <code>promise2</code> 分配到对应队列。</p><p><a href="https://camo.githubusercontent.com/0916cb5a9c1704fe199de69944ae7929ebe59b9ef3b3cd49961de26accd98fa9/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f31382f356336616435383334376135652e706e67"><img src="https://camo.githubusercontent.com/0916cb5a9c1704fe199de69944ae7929ebe59b9ef3b3cd49961de26accd98fa9/68747470733a2f2f692e6c6f6c692e6e65742f323031392f30322f31382f356336616435383334376135652e706e67" alt="img"></a></p><p>5.script任务继续往下执行，最后只有一句输出了 <code>script end</code>，至此，全局任务就执行完毕了。</p><p>根据上述，每次执行完一个宏任务之后，会去检查是否存在 Microtasks；如果有，则执行 Microtasks 直至清空 Microtask Queue。</p><p>因而在script任务执行完毕之后，开始查找清空微任务队列。此时，微任务中， <code>Promise</code> 队列有的两个任务<code>async1 end</code>和<code>promise2</code>，因此按先后顺序输出 <code>async1 end，promise2</code>。当所有的 Microtasks 执行完毕之后，表示第一轮的循环就结束了。</p><p>6.第二轮循环开始，这个时候就会跳回async1函数中执行后面的代码，然后遇到了同步任务 <code>console</code> 语句，直接输出 <code>async1 end</code>。这样第二轮的循环就结束了。（也可以理解为被加入到script任务队列中，所以会先与setTimeout队列执行）</p><p>7.第二轮循环依旧从宏任务队列开始。此时宏任务中只有一个 <code>setTimeout</code>，取出直接输出即可，至此整个流程结束。</p><p><strong>下面我会改变一下代码来加深印象</strong></p><h1 id="变式一"><a href="#变式一" class="headerlink" title="变式一"></a><strong>变式一</strong></h1><p>在第一个变式中我将async2中的函数也变成了Promise函数，代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//async2做出如下更改：</span></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise3&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise4&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>可以先自己看看输出顺序会是什么，下面来公布结果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">promise1</span><br><span class="line">promise3</span><br><span class="line">script end</span><br><span class="line">promise2</span><br><span class="line">async1 end</span><br><span class="line">promise4</span><br><span class="line"><span class="built_in">setTimeout</span></span><br></pre></td></tr></table></figure><p>在第一次macrotask执行完之后，也就是输出<code>script end</code>之后，会去清理所有microtask。所以会相继输出<code>promise2</code>，<code>async1 end</code>，<code>promise4</code>，其余不再多说。</p><h1 id="变式二"><a href="#变式二" class="headerlink" title="变式二"></a><strong>变式二</strong></h1><p>在第二个变式中，我将async1中await后面的代码和async2的代码都改为异步的，代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>);</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">async2</span>();</span><br><span class="line">    <span class="comment">//更改如下：</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout1&#x27;</span>)</span><br><span class="line">    &#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//更改如下：</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout2&#x27;</span>)</span><br><span class="line">&#125;,<span class="number">0</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout3&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>();</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>);</span><br></pre></td></tr></table></figure><p>可以先自己看看输出顺序会是什么，下面来公布结果：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">async1 start</span><br><span class="line">promise1</span><br><span class="line">script end</span><br><span class="line">promise2</span><br><span class="line">setTimeout3</span><br><span class="line">setTimeout2</span><br><span class="line">setTimeout1</span><br></pre></td></tr></table></figure><p>在输出为<code>promise2</code>之后，接下来会按照加入setTimeout队列的顺序来依次输出，通过代码我们可以看到加入顺序为<code>3 2 1</code>，所以会按3，2，1的顺序来输出。</p><h1 id="变式三"><a href="#变式三" class="headerlink" title="变式三"></a><strong>变式三</strong></h1><p>变式三是我在一篇面经中看到的原题，整体来说大同小异，代码如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">a1</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a1 start&#x27;</span>)</span><br><span class="line">    <span class="keyword">await</span> <span class="title function_">a2</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a1 end&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">a2</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a2&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">a1</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> promise2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&#x27;promise2.then&#x27;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">promise2.<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise3&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure><p>无非是在微任务那块儿做点文章，前面的内容如果你都看懂了的话这道题一定没问题的，结果如下：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">script start</span><br><span class="line">a1 start</span><br><span class="line">a2</span><br><span class="line">promise2</span><br><span class="line">script end</span><br><span class="line">promise1</span><br><span class="line">a1 end</span><br><span class="line">promise2.<span class="property">then</span></span><br><span class="line">promise3</span><br><span class="line"><span class="built_in">setTimeout</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>H5-C3知识点总结</title>
      <link href="/posts/19357.html"/>
      <url>/posts/19357.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h4 id="1、盒子水平垂直局中的方法"><a href="#1、盒子水平垂直局中的方法" class="headerlink" title="1、盒子水平垂直局中的方法"></a>1、盒子水平垂直局中的方法</h4><h5 id="flex-布局"><a href="#flex-布局" class="headerlink" title="flex 布局"></a>flex 布局</h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* html代码: */</span></span><br><span class="line">    &lt;div <span class="keyword">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">       <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;/div&gt;</span><br><span class="line"><span class="comment">/* CSS代码： */</span></span><br><span class="line">         .<span class="property">wrap</span>&#123;</span><br><span class="line">             <span class="comment">/* 设置为弹性布局 */</span></span><br><span class="line">             <span class="attr">display</span>: flex;</span><br><span class="line">             <span class="comment">/* 子元素在主轴对齐方式为居中 */</span></span><br><span class="line">             justify-<span class="attr">content</span>: center;</span><br><span class="line">             <span class="comment">/* 交叉轴在y轴对齐 */</span></span><br><span class="line">             align-<span class="attr">items</span>: center;</span><br><span class="line">         &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h5 id="Position-Transform"><a href="#Position-Transform" class="headerlink" title="Position + Transform"></a><strong>Position + Transform</strong></h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* html代码: */</span></span><br><span class="line">     &lt;div <span class="keyword">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"><span class="comment">/* CSS代码： */</span></span><br><span class="line">          .<span class="property">wrap</span>&#123;</span><br><span class="line">              <span class="attr">width</span>: 600px;</span><br><span class="line">              <span class="attr">height</span>: 600px;</span><br><span class="line">              <span class="attr">border</span>: 2px solid black;</span><br><span class="line">               <span class="comment">/* 设置为相对定位，用来作为绝对定位元素的容器块。 */</span></span><br><span class="line">              <span class="attr">position</span>: relative;</span><br><span class="line">          &#125;</span><br><span class="line">          .<span class="property">box</span>&#123;</span><br><span class="line">              <span class="attr">width</span>:50px;</span><br><span class="line">              <span class="attr">height</span>: 50px;</span><br><span class="line">              <span class="comment">/* 设置为绝对定位，位置在父容器的中心 */</span></span><br><span class="line">              <span class="attr">position</span>: absolute;</span><br><span class="line">              <span class="attr">margin</span>: auto;</span><br><span class="line">              <span class="attr">left</span>: <span class="number">50</span>%;</span><br><span class="line">              <span class="attr">top</span>:<span class="number">50</span>%;</span><br><span class="line">              <span class="comment">/* 向回移动自身一半的长宽 */</span></span><br><span class="line">              <span class="attr">transform</span>: <span class="title function_">translateX</span>(-<span class="number">50</span>%) <span class="title function_">translateY</span>(-<span class="number">50</span>%);</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h5 id="利用Position-margin-auto"><a href="#利用Position-margin-auto" class="headerlink" title="利用Position + margin:auto"></a>利用<strong>Position</strong> + <strong>margin:auto</strong></h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">   .<span class="property">father</span> &#123;</span><br><span class="line">     <span class="attr">margin</span>: 100px auto;</span><br><span class="line">     <span class="attr">width</span>: 500px;</span><br><span class="line">     <span class="attr">height</span>: 300px;</span><br><span class="line">     <span class="attr">border</span>: 1px solid #0a3b98;</span><br><span class="line">     <span class="attr">position</span>: relative;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">    .<span class="property">son</span> &#123;</span><br><span class="line">      <span class="attr">width</span>: 100px;</span><br><span class="line">      <span class="attr">height</span>: 40px;</span><br><span class="line">      <span class="attr">background</span>: #f0a238;</span><br><span class="line">      <span class="attr">position</span>: absolute;</span><br><span class="line">      <span class="attr">top</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attr">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attr">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attr">bottom</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attr">margin</span>: auto;</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="inline-block"><a href="#inline-block" class="headerlink" title="inline-block"></a><strong>inline-block</strong></h5><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/* html代码: */</span></span><br><span class="line">      &lt;div <span class="keyword">class</span>=<span class="string">&quot;wrap&quot;</span>&gt;</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line"><span class="comment">/* CSS代码： */</span></span><br><span class="line">          .<span class="property">wrap</span>&#123;</span><br><span class="line">              <span class="attr">width</span>: 600px;</span><br><span class="line">              <span class="attr">border</span>: 2px solid black;</span><br><span class="line">              <span class="comment">/* 设置行高为600px */</span></span><br><span class="line">              line-<span class="attr">height</span>: 600px;</span><br><span class="line">              <span class="comment">/* 让子盒子水平居中 */</span></span><br><span class="line">              text-<span class="attr">align</span>: center;</span><br><span class="line">          &#125;</span><br><span class="line">          .<span class="property">box</span>&#123;</span><br><span class="line">              <span class="attr">height</span>: 50px;</span><br><span class="line">              <span class="attr">width</span>: 50px;</span><br><span class="line">              <span class="comment">/* 设置为块级元素 */</span></span><br><span class="line">              <span class="attr">display</span>: inline-block;</span><br><span class="line">              <span class="comment">/* 设置为垂直居中 */</span></span><br><span class="line">              vertical-<span class="attr">align</span>: middle;</span><br><span class="line">              background-<span class="attr">color</span>: red;</span><br><span class="line">          &#125;</span><br></pre></td></tr></table></figure><h5 id="table-布局"><a href="#table-布局" class="headerlink" title="table 布局"></a><strong>table 布局</strong></h5><aside> 💡 设置父元素为`display:table-cell`，子元素设置 `display: inline-block`。利用`vertical`和`text-align`可以让所有的行内块级元素水平垂直居中</aside><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;style&gt;</span><br><span class="line">     .<span class="property">father</span> &#123;</span><br><span class="line">         <span class="attr">display</span>: table-cell;</span><br><span class="line">         <span class="attr">width</span>: 200px;</span><br><span class="line">         <span class="attr">height</span>: 200px;</span><br><span class="line">         <span class="attr">background</span>: skyblue;</span><br><span class="line">         vertical-<span class="attr">align</span>: middle;</span><br><span class="line">         text-<span class="attr">align</span>: center;</span><br><span class="line">     &#125;</span><br><span class="line">      .<span class="property">son</span> &#123;</span><br><span class="line">          <span class="attr">display</span>: inline-block;</span><br><span class="line">          <span class="attr">width</span>: 100px;</span><br><span class="line">          <span class="attr">height</span>: 100px;</span><br><span class="line">          <span class="attr">background</span>: red;</span><br><span class="line">      &#125;</span><br><span class="line">  &lt;/style&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;son&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>根据元素标签的性质，可以分为：</p><ul><li>内联元素居中布局</li><li>块级元素居中布局</li></ul><h6 id="内联元素居中布局"><a href="#内联元素居中布局" class="headerlink" title="内联元素居中布局"></a>内联元素居中布局</h6><p>水平居中</p><ul><li>行内元素可设置：<strong>text-align: center</strong></li><li><strong>flex</strong> 布局设置父元素：<strong>display: flex</strong> ; <strong>justify-content: center</strong></li></ul><p>垂直居中</p><ul><li>单行文本父元素确认高度：<strong>height === line-height</strong></li><li>多行文本父元素确认高度：<strong>disaply: table-cell</strong>; <strong>vertical-align: middle</strong></li></ul><h6 id="块级元素居中布局"><a href="#块级元素居中布局" class="headerlink" title="块级元素居中布局"></a>块级元素居中布局</h6><p>水平居中</p><ul><li>定宽: <strong>margin: 0 auto</strong></li><li>绝对定位 + <strong>left:50%</strong> + <strong>margin:</strong> 负自身一半</li></ul><p>垂直居中</p><ul><li><strong>position: absolute</strong> 设置 <strong>left</strong>、<strong>top</strong>、<strong>margin-left</strong>、<strong>margin-top</strong>(定高)</li><li><strong>display: table-cell</strong></li><li><strong>transform: translate(x, y)</strong></li><li><strong>flex</strong> (不定高，不定宽)</li><li><strong>grid</strong>(不定高，不定宽)，兼容性相对比较差</li></ul><h4 id="2、BFC（经典面试题）"><a href="#2、BFC（经典面试题）" class="headerlink" title="2、BFC（经典面试题）"></a>2、BFC（经典面试题）</h4><p><strong>概念：</strong></p><blockquote><p><em>Block Formatting Context</em>,翻译过来就是<strong>块级格式化上下文</strong></p><p>bfc 实际是一种属性，拥有这种属性后，就会<strong>让该渲染区域独立</strong>，并且该渲染区域中的内容布局不会影响到外界</p></blockquote><p><strong>如何触发:</strong></p><blockquote><ul><li><p>根元素(html)天然就会创建 BFC</p></li><li><p>float 属性不为 none</p></li><li><p>position 为 absolute 或 fixed</p></li><li>display 为 inline-block, table-cell, table-caption, flex, inline-flex</li><li>overflow 不为 visible</li></ul></blockquote><p><strong>解决什么问题</strong></p><blockquote><ul><li>外边距重叠<ul><li>外边距重叠,要注意这不是 bug，规范就是这样的，当两个盒子上下同时拥有上下间距，会取最大值</li></ul></li><li>清除浮动</li><li>当子盒子开启 float 后会影响后面的布局以及盒子高度</li><li>浮动覆盖<ul><li>由于浮动导致盒子被覆盖</li></ul></li></ul></blockquote><h4 id="3、盒模型"><a href="#3、盒模型" class="headerlink" title="3、盒模型"></a>3、盒模型</h4><blockquote><p>盒模型主要分为 4 部分：内容、外边距、内边距、边框</p><p>Css3 盒子模型可以通过 box-sizing 来改变</p></blockquote><p>标准盒模型（W3C 标准）：<code>content-box</code> 盒子实际宽度加上 padding 和 border</p><p>ie 盒模型/怪异盒模型/c3 盒模型：<code>box-sizing: border-box;</code> 设置 width 后，实际盒子的宽度就固定为该宽度，包含了 内容 + padding + border</p><h4 id="4、flex：1"><a href="#4、flex：1" class="headerlink" title="4、flex：1"></a>4、flex：1</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">flex</span>：<span class="number">1</span> → &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">0%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>flex-grow:1<ul><li>flex-grow 是<strong>用来增大盒子的</strong>，比如，当父盒子的宽度大于子盒子的宽度，父盒子的剩余空间可以利用 flex-grow 来设置子盒子增大的占比</li></ul></li><li>flex-shrink: 1<ul><li>flex-shrink 用来设置子盒子超过父盒子的宽度后，<strong>进行缩小的比例取值</strong></li></ul></li><li>flex-basis: 0%<ul><li><strong>设置盒子的基准宽度</strong>，并且 basis 和 width 同时存在会把 width 干掉</li></ul></li></ul><h4 id="5、c3-新属性"><a href="#5、c3-新属性" class="headerlink" title="5、c3 新属性"></a>5、c3 新属性</h4><ul><li>c3 盒模型 box-sizing</li><li>flex 布局</li><li>transition 过渡</li><li>transform2D 转换</li><li>background-size 背景缩放</li><li>border-radius 圆角</li><li>…….</li></ul><h4 id="6、清除浮动的方法"><a href="#6、清除浮动的方法" class="headerlink" title="6、清除浮动的方法"></a>6、清除浮动的方法</h4><ul><li>…….</li></ul>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui封装table组件</title>
      <link href="/posts/24658.html"/>
      <url>/posts/24658.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>myTable 组件<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;table-container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:row-class-name</span>=<span class="string">&quot;rowClassName&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:height</span>=<span class="string">&quot;height&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">:row-style</span>=<span class="string">&quot;&#123;height: `$&#123;rowHeight&#125;px`&#125;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in tableTitle&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">slot</span> <span class="attr">v-if</span>=<span class="string">&quot;item.slot&quot;</span> <span class="attr">:name</span>=<span class="string">&quot;item.slot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">v-else</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:prop</span>=<span class="string">&quot;item.property&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:label</span>=<span class="string">&quot;item.label&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:min-width</span>=<span class="string">&quot;item.minWidth ? item.minWidth : &#x27;&#x27;&quot;</span></span></span><br><span class="line"><span class="tag">                    <span class="attr">:width</span>=<span class="string">&quot;item.width ? item.width : &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&#x27;myTable&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">props</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tableData</span>: &#123; <span class="comment">// 表格数据</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">required</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: <span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> []</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">tableTitle</span>: &#123; <span class="comment">// 表格头标题</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: <span class="title class_">Array</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">require</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">height</span>: &#123; <span class="comment">// 表格高度</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: [<span class="title class_">Number</span>, <span class="title class_">String</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: <span class="string">&#x27;100%&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">rowHeight</span>: &#123; <span class="comment">// 表格行高</span></span></span><br><span class="line"><span class="language-javascript">            <span class="attr">type</span>: [<span class="title class_">Number</span>, <span class="title class_">String</span>],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">default</span>: <span class="number">44</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 可以通过指定 Table 组件的 row-class-name 属性来为 Table 中的某一行添加 class，表明该行处于某种状态。</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">rowClassName</span>(<span class="params">e</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">return</span> e.<span class="property">rowIndex</span> % <span class="number">2</span> === <span class="number">0</span> ? <span class="string">&#x27;&#x27;</span> : <span class="string">&#x27;light-line&#x27;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 样式 可以自定义 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span> <span class="attr">lang</span>=<span class="string">&quot;scss&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="selector-class">.table-container</span> &#123;</span></span><br><span class="line"><span class="language-css">    /deep/ <span class="selector-class">.el-table</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background-color</span>: transparent;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        &amp;<span class="selector-pseudo">::before</span> &#123; // 表格底部边框</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">tbody</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:hover</span> &gt; <span class="selector-tag">td</span> &#123; // 表格触碰样式</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#F5F7FA</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    /deep/ <span class="selector-class">.el-table__header-wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-table__cell</span> &#123; // 表头样式</span></span><br><span class="line"><span class="language-css">            <span class="attribute">height</span>: <span class="number">44px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-bottom</span>: <span class="number">#EBEEF5</span> solid <span class="number">1px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    /deep/ <span class="selector-class">.el-table__body-wrapper</span> &#123;</span></span><br><span class="line"><span class="language-css">        &amp;::-webkit-scrollbar &#123; // 表格滚动条</span></span><br><span class="line"><span class="language-css">            <span class="attribute">width</span>: <span class="number">0</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.el-table__row</span> &#123; // 表格行样式</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#F5F7FA</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.el-table__cell</span> &#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">border-bottom</span>: <span class="number">#EBEEF5</span> solid <span class="number">1px</span> <span class="meta">!important</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.light-line</span> &#123; // 高亮行颜色</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#FFFFFF</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">&#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>使用： father组件<br><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;father&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">my-table</span> <span class="attr">:table-title</span>=<span class="string">&quot;tableTitle&quot;</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">:table-data</span>=<span class="string">&quot;tableData&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">my-table</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;my-table</span></span><br><span class="line"><span class="comment">                        :table-title=&quot;tableTitle&quot;</span></span><br><span class="line"><span class="comment">                        :table-data=&quot;tableData&quot;&gt;</span></span><br><span class="line"><span class="comment">                    &lt;el-table-column slot=&quot;handle&quot; label=&quot;操作&quot;&gt;</span></span><br><span class="line"><span class="comment">                        &lt;template slot-scope=&quot;scope&quot;&gt;</span></span><br><span class="line"><span class="comment">                            &lt;el-button @click=&quot;handleClick(scope.row)&quot;&gt;查看&lt;/el-button&gt;</span></span><br><span class="line"><span class="comment">                        &lt;/template&gt;</span></span><br><span class="line"><span class="comment">                    &lt;/el-table-column&gt;</span></span><br><span class="line"><span class="comment">                &lt;/my-table&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">import</span> <span class="title class_">MyTable</span> <span class="keyword">from</span> <span class="string">&quot;./myTable&quot;</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">name</span>: <span class="string">&quot;father&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">components</span>: &#123;<span class="title class_">MyTable</span>&#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tableTitle</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">label</span>: <span class="string">&#x27;日期&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">property</span>: <span class="string">&#x27;date&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">label</span>: <span class="string">&#x27;姓名&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">property</span>: <span class="string">&#x27;name&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">label</span>: <span class="string">&#x27;地址&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">property</span>: <span class="string">&#x27;address&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">slot</span>: <span class="string">&#x27;handle&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            ],</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">tableData</span>: [</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date</span>: <span class="string">&#x27;2016-05-02&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1518 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date</span>: <span class="string">&#x27;2016-05-04&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1517 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date</span>: <span class="string">&#x27;2016-05-01&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1519 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;,</span></span><br><span class="line"><span class="language-javascript">                &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">date</span>: <span class="string">&#x27;2016-05-03&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">name</span>: <span class="string">&#x27;王小虎&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">address</span>: <span class="string">&#x27;上海市普陀区金沙江路 1516 弄&#x27;</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">created</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    &#125;,</span></span><br><span class="line"><span class="language-javascript">    <span class="attr">methods</span>: &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">&quot;less&quot;</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 后台系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP缓存</title>
      <link href="/posts/45598.html"/>
      <url>/posts/45598.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://juejin.cn/post/6844904153043435533#heading-1">https://juejin.cn/post/6844904153043435533#heading-1</a></p><p><img src="https://huyu-blog.oss-cn-hangzhou.aliyuncs.com/img/LED5VMyd8UK3Ge9.png?x-oss-process=style/huyu" alt="HTTP缓存"></p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用nvm切换node版本</title>
      <link href="/posts/30429.html"/>
      <url>/posts/30429.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>下载nvm（在nvm中下载nodejs，无需提前安装nodejs）<br><a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><blockquote><p>选择安装位置：<br>使用命令nvm判断是否安装成功</p></blockquote><h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><h5 id="1、查看可安装版本："><a href="#1、查看可安装版本：" class="headerlink" title="1、查看可安装版本："></a>1、查看可安装版本：</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm list [available]</span><br></pre></td></tr></table></figure><h5 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm install 11.13.0</span><br><span class="line">nvm use [version] [arch] ：使用制定版本node，可指定32/64位。</span><br></pre></td></tr></table></figure><h5 id="3、使用"><a href="#3、使用" class="headerlink" title="3、使用"></a>3、使用</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm use 11.13.0</span><br></pre></td></tr></table></figure><h5 id="4、卸载"><a href="#4、卸载" class="headerlink" title="4、卸载"></a>4、卸载</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nvm uninstall 11.13.0</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用正则</title>
      <link href="/posts/2964.html"/>
      <url>/posts/2964.html</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h1><h4 id="📞号码相关"><a href="#📞号码相关" class="headerlink" title="📞号码相关"></a>📞号码相关</h4><p>●手机号（以 1 开头）：/^(?:(?:+|00)86)?1\d{10}$/<br>●手机号（以 13 至19 开头）：/^(?:(?:+|00)86)?1[3-9]\d{9}$/<br>●手机号（以工信部公布的手机号段开头）：/^(?:(?:+|00)86)?1(?:(?:3[\d])|(?:4[5-79])|(?:5[0-35-9])|(?:6[5-7])|(?:7[0-8])|(?:8[\d])|(?:9[189]))\d{8}$/<br>●国内固话号码：/\d{3}-\d{8}|\d{4}-\d{7}/<br>●邮箱号：/^\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)<em>$/<br>●邮政编码：/[1-9]\d{5}(?!\d)/<br>●身份证号：/^[1-9]\d{5}(?:18|19|20)\d{2}(?:0[1-9]|10|11|12)(?:0[1-9]|[1-2]\d|30|31)\d{3}[\dXx]$/<br>●银行卡号（公、私账户）：/^[1-9]\d{9,29}$/<br>●车牌号：/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-HJ-NP-Z][A-HJ-NP-Z0-9]{4,5}[A-HJ-NP-Z0-9挂学警港澳]$/<br>●QQ 号：/^[1-9][0-9]{4,10}$/<br>●微信号：/^[a-zA-Z][-<em>a-zA-Z0-9]{5,19}$/<br>●版本号（ x.y.z ）：/^\d+(?:.\d+){2}$/<br>●合法账号1（字母开头，5-16位，允许字母数字下划线）：/^[a-zA-Z][a-zA-Z0-9</em>]{4,15}$/<br>●合法账号2（4-16位，允许字母，数字，下划线，减号）：/^[a-zA-Z0-9_-]{4,16}$/<br>●强密码1（必须包含大小写字母和数字的组合，不能使用特殊字符，长度在8-10之间）：/^(?=.</em>\d)(?=.<em>[a-z])(?=.</em>[A-Z]).{8,10}$/<br>●强密码2（必须包含字母、数字、特殊字符：<em>*@#$%^&amp; `~()-+=</em> ）：<br>/^(?![a-zA-Z]+$)(?![A-Z0-9]+$)(?![A-Z\W<em>!@#$%^&amp;* ~()-+=]+$)(?![a-z0-9]+$)(?![a-z\W</em>!@#$%^&amp; <em>~()-+=]+$)(?![0-9\W_!@#$%^&amp;</em> ~()-+=]+$)[a-zA-Z0-9\W<em>!@#$%^&amp;*~()-+=]/<br>●网址：/^(http|https):\/\/[\w-</em>]+(.[\w-_]+)+([\w-.,@?^=%&amp;:/~+#]*[\w-\@?^=%&amp;/~+#])?$/<br>●网址带端口号：/^((ht|f)tps?:\/\/)?[\w-]+(.[\w-]+)+:\d{1,5}\/?$/<br>●ip-v4：/\b(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\b/<br>●ip-v6：/(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/</p><h4 id="🔢数字相关"><a href="#🔢数字相关" class="headerlink" title="🔢数字相关"></a>🔢数字相关</h4><p>●只有数字：/^[0-9]<em>$/ 或 /^\d{1,}$/<br>●整数：/^-?[0-9]\d</em>$/<br>●正整数：/^+?[1-9]\d<em>$/<br>●非正整数：/^-[1-9]\d</em>|0$/<br>●负整数：/^-[1-9]\d<em>$/<br>●非负整数：/^\d+$/<br>●浮点数：/^(-?\d+)(.\d+)?$/<br>●正浮点数：/^[1-9]\d</em>.\d<em>|0.\d</em>[1-9]\d<em>$/<br>●负浮点数：/^-([1-9]\d</em>.\d<em>|0.\d</em>[1-9]\d<em>)/<br>●小数：/^-?\d+.\d+$/<br>●正数/负数/小数：/^(-|+)?\d+(.\d+)?$/<br>●正实数保留小数点后 2 位：/^[0-9]+(.[0-9]{2})?$/<br>●正实数保留小数点后 1 到 3 位：/^[0-9]+(.[0-9]{1,3})?$/<br>●n 位数字：/^\d{n}$/<br>●至少 n 位数字：/^\d{n,}$/<br>●m 至 n 位的数字：/^\d{m,n}$/<br>●数字和字母至少包含其一：/^[A-Za-z0-9]+$/<br>●必须包含数字和字母：/^(?=.</em>[a-zA-Z])(?=.<em>\d).+$/<br>●md5 值 ：/^([a-f\d]{32}|[A-F\d]{32})$/<br>●base64 值：/^\s</em>data:(?:[a-z]+\/[a-z0-9-+.]+(?:;[a-z-]+=[a-z0-9-]+)?)?(?:;base64)?,([a-z0-9!$&amp;’,()<em>+;=-._~:@/?%\s]</em>?)\s*$/i</p><h4 id="🔣字符相关"><a href="#🔣字符相关" class="headerlink" title="🔣字符相关"></a>🔣字符相关</h4><p>●m 至 n 位的字符：/^.{3,20}$/<br>●英文字母字符：/^[A-Za-z]+$/<br>●大写英文字母字符：/^[A-Z]+$/<br>●小写英文字母字符：/^[a-z]+$/<br>●汉字：/^[\u4e00-\u9fa5]{0,}$/<br>●全角符号：/[\uFF00-\uFFFF]/<br>●半角符号：/[\u0000-\u00FF]/<br>●汉字、英文、数字、下划线至少其一：/^[\u4E00-\u9FA5A-Za-z0-9_]+$/<br>●不包含字符 “~” ：/<sup><a href="#fn_~\x22" id="reffn_~\x22">~\x22</a></sup>+/<br>●字符连续重复：/(.)\1+/<br>●用来判断 textarea 是否全为空（不可全为空格和换行，允许字符前面和后面为空）：/^[\s\S]<em>.</em><sup><a href="#fn_\s" id="reffn_\s">\s</a></sup>[\s\S]*$/</p><h4 id="⌚时间相关"><a href="#⌚时间相关" class="headerlink" title="⌚时间相关"></a>⌚时间相关</h4><p>●24小时制时间（HH:mm:ss）：/^(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d$/<br>●12小时制时间（hh:mm:ss）：/^(?:1[0-2]|0?[1-9]):[0-5]\d:[0-5]\d$/<br>●24小时制时间（HHmmss）：/([0-1]?[0-9]|2[0-3])([0-5][0-9])([0-5][0-9])$/<br>●日期1（yyyy-MM-dd，如 2222-01-01，年份必为4位）：/^\d{4}-\d{1,2}-\d{1,2}/<br>●日期2（如 333-01-01，年份可小于4位）：/^\d{1,4}(-)(1[0-2]|0?[1-9])\1(0?[1-9]|[1-2]\d|30|31)$/<br>●日期3（yyyyMMdd，如 20220202）：/^((([0-9]{3}[1-9]|[0-9]{2}[1-9][0-9]{1}|[0-9]{1}[1-9][0-9]{2}|[1-9][0-9]{3})(((0[13578]|1[02])(0[1-9]|[12][0-9]|3[01]))|((0[469]|11)(0[1-9]|[12][0-9]|30))|(02(0[1-9]|[1][0-9]|2[0-8]))))|((([0-9]{2})(0[48]|[2468][048]|[13579][26])|((0[48]|[2468][048]|[3579][26])00))0229))$/<br>●日期+时间1（YYYYMMDD HH:mm:ss）：/^\d{4}([/:-\S])(1[0-2]|0?[1-9])\1(0?[1-9]|[1-2]\d|30|31) (?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d$/<br>●日期+时间2： /^[1-9]\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])\s+(20|21|22|23|[0-1]\d):[0-5]\d:[0-5]\d$/<br>●一年 12 个月（(01～09 或 1～12)）：/^(0?[1-9]|1[0-2])$/<br>●一个月 31 天（01～09 或 1～31）：/^((0?[1-9])|((1|2)[0-9])|30|31)$/<br>●有 31 天的月份：/^(0?[13578]|1[02])$/<br>●有 30 天月的份：/(0[469]|11)-(0[1-9]|[12][0-9]|30)/<br>●2 月 28 天（”02-28”）：/^02-(0[1-9]|[1][0-9]|2[0-8])$/<br>●闰年：/^(((19|20)([13579][26]|[2468][048]|0[48]))|(2000))$/<br>●闰年 2 月（比如 2008-02-01）：/^(((19|20)([13579][26]|[2468][048]|0[48]))|(2000))-0?2-(0?[1-9]|[12]\d)$/<br>●日期（包括闰年、大小月的判断）：/((((19|20)\d{2})-(0?(1|[3-9])|1[012])-(0?[1-9]|[12]\d|30))|(((19|20)\d{2})-(0?[13578]|1[02])-31)|(((19|20)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|((((19|20)([13579][26]|[2468][048]|0[48]))|(2000))-0?2-29))$/<br>●年份区间-年（比如 19 年至 20 年）：/^((19|20)\d{2})$/<br>●年份区间-年月（比如 1999-01）：/^((((19|20)\d{2})-(0?[13-9]|1[012]))|(((19|20)\d{2})-(0?[13578]|1[02]))|(((19|20)\d{2})-0?2)|((((19|20)([13579][26]|[2468][048]|0[48]))|(2000))-0?2))$/<br>●年份区间-年月日（比如 1999-01-01）：/^((((19|20)\d{2})-(0?[13-9]|1[012])-(0?[1-9]|[12]\d|30))|(((19|20)\d{2})-(0?[13578]|1[02])-31)|(((19|20)\d{2})-0?2-(0?[1-9]|1\d|2[0-8]))|((((19|20)([13579][26]|[2468][048]|0[48]))|(2000))-0?2-29))$/.test(‘2021-02-21’)$/<br>●年份区间-年月日（间隔符号可为 - / 或空）：/^(?:(?:1[6-9]|[2-9][0-9])[0-9]{2}([-/.]?)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:(?:1[6-9]|[2-9][0-9])(?:0[48]|[2468][048]|[13579][26])|(?:16|[2468][048]|[3579][26])00)([-/.]?)0?2\2(?:29))$/</p><h4 id="💻编程相关"><a href="#💻编程相关" class="headerlink" title="💻编程相关"></a>💻编程相关</h4><p>●16进制颜色：/^#?([a-fA-F0-9]{6}|[a-fA-F0-9]{3})$/<br>●提取网页颜色代码：/^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/<br>●视频链接地址：/^https?:\/\/(.+\/)+.+(.(swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4))$/i<br>●图片链接地址：/^https?:\/\/(.+\/)+.+(.(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif))$/i<br>●mac 地址：/^((([a-f0-9]{2}:){5})|(([a-f0-9]{2}-){5}))[a-f0-9]{2}$/i<br>●子网掩码：/^((?:(?:25[0-5]|2[0-4]\d|[01]?\d?\d)\.){3}(?:25[0-5]|2[0-4]\d|[01]?\d?\d))$/<br>●文件扩展名效验：/^([a-zA-Z]\:|\\)\\(<sup><a href="#fn_\\\\" id="reffn_\\\\">\\\\</a></sup>+\\)<em>[^\/:</em>?”&lt;&gt;|]+\.txt(l)?$/<br>●java包名（x.x.x）：/^([a-zA-Z<em>]\w*)+([.][a-zA-Z</em>]\w<em>)+$/<br>●xml文件：/^([a-zA-Z]+-?)+[a-zA-Z0-9]+\.[x|X][m|M][l|L]$/<br>●html 注释：/&lt;!—[\s\S]</em>?—&gt;/g<br>●html 标签1：/&lt;(\w+)<sup><a href="#fn_>" id="reffn_>">></a></sup><em>&gt;(.</em>?&lt;\/\1&gt;)?/<br>●html 标签2：/&lt;(\S<em>?)<sup><a href="#fn_>" id="reffn_>">></a></sup></em>&gt;.<em>?&lt;/\1&gt;|&lt;.</em>? /&gt;/<br>●首尾空白字符：/^\s<em>|\s</em>$/<br>●查找CSS属性:/^\s<em>[a-zA-Z\-]+\s</em>[:]{1}\s[a-zA-Z0-9\s.#]+[;]{1}/<br>●提取页面超链接:/(<a\\s*(?!.*\\brel=)[^>]<em>)(href=”https?:\/\/)((?!(?:(?:www\.)?’.implode(‘|(?:www\.)?’, $follow_list).’))<sup><a href="#fn_" rel="external nofollow" " id="reffn_" rel="external nofollow" ">" rel="external nofollow" </a></sup>+)”((?!.</em>\brel=)<sup><a href="#fn_>" id="reffn_>">></a></sup><em>)(?:<sup><a href="#fn_>" id="reffn_>">></a></sup></em>)&gt;/<br>●提取网页图片：/\&lt; <em>[img]<sup><a href="#fn_\\\\>" id="reffn_\\\\>">\\\\></a></sup></em>[src] <em>= </em>[\“\‘]{0,1}(<sup><a href="#fn_\\"\\'\\ >" id="reffn_\\"\\'\\ >">\\"\\'\\ ></a></sup><em>)/<br>●迅雷链接：/^thunder:\/\/[a-zA-Z0-9]+=$/<br>●ed2k链接：/^ed2k:\/\/|file|.+|\/$/<br>●linux”文件”路径：/^\/(\w+\/)+\w+.\w+$/<br>●window下”文件”路径：/^[a-zA-Z]:\(?:\w+\)</em>\w+.\w+$/<br>●匹配富文本中的字符（这里匹配的是字符：8）： str.replace(/8(?=<sup><a href="#fn_>" id="reffn_>">></a></sup>*(&lt;|$))/g, ‘x’)</p><h4 id="🍕生活相关"><a href="#🍕生活相关" class="headerlink" title="🍕生活相关"></a>🍕生活相关</h4><p>●金额（宽松，可为负、首位可为0，支持千分位分隔）：/^-?\d+(,\d{3})<em>(.\d{1,2})?$/<br>●金额（大于 0 ，两位小数）：/(^[1-9]{1}[0-9]</em>$)|(^[0-9]*.[0-9]{2}$)/<br>●金额（严格，不为负、小数点后最多两位，首位不为0）：/(^<a href="[0-9]+">1-9</a>?(.[0-9]{1,2})?$)|(^(0){1}$)|(^[0-9].<a href="[0-9]">0-9</a>?$)/<br>●护照：/(^[EeKkGgDdSsPpHh]\d{8}$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(1[45]))\d{7}$)/<br>●香港身份证：/^[a-zA-Z]\d{6}([\dA])$/<br>●澳门身份证：/^[1|5|7]\d{6}(\d)$/<br>●湾湾身份证：/^[a-zA-Z][0-9]{9}$/<br>●股票代码：/^(s[hz]|S[HZ])(000[\d]{3}|002[\d]{3}|300[\d]{3}|600[\d]{3}|60[\d]{4})$/<br>●不含 abc 的单词：/\b((?!abc)\w)+\b/</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
